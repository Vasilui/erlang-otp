===========================================================================
                          OpenSource Erlang/OTP 
===========================================================================


Please read the whole file before attempting to build and install Erlang.
You can find more information about OpenSource Erlang at

  http://www.erlang.org/


Portability
-----------

Erlang/OTP should be possible to build from source on any Unix
system. There is currently no source build for Windows but you can
download the binary release from http://www.erlang.org/.

At Ericsson we have a "Daily Build and Test" that runs on:
 
    Operating system        Version
    -----------------------------------------------------------
    Solaris/Sparc           2.5.1
    Solaris/Sparc           2.6
    Solaris/Sparc           2.7
    Solaris/Sparc           2.8
    Linux/RedHat x86        6.2
    Linux/Debian x86        2.2
    Linux/Debian PowerPC    2.2      (1)
    FreeBSD x86             4.1.1
    Darwin/Mac OS X PowerPC 10.2.1   (2)

(1) Runs on an Apple iMac.
(2) Runs on an Apple iMac. See notes below.


Required utilities
------------------

These are the tools you will need in order to unpack and build Erlang/OTP.

  Unpacking
  ---------

  GNU unzip, or a modern uncompress.

  A TAR program that understand the GNU TAR format for long
  filenames (such as e.g. GNU TAR).
  

  Compiling
  ---------

  GNU make

  GNU C compiler

  Perl 5

  nawk                  Optional but needed to convert V2 SNMP MIBS to
                        V1 MIBS. "gawk" will do but you have to create
                        a link from "nawk" to the "gawk" executable.  

  openSSL/ssleay        Optional but needed for building the Erlang/OTP
                        applications 'ssl' and 'crypto'. You need the
                        "development package" of SSL, i.e. including
                        the header files.

  Sun Java jdk-1.2.2    Optional but needed for building the Erlang/OTP
                        application 'jinterface' and parts of 'ic'
                        and 'orber'.

  X Windows             Optional but development headers and libraries
                        are needed to build Erlang/OTP application 'gs'
			on Unix/Linux.

  sed			There seem to be some problems with some of the
			'sed' version at Solaris. Make sure "/bin/sed"
			or "/usr/bin/sed" is used on the Solaris platform.

  Flex                  Optional, headers and libraries are needed to 
                        build the flex scanner for the megaco application
                        on Unix/Linux.

  Installing
  ----------

  An install program that can take multiple file names.


How to build and install Erlang/OTP
-----------------------------------

Start by unpacking the Erlang/OTP distribution file with your
GNU compatible TAR

  1)    gunzip -c otp_src_R9B-0.tar.gz | tar xf -
  1)    zcat otp_src_R9B-0.tar.gz | tar xf -

Now cd into base directory

  2)    cd otp_src_R9B-0

Run the following commands

  3)    ./configure  [ options ]

If you upgraded the source with the patch you may need to clean up
from previous builds before the new build. Do a "make clean", see
"Caveats" below.

  4)    make
  5)    make install

Let's go through them in some detail:

    Step 3 runs a configuration script created by the GNU autoconf
utility, which checks for system specific features and the creates a
number of makefiles. The configure script allows you to customize a
number of parameters, type "./configure --help" for details. One of
the things you can specify is where Erlang/OTP should be installed, by
default Erlang/OTP will install in /usr/local/{bin,lib/erlang,man/man1},
to keep the same structure but install in a different place, let's
call it <Dir>, than /usr/local use the --prefix argument. Like so:
"./configure --prefix=<Dir>". This step will also configure any
additional libraries unpacked in step 3 (if you didn't add any of the
extra libraries configure will issue a warning saying that there is no
configuration information in lib, this warning can safely be ignored).

You can also specify where the openSSL/ssleay include and library
files are located or disable the use of SSL.

Other options are:

	--disable-hipe   	Disable HiPE (High-Performance Erlang).
				HiPE will automatically be enabled on
				supported platforms (Ultra Sparc and
				x86-based machines running Linux or
				Solaris/x86).
	--enable-threads	Enable threaded I/O support in
				the Erlang emulator.
	--enable-shared-heap	Experimental version of Erlang with
				a shared heap for all processes, which
				speeds up message passing.

    Step 4 first builds the Erlang emulator, this will take
approximately five minutes on a reasonably fast machine. It then
proceeds to build the Erlang/OTP libraries in the "lib" subdirectory
using the built emulator and the bootstrap libraries provided in the
"bootstrap" subdirectory.  Compiling everything can take quite a long
time, expect half an hour up to a couple of hours. After step 4 is
completed you should have a working Erlang/OTP system which you can
try by typing "bin/erl". This should start up Erlang/OTP and give you
a prompt.

    Step 5 is optional. It installs Erlang/OTP (if you change your
mind about where you wish to install you can rerun step 3, without
having to do step 4 again).

If you or your system has special requirements please read the
Makefile for additional configuration information.


How to install the Erlang/OTP documentation
-------------------------------------------

For some graphical tools to find the on-line help you have to install
the HTML documentation on top of the installed OTP applications, i.e.

        cd <PrefixDir>/lib/erlang
        gunzip -c otp_doc_html_R9B-0.tar.gz | tar xf -

For "erl -man <page>" to work the Unix manual pages have to be
installed in the same way, i.e.

        cd <PrefixDir>/lib/erlang
        gunzip -c otp_doc_man_R9B-0.tar.gz | tar xf -


GS (Graphic System)
-------------------

GS now requires Tcl/Tk 8.3. It will be searched for when starting GS.

Using HiPE
----------

If you are running on a platform supporting HiPE and if
you have not disabled HiPE, you can compile an module into
native code like this from the Erlang shell:

	c(Module, native).

or

	c(Module, [native|OtherOptions]).

Using the erlc program, write like this:

	erlc +native Module.erl

The native code will be placed into the beam file and automatically
loaded when the beam file is loaded.

To add hipe options, write like this from the Erlang shell:

	c(Module, [native,{hipe,HipeOptions}|MoreOptions]).

Use

	hipe:help_options().

to print out the available options.


Darwin/Mac OS X
---------------

Mac OS X version 10.2 (Jaguar) is needed.
(Mac OS X 10.1.x will probably work as well, but we have
not tested the final R9 build any 10.1.x system.)

IMPORTANT! Use the "gnutar" command to unpack the sources.
(Using "tar" or Stuff-It Expander might seem to work, but it will not
build successfully.)

Erlang/OTP will read the network configuration files in "/etc" at
startup.  In Darwin these are normally not used by the operating
system. The easiest way to solve this is to make Erlang/OTP avoid this
is to put the line (including the ending '.')

  {lookup,["native"]}.

into the file "$HOME/.inetrc".

Make sure that the command "hostname" return a valid fully qualified
host name (this is configured in "/etc/hostconfig").

If you develop linked in drivers (shared library) you need to link
using "cc" and the flags "-bundle -flat_namespace -undefined
suppress". You also include "-fno-common" in CFLAGS when
compiling. Use ".so" as the library suffix.

Known issue: Dynamic loading of drivers (the "ddll" module) will
probably not work if you have installed "libcompat"
(required by Open Office for Mac OS X).

Caveats
-------

There are currently incorrect dependencies in the Makefiles, which
means that if you modify any source code the system might not build
properly. Also "make clean" does not clean out everything that should
be cleaned.


Make and the variable "ERL_TOP"
-------------------------------

All the makefiles in the entire directory tree use the environment
variable ERL_TOP to find the absolute path of the installation. The
configure script will figure this out and set it in the top level
Makefile (which, when building, it will pass on). However when
developing it is sometimes convenient to be able to run make in a
subdirectory. In order to do this you need to set the ERL_TOP variable
before you run make.

For example, assume your GNU make program is called "make" and you
wish to rebuild the Erlang/OTP part of stdlib, then you could do:

  cd lib/stdlib/src ; env ERL_TOP=<Dir> make

Where <Dir> would be what you find ERL_TOP is set to in the top level
Makefile.


More Information
----------------

More information can be found on http://www.erlang.org/

For commercial inquires (printed documentation, support et.c.) please
visit http://www.erlang.se/
