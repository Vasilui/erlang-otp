%%------------------------------------------------------------
%%
%% Implementation stub file
%% 
%% Target: mnesia_session
%% Source: /ldisk/daily_build/otp_prebuild_r11b.2007-06-11_19/otp_src_R11B-5/lib/mnesia_session/src/mnesia_session.idl
%% IC vsn: 4.2.13
%% 
%% This file is automatically generated. DO NOT EDIT IT.
%%
%%------------------------------------------------------------

-module(mnesia_session).
-ic_compiled("4_2_13").


%% Interface functions
-export([dirty_write/3, dirty_read/3, dirty_update_counter/4]).
-export([dirty_delete/3, dirty_delete_object/3, dirty_slot/3]).
-export([dirty_first/2, dirty_next/3, dirty_all_keys/2]).
-export([dirty_match_all/2, dirty_index_read/4, create_table/3]).
-export([delete_table/2, add_table_copy/4, del_table_copy/3]).
-export([move_table_copy/4, add_table_index/3, del_table_index/3]).
-export([change_table_copy_type/4, change_table_access_mode/3, wait_for_tables/3]).
-export([force_load_table/2, change_table_load_order/3, set_master_nodes1/2]).
-export([set_master_nodes2/3, backup1/2, backup2/3]).
-export([install_fallback1/2, install_fallback2/3, uninstall_fallback/1]).
-export([dump_log/1, dump_tables/2, activate_checkpoint/2]).
-export([deactivate_checkpoint/2, backup_checkpoint1/3, backup_checkpoint2/4]).
-export([load_textfile/2, dump_to_textfile/2, table_info/2]).
-export([system_info/1, dirty_match_object/3, dirty_index_match_object/4]).
-export([create_schema/2, delete_schema/2, start_mnesia/1]).
-export([stop_mnesia/1]).

%% Type identification function
-export([typeID/0]).

%% Used to start server
-export([oe_create/0, oe_create_link/0, oe_create/1]).
-export([oe_create_link/1, oe_create/2, oe_create_link/2]).

-export([start/2, start_link/3]).

%% gen server export stuff
-behaviour(gen_server).
-export([stop/1, init/1, terminate/2]).
-export([handle_call/3, handle_cast/2, handle_info/2]).
-export([code_change/3]).


%%------------------------------------------------------------
%%
%% Object interface functions.
%%
%%------------------------------------------------------------



%%%% Operation: dirty_write
%% 
%%   Returns: RetVal, Reason
%%
dirty_write(OE_THIS, Tab, Object) ->
    gen_server:call(OE_THIS, {dirty_write, Tab, Object}, infinity).

%%%% Operation: dirty_read
%% 
%%   Returns: RetVal, Result, Reason
%%
dirty_read(OE_THIS, Tab, Key) ->
    gen_server:call(OE_THIS, {dirty_read, Tab, Key}, infinity).

%%%% Operation: dirty_update_counter
%% 
%%   Returns: RetVal, Newval, Reason
%%
dirty_update_counter(OE_THIS, Tab, Key, Val) ->
    gen_server:call(OE_THIS, {dirty_update_counter, Tab, Key, Val}, infinity).

%%%% Operation: dirty_delete
%% 
%%   Returns: RetVal, Reason
%%
dirty_delete(OE_THIS, Tab, Key) ->
    gen_server:call(OE_THIS, {dirty_delete, Tab, Key}, infinity).

%%%% Operation: dirty_delete_object
%% 
%%   Returns: RetVal, Reason
%%
dirty_delete_object(OE_THIS, Tab, Object) ->
    gen_server:call(OE_THIS, {dirty_delete_object, Tab, Object}, infinity).

%%%% Operation: dirty_slot
%% 
%%   Returns: RetVal, Result, Reason
%%
dirty_slot(OE_THIS, Tab, Slot) ->
    gen_server:call(OE_THIS, {dirty_slot, Tab, Slot}, infinity).

%%%% Operation: dirty_first
%% 
%%   Returns: RetVal, Next_key, Reason
%%
dirty_first(OE_THIS, Tab) ->
    gen_server:call(OE_THIS, {dirty_first, Tab}, infinity).

%%%% Operation: dirty_next
%% 
%%   Returns: RetVal, Next_key, Reason
%%
dirty_next(OE_THIS, Tab, Key) ->
    gen_server:call(OE_THIS, {dirty_next, Tab, Key}, infinity).

%%%% Operation: dirty_all_keys
%% 
%%   Returns: RetVal, Keys, Reason
%%
dirty_all_keys(OE_THIS, Tab) ->
    gen_server:call(OE_THIS, {dirty_all_keys, Tab}, infinity).

%%%% Operation: dirty_match_all
%% 
%%   Returns: RetVal, Result, Reason
%%
dirty_match_all(OE_THIS, Tab) ->
    gen_server:call(OE_THIS, {dirty_match_all, Tab}, infinity).

%%%% Operation: dirty_index_read
%% 
%%   Returns: RetVal, Result, Reason
%%
dirty_index_read(OE_THIS, Tab, Key, Pos) ->
    gen_server:call(OE_THIS, {dirty_index_read, Tab, Key, Pos}, infinity).

%%%% Operation: create_table
%% 
%%   Returns: RetVal, Reason
%%
create_table(OE_THIS, Tab, TabDefs) ->
    gen_server:call(OE_THIS, {create_table, Tab, TabDefs}, infinity).

%%%% Operation: delete_table
%% 
%%   Returns: RetVal, Reason
%%
delete_table(OE_THIS, Tab) ->
    gen_server:call(OE_THIS, {delete_table, Tab}, infinity).

%%%% Operation: add_table_copy
%% 
%%   Returns: RetVal, Reason
%%
add_table_copy(OE_THIS, Tab, Node, Type) ->
    gen_server:call(OE_THIS, {add_table_copy, Tab, Node, Type}, infinity).

%%%% Operation: del_table_copy
%% 
%%   Returns: RetVal, Reason
%%
del_table_copy(OE_THIS, Tab, Node) ->
    gen_server:call(OE_THIS, {del_table_copy, Tab, Node}, infinity).

%%%% Operation: move_table_copy
%% 
%%   Returns: RetVal, Reason
%%
move_table_copy(OE_THIS, Tab, From, To) ->
    gen_server:call(OE_THIS, {move_table_copy, Tab, From, To}, infinity).

%%%% Operation: add_table_index
%% 
%%   Returns: RetVal, Reason
%%
add_table_index(OE_THIS, Tab, Attrname) ->
    gen_server:call(OE_THIS, {add_table_index, Tab, Attrname}, infinity).

%%%% Operation: del_table_index
%% 
%%   Returns: RetVal, Reason
%%
del_table_index(OE_THIS, Tab, Attrname) ->
    gen_server:call(OE_THIS, {del_table_index, Tab, Attrname}, infinity).

%%%% Operation: change_table_copy_type
%% 
%%   Returns: RetVal, Reason
%%
change_table_copy_type(OE_THIS, Tab, Node, Type) ->
    gen_server:call(OE_THIS, {change_table_copy_type, Tab, Node, Type}, infinity).

%%%% Operation: change_table_access_mode
%% 
%%   Returns: RetVal, Reason
%%
change_table_access_mode(OE_THIS, Tab, Mode) ->
    gen_server:call(OE_THIS, {change_table_access_mode, Tab, Mode}, infinity).

%%%% Operation: wait_for_tables
%% 
%%   Returns: RetVal, Failed_tabs, Reason
%%
wait_for_tables(OE_THIS, Tabs, Timeout) ->
    gen_server:call(OE_THIS, {wait_for_tables, Tabs, Timeout}, infinity).

%%%% Operation: force_load_table
%% 
%%   Returns: RetVal, Reason
%%
force_load_table(OE_THIS, Tab) ->
    gen_server:call(OE_THIS, {force_load_table, Tab}, infinity).

%%%% Operation: change_table_load_order
%% 
%%   Returns: RetVal, Reason
%%
change_table_load_order(OE_THIS, Tab, Load_order) ->
    gen_server:call(OE_THIS, {change_table_load_order, Tab, Load_order}, infinity).

%%%% Operation: set_master_nodes1
%% 
%%   Returns: RetVal, Reason
%%
set_master_nodes1(OE_THIS, Nodes) ->
    gen_server:call(OE_THIS, {set_master_nodes1, Nodes}, infinity).

%%%% Operation: set_master_nodes2
%% 
%%   Returns: RetVal, Reason
%%
set_master_nodes2(OE_THIS, Tab, Nodes) ->
    gen_server:call(OE_THIS, {set_master_nodes2, Tab, Nodes}, infinity).

%%%% Operation: backup1
%% 
%%   Returns: RetVal, Reason
%%
backup1(OE_THIS, Filename) ->
    gen_server:call(OE_THIS, {backup1, Filename}, infinity).

%%%% Operation: backup2
%% 
%%   Returns: RetVal, Reason
%%
backup2(OE_THIS, Opaque, Modulename) ->
    gen_server:call(OE_THIS, {backup2, Opaque, Modulename}, infinity).

%%%% Operation: install_fallback1
%% 
%%   Returns: RetVal, Reason
%%
install_fallback1(OE_THIS, Filename) ->
    gen_server:call(OE_THIS, {install_fallback1, Filename}, infinity).

%%%% Operation: install_fallback2
%% 
%%   Returns: RetVal, Reason
%%
install_fallback2(OE_THIS, Opaque, Modulename) ->
    gen_server:call(OE_THIS, {install_fallback2, Opaque, Modulename}, infinity).

%%%% Operation: uninstall_fallback
%% 
%%   Returns: RetVal, Reason
%%
uninstall_fallback(OE_THIS) ->
    gen_server:call(OE_THIS, uninstall_fallback, infinity).

%%%% Operation: dump_log
%% 
%%   Returns: RetVal, Reason
%%
dump_log(OE_THIS) ->
    gen_server:call(OE_THIS, dump_log, infinity).

%%%% Operation: dump_tables
%% 
%%   Returns: RetVal, Reason
%%
dump_tables(OE_THIS, List) ->
    gen_server:call(OE_THIS, {dump_tables, List}, infinity).

%%%% Operation: activate_checkpoint
%% 
%%   Returns: RetVal, Reason
%%
activate_checkpoint(OE_THIS, Cpdef) ->
    gen_server:call(OE_THIS, {activate_checkpoint, Cpdef}, infinity).

%%%% Operation: deactivate_checkpoint
%% 
%%   Returns: RetVal, Reason
%%
deactivate_checkpoint(OE_THIS, CpName) ->
    gen_server:call(OE_THIS, {deactivate_checkpoint, CpName}, infinity).

%%%% Operation: backup_checkpoint1
%% 
%%   Returns: RetVal, Reason
%%
backup_checkpoint1(OE_THIS, CpName, Filename) ->
    gen_server:call(OE_THIS, {backup_checkpoint1, CpName, Filename}, infinity).

%%%% Operation: backup_checkpoint2
%% 
%%   Returns: RetVal, Reason
%%
backup_checkpoint2(OE_THIS, CpName, Opaque, Modulename) ->
    gen_server:call(OE_THIS, {backup_checkpoint2, CpName, Opaque, Modulename}, infinity).

%%%% Operation: load_textfile
%% 
%%   Returns: RetVal, Reason
%%
load_textfile(OE_THIS, Filename) ->
    gen_server:call(OE_THIS, {load_textfile, Filename}, infinity).

%%%% Operation: dump_to_textfile
%% 
%%   Returns: RetVal, Reason
%%
dump_to_textfile(OE_THIS, Filename) ->
    gen_server:call(OE_THIS, {dump_to_textfile, Filename}, infinity).

%%%% Operation: table_info
%% 
%%   Returns: RetVal, Info, Reason
%%
table_info(OE_THIS, Tab) ->
    gen_server:call(OE_THIS, {table_info, Tab}, infinity).

%%%% Operation: system_info
%% 
%%   Returns: RetVal, Info, Reason
%%
system_info(OE_THIS) ->
    gen_server:call(OE_THIS, system_info, infinity).

%%%% Operation: dirty_match_object
%% 
%%   Returns: RetVal, Result, Reason
%%
dirty_match_object(OE_THIS, Tab, Pattern) ->
    gen_server:call(OE_THIS, {dirty_match_object, Tab, Pattern}, infinity).

%%%% Operation: dirty_index_match_object
%% 
%%   Returns: RetVal, Result, Reason
%%
dirty_index_match_object(OE_THIS, Tab, Pattern, Pos) ->
    gen_server:call(OE_THIS, {dirty_index_match_object, Tab, Pattern, Pos}, infinity).

%%%% Operation: create_schema
%% 
%%   Returns: RetVal, Reason
%%
create_schema(OE_THIS, Nodes) ->
    gen_server:call(OE_THIS, {create_schema, Nodes}, infinity).

%%%% Operation: delete_schema
%% 
%%   Returns: RetVal, Reason
%%
delete_schema(OE_THIS, Nodes) ->
    gen_server:call(OE_THIS, {delete_schema, Nodes}, infinity).

%%%% Operation: start_mnesia
%% 
%%   Returns: RetVal, Reason
%%
start_mnesia(OE_THIS) ->
    gen_server:call(OE_THIS, start_mnesia, infinity).

%%%% Operation: stop_mnesia
%% 
%%   Returns: RetVal, Reason
%%
stop_mnesia(OE_THIS) ->
    gen_server:call(OE_THIS, stop_mnesia, infinity).




%%------------------------------------------------------------
%%
%% Server implementation.
%%
%%------------------------------------------------------------


%%------------------------------------------------------------
%%
%% Function for fetching the interface type ID.
%%
%%------------------------------------------------------------

typeID() ->
    "IDL:mnesia/session:1.0".


%%------------------------------------------------------------
%%
%% Server creation functions.
%%
%%------------------------------------------------------------

oe_create() ->
    start([], []).

oe_create_link() ->
    start_link([], []).

oe_create(Env) ->
    start(Env, []).

oe_create_link(Env) ->
    start_link(Env, []).

oe_create(Env, RegName) ->
    start(RegName, Env, []).

oe_create_link(Env, RegName) ->
    start_link(RegName, Env, []).

%%------------------------------------------------------------
%%
%% Start functions.
%%
%%------------------------------------------------------------

start(Env, Opt) ->
    gen_server:start(?MODULE, Env, Opt).

start_link(Env, Opt) ->
    gen_server:start_link(?MODULE, Env, Opt).

start(RegName, Env, Opt) ->
    gen_server:start(RegName, ?MODULE, Env, Opt).

start_link(RegName, Env, Opt) ->
    gen_server:start_link(RegName, ?MODULE, Env, Opt).

%% Standard gen_server termination
stop(OE_THIS) ->
    gen_server:cast(OE_THIS,stop).

%% Call to implementation init
init(Env) ->
    mnesia_session_impl:init(Env).

terminate(Reason, State) ->
    mnesia_session_impl:terminate(Reason, State).


%%%% Operation: dirty_write
%% 
%%   Returns: RetVal, Reason
%%
handle_call({dirty_write, Tab, Object}, _, OE_State) ->
    mnesia_session_impl:dirty_write(OE_State, Tab, Object);

%%%% Operation: dirty_read
%% 
%%   Returns: RetVal, Result, Reason
%%
handle_call({dirty_read, Tab, Key}, _, OE_State) ->
    mnesia_session_impl:dirty_read(OE_State, Tab, Key);

%%%% Operation: dirty_update_counter
%% 
%%   Returns: RetVal, Newval, Reason
%%
handle_call({dirty_update_counter, Tab, Key, Val}, _, OE_State) ->
    mnesia_session_impl:dirty_update_counter(OE_State, Tab, Key, Val);

%%%% Operation: dirty_delete
%% 
%%   Returns: RetVal, Reason
%%
handle_call({dirty_delete, Tab, Key}, _, OE_State) ->
    mnesia_session_impl:dirty_delete(OE_State, Tab, Key);

%%%% Operation: dirty_delete_object
%% 
%%   Returns: RetVal, Reason
%%
handle_call({dirty_delete_object, Tab, Object}, _, OE_State) ->
    mnesia_session_impl:dirty_delete_object(OE_State, Tab, Object);

%%%% Operation: dirty_slot
%% 
%%   Returns: RetVal, Result, Reason
%%
handle_call({dirty_slot, Tab, Slot}, _, OE_State) ->
    mnesia_session_impl:dirty_slot(OE_State, Tab, Slot);

%%%% Operation: dirty_first
%% 
%%   Returns: RetVal, Next_key, Reason
%%
handle_call({dirty_first, Tab}, _, OE_State) ->
    mnesia_session_impl:dirty_first(OE_State, Tab);

%%%% Operation: dirty_next
%% 
%%   Returns: RetVal, Next_key, Reason
%%
handle_call({dirty_next, Tab, Key}, _, OE_State) ->
    mnesia_session_impl:dirty_next(OE_State, Tab, Key);

%%%% Operation: dirty_all_keys
%% 
%%   Returns: RetVal, Keys, Reason
%%
handle_call({dirty_all_keys, Tab}, _, OE_State) ->
    mnesia_session_impl:dirty_all_keys(OE_State, Tab);

%%%% Operation: dirty_match_all
%% 
%%   Returns: RetVal, Result, Reason
%%
handle_call({dirty_match_all, Tab}, _, OE_State) ->
    mnesia_session_impl:dirty_match_all(OE_State, Tab);

%%%% Operation: dirty_index_read
%% 
%%   Returns: RetVal, Result, Reason
%%
handle_call({dirty_index_read, Tab, Key, Pos}, _, OE_State) ->
    mnesia_session_impl:dirty_index_read(OE_State, Tab, Key, Pos);

%%%% Operation: create_table
%% 
%%   Returns: RetVal, Reason
%%
handle_call({create_table, Tab, TabDefs}, _, OE_State) ->
    mnesia_session_impl:create_table(OE_State, Tab, TabDefs);

%%%% Operation: delete_table
%% 
%%   Returns: RetVal, Reason
%%
handle_call({delete_table, Tab}, _, OE_State) ->
    mnesia_session_impl:delete_table(OE_State, Tab);

%%%% Operation: add_table_copy
%% 
%%   Returns: RetVal, Reason
%%
handle_call({add_table_copy, Tab, Node, Type}, _, OE_State) ->
    mnesia_session_impl:add_table_copy(OE_State, Tab, Node, Type);

%%%% Operation: del_table_copy
%% 
%%   Returns: RetVal, Reason
%%
handle_call({del_table_copy, Tab, Node}, _, OE_State) ->
    mnesia_session_impl:del_table_copy(OE_State, Tab, Node);

%%%% Operation: move_table_copy
%% 
%%   Returns: RetVal, Reason
%%
handle_call({move_table_copy, Tab, From, To}, _, OE_State) ->
    mnesia_session_impl:move_table_copy(OE_State, Tab, From, To);

%%%% Operation: add_table_index
%% 
%%   Returns: RetVal, Reason
%%
handle_call({add_table_index, Tab, Attrname}, _, OE_State) ->
    mnesia_session_impl:add_table_index(OE_State, Tab, Attrname);

%%%% Operation: del_table_index
%% 
%%   Returns: RetVal, Reason
%%
handle_call({del_table_index, Tab, Attrname}, _, OE_State) ->
    mnesia_session_impl:del_table_index(OE_State, Tab, Attrname);

%%%% Operation: change_table_copy_type
%% 
%%   Returns: RetVal, Reason
%%
handle_call({change_table_copy_type, Tab, Node, Type}, _, OE_State) ->
    mnesia_session_impl:change_table_copy_type(OE_State, Tab, Node, Type);

%%%% Operation: change_table_access_mode
%% 
%%   Returns: RetVal, Reason
%%
handle_call({change_table_access_mode, Tab, Mode}, _, OE_State) ->
    mnesia_session_impl:change_table_access_mode(OE_State, Tab, Mode);

%%%% Operation: wait_for_tables
%% 
%%   Returns: RetVal, Failed_tabs, Reason
%%
handle_call({wait_for_tables, Tabs, Timeout}, _, OE_State) ->
    mnesia_session_impl:wait_for_tables(OE_State, Tabs, Timeout);

%%%% Operation: force_load_table
%% 
%%   Returns: RetVal, Reason
%%
handle_call({force_load_table, Tab}, _, OE_State) ->
    mnesia_session_impl:force_load_table(OE_State, Tab);

%%%% Operation: change_table_load_order
%% 
%%   Returns: RetVal, Reason
%%
handle_call({change_table_load_order, Tab, Load_order}, _, OE_State) ->
    mnesia_session_impl:change_table_load_order(OE_State, Tab, Load_order);

%%%% Operation: set_master_nodes1
%% 
%%   Returns: RetVal, Reason
%%
handle_call({set_master_nodes1, Nodes}, _, OE_State) ->
    mnesia_session_impl:set_master_nodes1(OE_State, Nodes);

%%%% Operation: set_master_nodes2
%% 
%%   Returns: RetVal, Reason
%%
handle_call({set_master_nodes2, Tab, Nodes}, _, OE_State) ->
    mnesia_session_impl:set_master_nodes2(OE_State, Tab, Nodes);

%%%% Operation: backup1
%% 
%%   Returns: RetVal, Reason
%%
handle_call({backup1, Filename}, _, OE_State) ->
    mnesia_session_impl:backup1(OE_State, Filename);

%%%% Operation: backup2
%% 
%%   Returns: RetVal, Reason
%%
handle_call({backup2, Opaque, Modulename}, _, OE_State) ->
    mnesia_session_impl:backup2(OE_State, Opaque, Modulename);

%%%% Operation: install_fallback1
%% 
%%   Returns: RetVal, Reason
%%
handle_call({install_fallback1, Filename}, _, OE_State) ->
    mnesia_session_impl:install_fallback1(OE_State, Filename);

%%%% Operation: install_fallback2
%% 
%%   Returns: RetVal, Reason
%%
handle_call({install_fallback2, Opaque, Modulename}, _, OE_State) ->
    mnesia_session_impl:install_fallback2(OE_State, Opaque, Modulename);

%%%% Operation: uninstall_fallback
%% 
%%   Returns: RetVal, Reason
%%
handle_call(uninstall_fallback, _, OE_State) ->
    mnesia_session_impl:uninstall_fallback(OE_State);

%%%% Operation: dump_log
%% 
%%   Returns: RetVal, Reason
%%
handle_call(dump_log, _, OE_State) ->
    mnesia_session_impl:dump_log(OE_State);

%%%% Operation: dump_tables
%% 
%%   Returns: RetVal, Reason
%%
handle_call({dump_tables, List}, _, OE_State) ->
    mnesia_session_impl:dump_tables(OE_State, List);

%%%% Operation: activate_checkpoint
%% 
%%   Returns: RetVal, Reason
%%
handle_call({activate_checkpoint, Cpdef}, _, OE_State) ->
    mnesia_session_impl:activate_checkpoint(OE_State, Cpdef);

%%%% Operation: deactivate_checkpoint
%% 
%%   Returns: RetVal, Reason
%%
handle_call({deactivate_checkpoint, CpName}, _, OE_State) ->
    mnesia_session_impl:deactivate_checkpoint(OE_State, CpName);

%%%% Operation: backup_checkpoint1
%% 
%%   Returns: RetVal, Reason
%%
handle_call({backup_checkpoint1, CpName, Filename}, _, OE_State) ->
    mnesia_session_impl:backup_checkpoint1(OE_State, CpName, Filename);

%%%% Operation: backup_checkpoint2
%% 
%%   Returns: RetVal, Reason
%%
handle_call({backup_checkpoint2, CpName, Opaque, Modulename}, _, OE_State) ->
    mnesia_session_impl:backup_checkpoint2(OE_State, CpName, Opaque, Modulename);

%%%% Operation: load_textfile
%% 
%%   Returns: RetVal, Reason
%%
handle_call({load_textfile, Filename}, _, OE_State) ->
    mnesia_session_impl:load_textfile(OE_State, Filename);

%%%% Operation: dump_to_textfile
%% 
%%   Returns: RetVal, Reason
%%
handle_call({dump_to_textfile, Filename}, _, OE_State) ->
    mnesia_session_impl:dump_to_textfile(OE_State, Filename);

%%%% Operation: table_info
%% 
%%   Returns: RetVal, Info, Reason
%%
handle_call({table_info, Tab}, _, OE_State) ->
    mnesia_session_impl:table_info(OE_State, Tab);

%%%% Operation: system_info
%% 
%%   Returns: RetVal, Info, Reason
%%
handle_call(system_info, _, OE_State) ->
    mnesia_session_impl:system_info(OE_State);

%%%% Operation: dirty_match_object
%% 
%%   Returns: RetVal, Result, Reason
%%
handle_call({dirty_match_object, Tab, Pattern}, _, OE_State) ->
    mnesia_session_impl:dirty_match_object(OE_State, Tab, Pattern);

%%%% Operation: dirty_index_match_object
%% 
%%   Returns: RetVal, Result, Reason
%%
handle_call({dirty_index_match_object, Tab, Pattern, Pos}, _, OE_State) ->
    mnesia_session_impl:dirty_index_match_object(OE_State, Tab, Pattern, Pos);

%%%% Operation: create_schema
%% 
%%   Returns: RetVal, Reason
%%
handle_call({create_schema, Nodes}, _, OE_State) ->
    mnesia_session_impl:create_schema(OE_State, Nodes);

%%%% Operation: delete_schema
%% 
%%   Returns: RetVal, Reason
%%
handle_call({delete_schema, Nodes}, _, OE_State) ->
    mnesia_session_impl:delete_schema(OE_State, Nodes);

%%%% Operation: start_mnesia
%% 
%%   Returns: RetVal, Reason
%%
handle_call(start_mnesia, _, OE_State) ->
    mnesia_session_impl:start_mnesia(OE_State);

%%%% Operation: stop_mnesia
%% 
%%   Returns: RetVal, Reason
%%
handle_call(stop_mnesia, _, OE_State) ->
    mnesia_session_impl:stop_mnesia(OE_State);



%%%% Standard gen_server call handle
%%
handle_call(stop, _, State) ->
    {stop, normal, ok, State}.




%%%% Standard gen_server cast handle
%%
handle_cast(stop, State) ->
    {stop, normal, State}.




%%%% Standard gen_server handles
%%
handle_info(_, State) ->
    {noreply, State}.



code_change(OldVsn, State, Extra) ->
    mnesia_session_impl:code_change(OldVsn, State, Extra).

