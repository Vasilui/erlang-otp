#ifndef _ORBEREVENTCHANNELADMIN_IDL
#define _ORBEREVENTCHANNELADMIN_IDL

#include "CosEventChannelAdmin.idl"

#pragma prefix "omg.org"

module OrberEventChannelAdmin
{
	interface ProxyPushConsumer:CosEventChannelAdmin::ProxyPushConsumer
	{
	};

	interface ProxyPullSupplier:CosEventChannelAdmin::ProxyPullSupplier
	{
		void push_to_queue(in any Data);
	};

	interface ProxyPullConsumer:CosEventChannelAdmin::ProxyPullConsumer
	{
		any get_data(out boolean Has_Event);
	};

	interface ProxyPushSupplier:CosEventChannelAdmin::ProxyPushSupplier
	{
		void send_data(in any Data);
	};

	interface EventChannel:CosEventChannelAdmin::EventChannel
	{

		void add_proxy_push_consumer(in OrberEventChannelAdmin::ProxyPushConsumer ppush_consumer);
		void rm_proxy_push_consumer(in OrberEventChannelAdmin::ProxyPushConsumer ppush_consumer);

		void add_proxy_push_supplier(in OrberEventChannelAdmin::ProxyPushSupplier ppush_supplier);
		void rm_proxy_push_supplier(in OrberEventChannelAdmin::ProxyPushSupplier ppush_supplier);

		void add_proxy_pull_consumer(in OrberEventChannelAdmin::ProxyPushConsumer ppull_consumer);
		void rm_proxy_pull_consumer(in OrberEventChannelAdmin::ProxyPushConsumer ppull_consumer);

		void add_proxy_pull_supplier(in OrberEventChannelAdmin::ProxyPushSupplier ppull_supplier);
		void rm_proxy_pull_supplier(in OrberEventChannelAdmin::ProxyPushSupplier ppull_supplier);

		any pull();
		void push(in any data);

	};


};

#endif


