<!doctype chapter PUBLIC "-//Stork//DTD chapter//EN">
<!-- 
 ``The contents of this file are subject to the Erlang Public License,
 Version 1.1, (the "License"); you may not use this file except in
 compliance with the License. You should have received a copy of the
 Erlang Public License along with this software. If not, it can be
 retrieved via the world wide web at http://www.erlang.org/.
 
 Software distributed under the License is distributed on an "AS IS"
 basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
 the License for the specific language governing rights and limitations
 under the License.
 
 The Initial Developer of the Original Code is Ericsson Utvecklings AB.
 Portions created by Ericsson are Copyright 1999, Ericsson Utvecklings
 AB. All Rights Reserved.''
 
     $Id$
-->
<chapter>
  <header>
    <title>Jinterface Release Notes
    <prepared>Patrik Nyblom
    <docno>
    <date>2000-03-23
    <rev>B
    <file>notes.sgml
  </header>
 
  <p>This document describes the changes made to Jinterface. </p>

    <section><title>Version 1.2</title>
      <section><title>New features</title>
       <list>
       <item>
       <p> a new class, AbstractConnection, has been added to deal
       with most of the aspects of the Erlang communication protocol,
       and which can be subclassed in order to provide different
       levels of support to the application as necessary.
       OtpConnection is now a subclass to AbstractConnection. </p>
       </item>

       <item>
       <p> OtpCookedConnection is a new subclass to
       AbstractConnection, which together with OtpNode provides an
       intuitive mailbox-based communication mechanism. By using this
       interface, applications are no longer required to manage
       connections explicitly, since the OtpNode now opens and manages
       connections to remote nodes as needed. Outgoing messages are
       sent through mailboxes and automatically dispatched through the
       correct connections to the destination node, while incoming
       messages are queued in the destination mailbox. This allows
       parts of an application to communicate with several peers
       simultaneously without the need to sort and dispatch incoming
       messages. Additionally, mailboxes can be linked with Erlang
       processes or with each other, in much the same manner that
       Erlang processes can be linked together. </p>
       </item>
       </list>
       </section> 

      <section><title>Changes and additions</title>
       <list>
       <item> <p> The node class hierarchy has changed. The top class
       is now AbstractNode, and direct subclasses are OtpPeer and
       OtpLocalNode, of which the latter is extended by OtpNode and
       OtpSelf. This does not change the functionality of any of the
       existing classes or methods that take node arguments, however
       it was necessary in order to group OtpNode and OtpSelf and to
       provide some common methods for them. </p>
       </item>

       <item> <p> OtpServer is now deprecated. Its functionality has
       been added to OtpSelf. </p>
       </item>

       <item> <p> an open OtpConnection no longer requires service on
       a regular basis in order to keep the remote Erlang node from
       disconnecting. OtpConnection now extends java.lang.Thread so it
       can keep the connection open and respond to ticks when needed,
       without intervention from the application. Incoming messages
       are automatically received and queued for subsequent retrieval
       through one of the receive methods. </p>
       </item>

       <item> <p> tracing of inter-node communication can now be set
       on a per-connection basis. The system property
       OtpConnection.trace is still used as before, but now sets only
       the initial trace level for new connections. Once a connection
       has been created, its current trace level can be set or
       retrieved through new methods setTraceLevel and getTraceLevel. </p>
       </item>

       <item> <p> constructors for OtpErlangAtom and OtpErlangTuple
       previously declared that OtpErlangDataException would be thrown
       for certain types of input. These constructors now throw
       java.lang.IllegalArgumentException instead, which is a runtime
       exception and is therefore not declared explicitly, nor is it
       necessary for the caller to explicitly catch it. The rules for
       creating atoms and tuples have not changed however. </p>
       </item>

       <item> <p> some of the constructors for OtpErlangPid,
       OtpErlangPort and OtpErlangRef are now deprecated. The various
       OtpNode classes provide factory methods instead. </p>
       </item>

       <item> <p> OtpErlangObject and all subclasses representing
       Erlang data types now implement java.io.Serializable and
       java.lang.Cloneable. </p>
       </item>

	<item> 
	  <p> a user's guide is now available. </p>
	  <p>Own Id: OTP-3424</p>
       </item>

       </list>
      </section>

      <section><title>Fixed bugs</title>
      <list>
	<item> <p> a bug in the MD5 handshaking code, that could cause the
	    connection to fail when the Java node was run in a 7-bit
	    character encoding environment, has now been fixed. </p>
	  <p> Own Id: OTP-3512 </p>
	</item>
	<item> <p> a bug in OtpErlangList, which caused message corruption 
            when empty list where encoded, is fixed. </p>
	  <p> Own Id: OTP-3564 </p>
	</item>
      </list>
      </section>
    </section>
      
  <section><title>Version 1.1</title>
    <section><title>Improvements and new features</title>
      <list>
	<item>
	  <p>
	    Modifications for using along with new IC types.
	  </>
	  <p>
	    Some modifications were done on classes OtpInputStream amd OtpOutputStream 
	    in order to work with the new types added on IC.
	  </>
	  <p>Own Id: OTP-3331</p>
	  <p></>
	</>
	<item>
	  <p>
	    Machine-depended character encoding problems fixed.
	  </>
	  <p>
	    The character encoding (LC_CTYPE) need no longer be 
	    defined to an eight bit character set for 
	    jinterface connections to work.
	  </>
	  <p>Own Id: OTP-3512</p>
	  <p></>
	</>
      </>
    </section>
  </section> 
    
    <section><title>Version 1.0</title>
      
      <p>New application. </p>
	
    </section>
    
</chapter>
