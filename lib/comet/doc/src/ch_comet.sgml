<!doctype chapter PUBLIC "-//Stork//DTD chapter//EN">
<!-- 
 ``The contents of this file are subject to the Erlang Public License,
 Version 1.1, (the "License"); you may not use this file except in
 compliance with the License. You should have received a copy of the
 Erlang Public License along with this software. If not, it can be
 retrieved via the world wide web at http://www.erlang.org/.
 
 Software distributed under the License is distributed on an "AS IS"
 basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
 the License for the specific language governing rights and limitations
 under the License.
 
 The Initial Developer of the Original Code is Ericsson Utvecklings AB.
 Portions created by Ericsson are Copyright 1999, Ericsson Utvecklings
 AB. All Rights Reserved.''
 
     $Id$
-->
<chapter>
  <header>
    <title>Comet
    <prepared>Jakob Cederlund
    <docno>
    <date>2000-05-17
    <rev>A
    <file>ch_overview.sgml
  </header>
  
  <section><title>Basic COM from Erlang</title>
    <p>In COM, there are interfaces. An interface is a handle to
      an object. Physically it consists of a pointer to an object
      with a method table.</p>
    <p>Interfaces in COM are represented as a tuple in Erlang. This
      tuple should be considered oblique data.</p>
    <p>There is a standard set of types in COM. These types can
      be converted to and from Erlang by the port program. (It is
      actually converted from the Erlang binary format.) Table 1
      shows the types in Erlang and their corresponding COM type.</p>
    <table>
      <row>
	<cell><c>integer</c></cell>
	<cell><c>VT_I4</c>, 32-bits integer</cell>
      </row>
      <row>
	<cell><c>string</c></cell>
	<cell><c>VT_STR</c>, unicode string</cell>
      </row>
      <row>
	<cell><c>atom</c></cell>
	<cell>no type, however the two atoms<c>true</c> and
	  <c>false</c> are converted to <c>VT_BOOL</c>, the COM
	  Boolean type
	</cell>
      </row>
      <row>
	<cell><c>float</c></cell>
	<cell><c>VT_R8</c>, 64-bits floating point</cell>
      </row>
      <tcaption>Erlang types and their corresponding COM type</tcaption>
    </table>
    <p>However, there are fewer types in Erlang than in COM, so
      some types overlap. When calling a COM function, the parameters
      types must match exactly, since COM is strongly typed. Comet
      uses a special notation for the conversion of Erlang types to
      COM types, a tuple with an atom followed by the value, e.g.
      <c>{vt_i2, 12}</c> </p>
   
     

  </section>
  <section><title>Using the IDispatch interface</title>
    <p>The <c>IDispatch</c> interface is a way for scripts to
      call a COM function. It is used by Visual Basic, JScript
      and other scripting language. It is sometimes referred to
      as the late-binding call interface.</p>
    <p>This way to call COM objects shows off its VB heritage.
      An interface has methods and properties. A property is really
      two methods: put property and get property.</p>
    <p>In the <c>erl_com</c> server, there are three functions for
      calling an IDispatch-interface.</p>
    <table>
      <row>
	<cell><c>invoke(Interface, Method, Parameterlist)</c></cell>
	<cell>
	  Invokes a normal COM method. A list of out-parameters are
	  returned, or, if there is a retval-parameter, it is
	  returned. 
	</cell>
      </row>
      <row>
	<cell><c>property_put(Interface, Method, Parameterlist,
	    Value)</c></cell>
	<cell>
	  Calls a COM method with the <c>propput</c>-attribute.
	  An extra argument, after the Parameterlist, contains
	  the property value to set. (Which really is just a parameter
	  to the function.) If the property does not have parameters,
	  the parameterlist might be omitted, but a value must always
	  be provided.
	</cell>
      </row>
      <row>
	<cell><c>property_get(Interface, Method, Parameterlist)</c></cell>
	<cell>
	  Calls a COM method with the <c>propget</c>-attribute. The
	  value of the property is returned.
	  If the property does not have parameters,
	  the parameterlist might be omitted.
	</cell>
      </row>
      <tcaption>calling an IDispatch interface</tcaption>
    </table>
  </section>
</chapter>
