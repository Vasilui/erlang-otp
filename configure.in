dnl Process this file with autoconf to produce a configure script.
AC_PREREQ(2.8)dnl

dnl Prevent caching
define([AC_CACHE_LOAD], )dnl
define([AC_CACHE_SAVE], )dnl

AC_INIT()

dnl How to set srcdir absolute is taken from the GNU Emacs distribution
#### Make srcdir absolute, if it isn't already.  It's important to
#### avoid running the path through pwd unnecessary, since pwd can
#### give you automounter prefixes, which can go away.
case "${srcdir}" in
  /* ) ;;
  . )
    ## We may be able to use the $PWD environment variable to make this
    ## absolute.  But sometimes PWD is inaccurate.
    ## Make sure CDPATH doesn't affect cd (in case PWD is relative).
    CDPATH=
    if test "${PWD}" != "" && test "`(cd ${PWD} ; sh -c pwd)`" = "`pwd`"  ;
    then
      srcdir="$PWD"
    else
      srcdir="`(cd ${srcdir}; pwd)`"
    fi
  ;;
  *  ) srcdir="`(cd ${srcdir}; pwd)`" ;;
esac

#
# Now srcdir is absolute and also the top of Erlang distribution, ERL_TOP.
#
ERL_TOP=${srcdir}
AC_SUBST(ERL_TOP)

dnl
dnl Aux programs are found in erts/autoconf
dnl
AC_CONFIG_AUX_DIR(${srcdir}/erts/autoconf)

dnl
dnl Figure out what we are running on. And in violation of autoconf
dnl style assume that $host is also what we are building for. I would
dnl like to get cross compiling working, since we actually have
dnl systems we cross compile for!
dnl
AC_CANONICAL_HOST

TARGET=$host
AC_SUBST(TARGET)


dnl Checks for programs.

#
# We need GNU make, complain if we can't find it
#
AC_MSG_CHECKING(for GNU make)
# If there is a Makefile created we don't want make to start making, run
# in a subdirectory and -f /dev/null
mkdir conftestmake
if test -d conftestmake; then
  cd conftestmake
  MAKE_PROG=x
  for m in make gmake ggmake; do
    eval $m --version -f /dev/null 2>&1 | grep GNU > /dev/null 2>&1
    case $? in
      0) MAKE_PROG=$m ; break ;;
      *) ;;
    esac
  done
  cd ..
else
  AC_MSG_ERROR(could not create subdirectory)
fi
rm -rf conftestmake
case $MAKE_PROG in
    x) AC_MSG_RESULT(no)
       AC_MSG_ERROR(GNU make is required!)
       ;;
    *) AC_MSG_RESULT(yes ($MAKE_PROG))
       AC_SUBST(MAKE_PROG)
       ;;
esac

AC_PROG_INSTALL
if test X"${INSTALL}" = "X${ac_aux_dir}/install-sh -c" && test -f /usr/ucb/install ; then
    INSTALL="/usr/ucb/install -c"
fi

AC_PROG_LN_S
AC_PROG_RANLIB

#
# Get erts version from erts/vsn.mk
#
[ERTS=erts-`sed -n 's/^VSN[ ]*=[ ]*\([0-9.]\)/\1/p' < erts/vsn.mk`]
AC_SUBST(ERTS)

#
# Set Erlang man page directory
#
AC_ARG_ENABLE(erlang-mandir,
[  --disable-erlang-mandir do not install Erlang man pages in a private directory],
[ case "$enableval" in
    no) erl_mandir=$mandir ;;
    *)  erl_mandir='$(ERLANG_ILIBDIR)/man' ;;
  esac ], erl_mandir='$(ERLANG_ILIBDIR)/man')
AC_SUBST(erl_mandir)


export ERL_TOP
AC_CONFIG_SUBDIRS(lib erts)

AC_OUTPUT(Makefile)

pattern="lib/*/SKIP"
files=`echo $pattern`
if test "$files" != "$pattern"; then
  echo '*********************************************************************'
  echo '**********************  APPLICATIONS DISABLED  **********************'
  echo '*********************************************************************'
  echo
  for skipfile in $files; do
    app=`dirname $skipfile`; app=`basename $app`
    printf "%-15s: " $app; cat $skipfile
  done
  echo
  echo '*********************************************************************'
fi
