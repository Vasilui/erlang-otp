#
# Custom makefile for building Win32 OTP from UNIX.
#
# Author: Mattias Nilsson <mattias@erix.ericsson.se>
#
# Modified heavily by PaN
# See $ERL_TOP/erts/internal_doc/win32*.txt for details
#

include vsn.mk

EMULATOR=beam
ifeq ($(findstring clearmake,$(MAKE)),clearmake)
MAKE_V=$(MAKE) -V
else
MAKE_V=$(MAKE)
endif

# The NT host machine.
NT_BUILDHOST=beamish

# The view drive or the mapped drive where native win32 programs find
# the ERL_TOP under \erts.
NT_CC_DRIVE=L:

#Paths on Unix and NT.
UNIX_TMP_PATH=/home/gandalf/$(USER)/tmp
NT_TMP_PATH=h:\gandalf\$(USER)\tmp
NT_WISE_PATH=D:\Progra~1\Wise

# Serial No (Used for progress/nightly builds)
SERIALNO=
USER=$(LOGNAME)


# "Solaris" commands
CP:=cp -f
MKDIR:=mkdir -p -m 775

# Paths

TESTROOT=$(UNIX_TMP_PATH)/ow_$(SYSTEM_VSN)$(SERIALNO)
SETUPSRCDIR=$(NT_TMP_PATH)\ow_$(SYSTEM_VSN)$(SERIALNO)

WINRPC= ERL_WIN32_BUILD_HOST=$(NT_BUILDHOST) perl $(ERL_TOP)/erts/win32_tools/win32_rpc
OMAKE= $(WINRPC) winmake #omake -E -EN -f Makefile.win32

# Targets

progress_test: setup unix1 $(EMULATOR) build_epmd apps unix2 unix3 tests win2
progress: setup unix1 $(EMULATOR) build_epmd apps unix2 unix3 win2
release:  setup unix1 $(EMULATOR) build_epmd apps unix2 unix3 win2
lite: setup unix1lite $(EMULATOR) build_epmd unix2lite win2

# The following targets can only be used when running in cygwin environment
cygwin: bootstrap unix1 build_epmd apps local_setup
cygwin_install: unix2 install_script 
bootstrap: setup $(EMULATOR)_noclean bootstrap_setup

bootstrap_setup:
	-cp $(ERL_TOP)/bin/win32/erl.exe $(ERL_TOP)/bootstrap/bin
	-cp $(ERL_TOP)/bin/win32/erlc.exe $(ERL_TOP)/bootstrap/bin
	-cp $(ERL_TOP)/bin/win32/beam.dll $(ERL_TOP)/bootstrap/bin
	cat < /dev/null > $(ERL_TOP)/bootstrap/bin/bootstrap.reg
	echo "REGEDIT4" > $(ERL_TOP)/bootstrap/bin/bootstrap.reg
	echo "[HKEY_LOCAL_MACHINE\SOFTWARE\Ericsson\Erlang\$(VSN)]" >> $(ERL_TOP)/bootstrap/bin/bootstrap.reg
	echo "\"Bindir\"=\"$(NT_CC_DRIVE)\\\\erts\\\\bootstrap\\\\bin\"" >> $(ERL_TOP)/bootstrap/bin/bootstrap.reg
	echo "\"Emulator\"=\"beam\"" >> $(ERL_TOP)/bootstrap/bin/bootstrap.reg
	echo "\"Progname\"=\"erl\"" >> $(ERL_TOP)/bootstrap/bin/bootstrap.reg
	echo "\"Rootdir\"=\"$(NT_CC_DRIVE)\\\\erts\\\\bootstrap\"" >> $(ERL_TOP)/bootstrap/bin/bootstrap.reg
	regedit "$(NT_CC_DRIVE)\\erts\\bootstrap\\bin\\bootstrap.reg"
	
local_setup:
	@cd start_scripts && PATH=$(ERL_TOP)/bootstrap/bin:$$PATH \
		$(MAKE) $(ERL_TOP)/bin/start.script \
		$(ERL_TOP)/bin/start_sasl.script	
	cat < /dev/null > $(ERL_TOP)/bin/win32/local.reg
	echo "REGEDIT4" > $(ERL_TOP)/bin/win32/local.reg
	echo "[HKEY_LOCAL_MACHINE\SOFTWARE\Ericsson\Erlang\$(VSN)]" >> $(ERL_TOP)/bin/win32/local.reg
	echo "\"Bindir\"=\"$(NT_CC_DRIVE)\\\\erts\\\\bin\\\\win32\"" >> $(ERL_TOP)/bin/win32/local.reg
	echo "\"Emulator\"=\"beam\"" >> $(ERL_TOP)/bin/win32/local.reg
	echo "\"Progname\"=\"erl\"" >> $(ERL_TOP)/bin/win32/local.reg
	echo "\"Rootdir\"=\"$(NT_CC_DRIVE)\\\\erts\"" >> $(ERL_TOP)/bin/win32/local.reg
	regedit "$(NT_CC_DRIVE)\\erts\\bin\\win32\\local.reg"
	


night: progress copytests runtests

apps: erl_interface os_mon ic crypto ssl odbc runtime_tools asn1

tests:
	(cd $(ERL_TOP) && $(MAKE_V) release_tests TESTROOT=$(TESTROOT)/test/test_suite TARGET=win32)

# Initial setup in view.
setup:
	@if test ! -d $(ERL_TOP)/erts/obj.$(EMULATOR)/win32; then $(MKDIR) $(ERL_TOP)/erts/obj.$(EMULATOR)/win32; fi
	@if test ! -d $(ERL_TOP)/erts/obj.debug.$(EMULATOR)/win32; then $(MKDIR) $(ERL_TOP)/erts/obj.debug.$(EMULATOR)/win32; fi
	@if test ! -d $(ERL_TOP)/erts/obj.instr.$(EMULATOR); then $(MKDIR) $(ERL_TOP)/erts/obj.instr.$(EMULATOR); fi
	@if test ! -d $(ERL_TOP)/erts/obj.instr.$(EMULATOR)/win32; then $(MKDIR) $(ERL_TOP)/erts/obj.instr.$(EMULATOR)/win32; fi
	@if test ! -d $(ERL_TOP)/erts/obj/win32; then $(MKDIR) $(ERL_TOP)/erts/obj/win32; fi
	@if test ! -d $(ERL_TOP)/bin/win32; then $(MKDIR) $(ERL_TOP)/bin/win32; fi
	@if test ! -d $(ERL_TOP)/erts/emulator/win32; then $(MKDIR) $(ERL_TOP)/erts/emulator/win32; fi
	@if test ! -d $(ERL_TOP)/lib/os_mon/priv/bin/win32; then $(MKDIR) $(ERL_TOP)/lib/os_mon/priv/bin/win32; fi
	@if test ! -d $(ERL_TOP)/lib/os_mon/priv/obj/win32; then $(MKDIR) $(ERL_TOP)/lib/os_mon/priv/obj/win32; fi
	@if test ! -d $(ERL_TOP)/lib/ic/priv/lib/win32; then $(MKDIR) $(ERL_TOP)/lib/ic/priv/lib/win32; fi
	@if test ! -d $(ERL_TOP)/lib/ic/priv/obj/win32; then $(MKDIR) $(ERL_TOP)/lib/ic/priv/obj/win32; fi
	@if test ! -d $(TESTROOT); then $(MKDIR) $(TESTROOT); fi	
	@if test -f /clearcase/otp/system/README; then \
	$(CP) /clearcase/otp/system/README $(TESTROOT); fi
	(cd .. && $(MAKE_V) configure_win32 EMULATOR=$(EMULATOR))


# UNIX side part 1.

unix1:
	(cd .. && $(MAKE_V)  lib_and_erts local_setup TYPE=opt LTYPE=opt TARGET=win32 BUILD_ALL=1 SERIALNO=$(SERIALNO) EMULATOR=$(EMULATOR)) || \
	(cd .. && $(MAKE_V)  libs local_setup TYPE=opt LTYPE=opt TARGET=win32 BUILD_ALL=1 SERIALNO=$(SERIALNO) EMULATOR=$(EMULATOR))

unix1lite:
	(cd .. && $(MAKE_V) opt TARGET=win32 SERIALNO=$(SERIALNO) EMULATOR=$(EMULATOR))

beam_no_clean:
	$(OMAKE) "$(NT_CC_DRIVE)\erts\erts\emulator" "NODEBUG=1 GCC=1 SERIALNO=$(SERIALNO) RELEASE_FLAGS=-DOTP_RELEASE"

# Emulator
# We have to do a 'clean' because the VC linker says 'Internal Error' otherwise... 
$(EMULATOR):
	$(OMAKE) "$(NT_CC_DRIVE)\erts\erts\emulator" "NODEBUG=1 GCC=1 SERIALNO=$(SERIALNO) clean"
	$(OMAKE) "$(NT_CC_DRIVE)\erts\erts\emulator" "NODEBUG=1 GCC=1 SERIALNO=$(SERIALNO) RELEASE_FLAGS=-DOTP_RELEASE"


# EPMD
build_epmd:
	$(OMAKE) "$(NT_CC_DRIVE)\erts\erts\epmd\src" "NODEBUG=1 GCC=1 SERIALNO=$(SERIALNO) EMULATOR=$(EMULATOR)"


# Applications

erl_interface:
	$(OMAKE) "$(NT_CC_DRIVE)\erts\lib\erl_interface\src" "NODEBUG=1 SERIALNO=$(SERIALNO) EMULATOR=$(EMULATOR)"

os_mon:
	$(OMAKE) "$(NT_CC_DRIVE)\erts\lib\os_mon\c_src" "NODEBUG=1 SERIALNO=$(SERIALNO) EMULATOR=$(EMULATOR)"

ifeq ($(SSL),no)
crypto:
	@echo crypto build skipped
ssl:
	@echo ssl build skipped
else
crypto:
	$(OMAKE) "$(NT_CC_DRIVE)\erts\lib\crypto\c_src" "NODEBUG=1 SERIALNO=$(SERIALNO) EMULATOR=$(EMULATOR)"

ssl:
	$(OMAKE) "$(NT_CC_DRIVE)\erts\lib\ssl\c_src" "NODEBUG=1 SERIALNO=$(SERIALNO) EMULATOR=$(EMULATOR)"
endif
ic:
	$(OMAKE) "$(NT_CC_DRIVE)\erts\lib\ic\c_src" "NODEBUG=1 SERIALNO=$(SERIALNO) EMULATOR=$(EMULATOR)"

runtime_tools:
	$(OMAKE) "$(NT_CC_DRIVE)\erts\lib\runtime_tools\c_src" "NODEBUG=1 SERIALNO=$(SERIALNO) EMULATOR=$(EMULATOR)"

asn1:
	$(OMAKE) "$(NT_CC_DRIVE)\erts\lib\asn1\c_src" "NODEBUG=1 SERIALNO=$(SERIALNO) EI_INCLUDE=/I\erts\lib\erl_interface\src EI_LIB=\erts\lib\erl_interface\obj\win32\ei_md.lib"

odbc:
	$(OMAKE) "$(NT_CC_DRIVE)\erts\lib\odbc\c_src" "NODEBUG=1 SERIALNO=$(SERIALNO) EIINCLUDE=\erts\lib\erl_interface\src EILIB1=\erts\lib\erl_interface\obj\win32\erl_interface_md.lib EILIB2=\erts\lib\erl_interface\obj\win32\ei_md.lib"

unix2:
	(cd ../lib && $(MAKE_V) release TARGET=win32 BUILD_ALL=1 TESTROOT=$(TESTROOT) SERIALNO=$(SERIALNO) EMULATOR=$(EMULATOR))
	($(MAKE_V) release TARGET=win32 BUILD_ALL=1 TESTROOT=$(TESTROOT) SERIALNO=$(SERIALNO) EMULATOR=$(EMULATOR))

ifdef DOC_TAR
unix3:
	if [ -f $(DOC_TAR) ]; then mkdir $(TESTROOT)/doc; (cd $(TESTROOT)/doc; zcat $(DOC_TAR) | tar xf -); fi
else
unix3:
	@echo No documentation available.
endif

unix2lite:
	(cd .. && $(MAKE_V) release TARGET=win32 TESTROOT=$(TESTROOT) SERIALNO=$(SERIALNO) EMULATOR=$(EMULATOR))

# WISE Build & Install.
win2: 
	$(OMAKE) "$(NT_CC_DRIVE)\\erts\\erts\\etc\\win32\\wise" "SERIALNO=$(SERIALNO) EMULATOR=$(EMULATOR) TESTROOT=$(SETUPSRCDIR) WISEDIR=$(NT_WISE_PATH) install"

wintools:
	(cd win32_tools; $(MAKE) all)
	cp "$(ERL_TOP)/erts/win32_tools"/*.beam "$(UNIX_TMP_PATH)"

runtests: wintools
	$(WINRPC) \
	 perl "$(NT_CC_DRIVE)\\erts\\erts\\win32_tools\\run_erl.plx" erl $(VSN) \
	   -pa "$(NT_TMP_PATH)" -sname build -setcookie build \
	   -noshell -run runtests just_to_start_epmd
	$(WINRPC) \
	 perl "$(NT_CC_DRIVE)\\erts\\erts\\win32_tools\\run_erl.plx" werl $(VSN) \
	   -pa "$(NT_TMP_PATH)" \
	   -run runtests install_run_save "$(NT_TEST_PATH)\\test_server"

copytests: wintools
	cp "$(TEST_TAR)" "$(UNIX_TMP_PATH)"
	$(WINRPC) \
	 perl "$(NT_CC_DRIVE)\\erts\\erts\\win32_tools\\run_erl.plx" erl $(VSN) \
	   -pa "$(NT_TMP_PATH)" \
	   -noshell -run runtests copy_tests "$(TEST_TAR)" "$(NT_TEST_PATH)" \
	   "$(NT_TMP_PATH)"
	rm -f "$(UNIX_TMP_PATH)"/"$(notdir $(TEST_TAR))"

.PHONY: wintools runtests copytests
