dnl Process this file with autoconf to produce a configure script. -*-m4-*-
dnl
dnl
dnl The string "FIXME convbreak" means that there is a break of
dnl autoconf convention that should be cleaned up.
dnl
dnl
AC_PREREQ(2.13)
AC_INIT(vsn.mk)

dnl How to set srcdir absolute is taken from the GNU Emacs distribution
#### Make srcdir absolute, if it isn't already.  It's important to
#### avoid running the path through pwd unnecessary, since pwd can
#### give you automounter prefixes, which can go away.
case "${srcdir}" in
  /* ) ;;
  . )
    ## We may be able to use the $PWD environment variable to make this
    ## absolute.  But sometimes PWD is inaccurate.
    ## Make sure CDPATH doesn't affect cd (in case PWD is relative).
    CDPATH=
    if test "${PWD}" != "" && test "`(cd ${PWD} ; sh -c pwd)`" = "`pwd`"  ;
    then
      srcdir="$PWD"
    else
      srcdir="`(cd ${srcdir}; pwd)`"
    fi
  ;;
  *  ) srcdir="`(cd ${srcdir}; pwd)`" ;;
esac

## Now, make sure that ERL_TOP is set and is the same as srcdir
##
if test -z "$ERL_TOP" || test ! -d $ERL_TOP ; then
  AC_MSG_ERROR(You need to set the environment variable ERL_TOP!)
fi
if test x"${ERL_TOP}/erts" != x"$srcdir"; then
  AC_MSG_ERROR([You need to run configure with argument --srcdir=${ERL_TOP}/erts])
fi
erl_top=${ERL_TOP}

# echo XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
# echo X
# echo "X srcdir  = $srcdir"
# echo "X ERL_TOP = $ERL_TOP"
# echo X
# echo XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

AC_CONFIG_AUX_DIRS($srcdir/autoconf)

dnl ----------------------------------------------------------------------
dnl Figure out what system we are running on.
dnl ----------------------------------------------------------------------

#
# To configure for free source run ./configure --host=free_source
#
dnl
dnl AC_CANONICAL_HOST does not like free_source as a host specification,
dnl so we make a little special case.
dnl
if test "X$host" != "Xfree_source" -a "X$host" != "Xwin32"; then
    AC_CANONICAL_HOST
else
    host_os=$host
fi
AC_ISC_POSIX

AC_CONFIG_HEADER($host/config.h:config.h.in)

dnl ----------------------------------------------------------------------
dnl Optional features.
dnl ----------------------------------------------------------------------
ENABLE_ALLOC_TYPE_VARS=
AC_SUBST(ENABLE_ALLOC_TYPE_VARS)

dnl Defined in libraries/megaco/configure.in but we need it here
dnl also in order to show it to the "top user"

AC_ARG_ENABLE(megaco_flex_scanner_lineno,
[  --disable-megaco-flex-scanner-lineno    disable megaco flex scanner lineno])

AC_ARG_ENABLE(hipe,
[  --disable-hipe          disable hipe support])

AC_ARG_ENABLE(tsp,
[  --enable-tsp            compile tsp app])

AC_ARG_ENABLE(shared-heap,
[  --enable-shared-heap    enable shared heap model])

AC_ARG_ENABLE(elib-malloc,
[  --enable-elib-malloc    use elib_malloc instead of normal malloc])

AC_ARG_ENABLE(fixalloc,
[  --disable-fixalloc      disable the use of fix_alloc])
if test x${enable_fixalloc} = xno ; then
  AC_DEFINE(NO_FIX_ALLOC)
fi

AC_ARG_ENABLE(threads,
[  --enable-threads        use threads],
[ case "$enableval" in
    no) enable_threads=nothreads ;;
    *)  enable_threads=threads-error ;;
  esac ], enable_threads=nothreads)


AC_ARG_ENABLE(kernel-poll,
[  --enable-kernel-poll    enable kernel poll support])

AC_SUBST(PERFCTR_PATH)
AC_ARG_WITH(perfctr,
[  --with-perfctr=PATH     specify location of perfctr include and lib
  --without-perfctr       don't use perfctr (default)])

if test "x$with_perfctr" = "xno" -o "x$with_perfctr" = "x" ; then
    PERFCTR_PATH=
else
    if test ! -f "$with_perfctr/usr.lib/libperfctr.a" ; then
	AC_MSG_ERROR(Invalid path to option --with-perfctr=PATH)
    fi
    PERFCTR_PATH="$with_perfctr"
    AC_DEFINE(USE_PERFCTR)
fi

dnl Magic test for clearcase.
OTP_RELEASE=
if test "${ERLANG_COMMERCIAL_BUILD}" != ""; then
	OTP_EXTRA_FLAGS=-DOTP_RELEASE
	OTP_RELEASE=yes
else
	OTP_EXTRA_FLAGS=
fi
AC_SUBST(OTP_RELEASE)

dnl ----------------------------------------------------------------------
dnl Checks for programs.
dnl ----------------------------------------------------------------------

AC_PROG_CC

dnl ---------------------------------------------------------------------
dnl Special windows stuff regarding CFLAGS and details in the environment...
dnl ---------------------------------------------------------------------
AC_MSG_CHECKING(for mixed cygwin and native VC++ environment)
if test "X$CC" = "Xcc.sh" -a "X$host" = "Xwin32"; then
	if test -x /usr/bin/cygpath; then
		CFLAGS="-O2"
		AC_MSG_RESULT([yes])
		MIXED_CYGWIN_VC=yes
	else
		AC_MSG_RESULT([undeterminable])
		AC_MSG_ERROR(Seems to be mixed windows but not with cygwin, cannot handle this!)
	fi
else
	AC_MSG_RESULT([no])
	MIXED_CYGWIN_VC=no
fi
AC_SUBST(MIXED_CYGWIN_VC)


dnl
dnl Flags to the C compiler
dnl
dnl Make sure we find config.h
dnl

extra_flags="-I${ERL_TOP}/erts/$host $OTP_EXTRA_FLAGS"
CFLAGS="$CFLAGS $extra_flags"
DEBUG_CFLAGS="-g $extra_flags"

case $host_os in
  darwin*)
	CFLAGS="$CFLAGS -no-cpp-precomp"
	;;
esac

DEBUG_FLAGS=-g
if test "x$GCC" = xyes; then
  # until the emulator can handle this, I suggest we turn it off!
  #WFLAGS="-Wall -Wshadow -Wcast-qual -Wmissing-declarations"
  WFLAGS="-Wall -Wstrict-prototypes -Wmissing-prototypes"
  #WFLAGS=""
else
  WFLAGS=""
fi
dnl DEBUG_FLAGS is obsolete (I hope)
AC_SUBST(DEBUG_FLAGS)
AC_SUBST(DEBUG_CFLAGS)
AC_SUBST(WFLAGS)

dnl
dnl Figure out operating system and cpu architecture
dnl
OPSYS=noopsys
case `uname -s` in
SunOS)	case `uname -r` in
	5.*)	OPSYS=sol2;;
	esac;;
Linux)	OPSYS=linux;;
esac
ARCH=noarch
case `uname -m` in
sun4u)	ARCH=ultrasparc;;
i86pc)	ARCH=x86;;
i386)	ARCH=x86;;
i486)	ARCH=x86;;
i586)	ARCH=x86;;
i686)	ARCH=x86;;
esac
AC_SUBST(OPSYS)
AC_SUBST(ARCH)

dnl some tests below will call this if we haven't already - and autoconf
dnl can't handle those tests being done conditionally at runtime
AC_PROG_CPP

AC_PROG_RANLIB


AC_PROG_YACC
LM_PROG_PERL5
if test "$ac_cv_path_PERL" = false; then
  AC_MSG_ERROR([Perl version 5 is required to build the emulator!])
fi
AC_PROG_LN_S

AC_CHECK_PROG(AR, ar, ar, false)
if test "$ac_cv_prog_AR" = false; then
  AC_MSG_ERROR([No 'ar' command found in PATH])
fi

dnl
dnl We can live with Solaris /usr/ucb/install
dnl
case $host in
  *-*-solaris*|free_source)
    if test -x /usr/ucb/install; then
      INSTALL="/usr/ucb/install -c"
    fi
    ;;
  *)
    ;;
esac
AC_PROG_INSTALL
LM_PROG_INSTALL_DIR


dnl ----------------------------------------------------------------------
dnl Misc. things (some of them should go away)
dnl ----------------------------------------------------------------------

dnl
dnl An attempt to allow cross compiling. This is not the right way,
dnl nor does it work currently. Some makefiles still needs these
dnl variables, so we leave them in for now.
dnl
HCC='$(CC)'         AC_SUBST(HCC)
HCFLAGS=""          AC_SUBST(HCFLAGS)
HCFLAGS="$HCFLAGS -I${ERL_TOP}/erts/$host"
vxworks_reclaim=""  AC_SUBST(vxworks_reclaim)
LD='$(CC)'          AC_SUBST(LD)


dnl Check for cygwin and object/exe files extension
AC_CYGWIN
AC_EXEEXT
AC_OBJEXT

dnl This is the os flavour, should be unix, vxworks or win32
if test "X$host" = "Xwin32"; then
	ERLANG_OSTYPE=win32
else
	ERLANG_OSTYPE=unix         
fi

AC_SUBST(ERLANG_OSTYPE)

dnl Which sysv4 would this be, and what is it for???
dnl XXX: replace with feature tests.
case $host_os in
  sysv4*)
    AC_DEFINE(SOCKOPT_CONNECT_STAT)
    AC_DEFINE(NO_PRAGMA_WEAK)
    LIBS="$LIBS -lgen -lc -L /usr/ucblib -lucb"
    ;;
esac

# Check how to export functions from the emulator executable, needed
# when dynamically loaded drivers are loaded (so that they can find
# emulator functions).
# OS'es with ELF executables using the GNU linker (Linux and recent *BSD,
# in rare cases Solaris) typically need '-Wl,-export-dynamic' (i.e. pass
# -export-dynamic to the linker - also known as -rdynamic and some other
# variants); some sysVr4 system(s) instead need(s) '-Wl,-Bexport'.
# AIX 4.x (perhaps only for x>=2) wants -Wl,-bexpall,-brtl and doesn't
# reliably return an error for others, thus we separate it out.
# Otherwise we assume that if the linker accepts the flag, it is needed.
AC_MSG_CHECKING(for extra flags needed to export symbols)
DEXPORT=""
case $host_os in
	aix4*)
		DEXPORT=-Wl,-bexpall,-brtl
	;;
	bsdi*)
    		DEXPORT="-rdynamic " 
    	;;
	win32)
    		DEXPORT="" 
    	;;
	*)
		save_ldflags="$LDFLAGS"
		LDFLAGS=-Wl,-export-dynamic
		AC_TRY_LINK(,,[DEXPORT=-Wl,-export-dynamic], [
			LDFLAGS=-Wl,-Bexport
			AC_TRY_LINK(,,[DEXPORT=-Wl,-Bexport],
				AC_MSG_RESULT(none))])
		LDFLAGS="$save_ldflags"
	;;
esac
AC_SUBST(DEXPORT)
case "x$DEXPORT" in
	"x")
		AC_MSG_RESULT([none]);;
	*)
		AC_MSG_RESULT([$DEXPORT]);;
esac

# Check for Solaris/ultrasparc /dev/perfmon interface
# (also needs gcc specific asm instructions)
case "${host}:${GCC}" in
  sparc-*-solaris*:yes)
    AC_DEFINE(HAVE_SOLARIS_SPARC_PERFMON)
    ;;
  *)
    ;;
esac


dnl ----------------------------------------------------------------------
dnl Checks for libraries.
dnl ----------------------------------------------------------------------

AC_CHECK_LIB(m, sin)
AC_CHECK_LIB(dl, dlopen)
AC_CHECK_LIB(inet, main)
AC_CHECK_LIB(resolv, main)

dnl ----------------------------------------------------------------------
dnl Try to figure out where to get the termcap functions from.
dnl We use tgetent(), tgetflag(), tgetnum(), tgetstr() and tputs()
dnl ----------------------------------------------------------------------

if test "X$host" != "Xwin32"; then
  AC_CHECK_LIB(ncurses, tgetent)
  if test $ac_cv_lib_ncurses_tgetent = no ; then
    AC_CHECK_LIB(curses, tgetent)
    if test $ac_cv_lib_curses_tgetent = no ; then
      AC_CHECK_LIB(termcap, tgetent)
      if test $ac_cv_lib_termcap_tgetent = no ; then
	AC_CHECK_LIB(termlib, tgetent)
	if test $ac_cv_lib_termlib_tgetent = no ; then
	  AC_MSG_ERROR([No curses library functions found])
	fi
      fi
    fi
  fi
fi

dnl
dnl This test kindly borrowed from Tcl
dnl
#--------------------------------------------------------------------
#	Check for the existence of the -lsocket and -lnsl libraries.
#	The order here is important, so that they end up in the right
#	order in the command line generated by make.  Here are some
#	special considerations:
#	1. Use "connect" and "accept" to check for -lsocket, and
#	   "gethostbyname" to check for -lnsl.
#	2. Use each function name only once:  can't redo a check because
#	   autoconf caches the results of the last check and won't redo it.
#	3. Use -lnsl and -lsocket only if they supply procedures that
#	   aren't already present in the normal libraries.  This is because
#	   IRIX 5.2 has libraries, but they aren't needed and they're
#	   bogus:  they goof up name resolution if used.
#	4. On some SVR4 systems, can't use -lsocket without -lnsl too.
#	   To get around this problem, check for both libraries together
#	   if -lsocket doesn't work by itself.
#--------------------------------------------------------------------

erl_checkBoth=0
AC_CHECK_FUNC(connect, erl_checkSocket=0, erl_checkSocket=1)
if test "$erl_checkSocket" = 1; then
    AC_CHECK_LIB(socket, main, LIBS="$LIBS -lsocket", erl_checkBoth=1)
fi
if test "$erl_checkBoth" = 1; then
    tk_oldLibs=$LIBS
    LIBS="$LIBS -lsocket -lnsl"
    AC_CHECK_FUNC(accept, erl_checkNsl=0, [LIBS=$tk_oldLibs])
fi
AC_CHECK_FUNC(gethostbyname, , AC_CHECK_LIB(nsl, main, [LIBS="$LIBS -lnsl"]))
AC_CHECK_FUNC(gethostbyname_r,have_gethostbyname_r=yes)
if test "$have_gethostbyname_r" = yes; then
	# OK, so we have gethostbyname_r() - but do we know how to call it...?
	# (if not, HAVE_GETHOSTBYNAME_R will not be defined at all)
	case $host_os in
		solaris2*)
			AC_DEFINE(HAVE_GETHOSTBYNAME_R, GHBN_R_SOLARIS)
		;;
		aix4*)
			# AIX version also needs "struct hostent_data" defn
			AC_TRY_COMPILE([#include <netdb.h>],
				[struct hostent_data hd;],
				AC_DEFINE(HAVE_GETHOSTBYNAME_R, GHBN_R_AIX))
		;;
		*)
			AC_EGREP_CPP(yes,[#include <stdio.h>
			  #ifdef __GLIBC__
			  yes
			  #endif
			  ], AC_DEFINE(HAVE_GETHOSTBYNAME_R, GHBN_R_GLIBC))
		;;
	esac
fi
dnl Check for usage of sockaddr_in in netdb.h
dnl somewhat ugly check, I check for presence of the string and that 
dnl compilation works. If either fails I assume it's not needed.
dnl Seems only to be needed on a patched version of solaris2.5.1, with
dnl netdb.h  version  1.18.
AC_MSG_CHECKING([if netdb.h requires netinet/in.h to be previously included])
AC_EGREP_CPP(sockaddr_in, 
	     [#include <netdb.h>],
	     AC_TRY_COMPILE([#include <netinet/in.h>
			     #include <netdb.h>], 
			    [return 0;],
			    need_in_h=yes, 
                            need_in_h=no),
             need_in_h=no)

if test $need_in_h = yes; then
	AC_DEFINE(NETDB_H_NEEDS_IN_H)
	AC_MSG_RESULT(yes)
else
	AC_MSG_RESULT(no)
fi

dnl Check if we have these, in which case we'll try to build
dnl inet_gethost with ipv6 support.
AC_CHECK_FUNCS([getipnodebyname getipnodebyaddr])
dnl h_errno isn't always declared in netdb.h, and with some definitions
dnl (e.g. function call for thread-safe) a simple 'extern int' may conflict
dnl (we do assume that h_errno exists at all...)
AC_CACHE_CHECK([for h_errno declaration in netdb.h],
  ac_cv_decl_h_errno,
[AC_TRY_COMPILE([#include <netdb.h>], [int err = h_errno;],
  ac_cv_decl_h_errno=yes, ac_cv_decl_h_errno=no)])
if test $ac_cv_decl_h_errno = yes; then
  AC_DEFINE(H_ERRNO_DECLARED)
fi


dnl ----------------------------------------------------------------------
dnl Checks for header files.
dnl ----------------------------------------------------------------------

AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_HEADER_TIME

dnl Interactive UX needs <net/errno.h> for socket related error codes.
dnl Some Linuxes needs <sys/socketio.h> instead of <sys/sockio.h>
dnl
AC_CHECK_HEADERS(fcntl.h limits.h unistd.h syslog.h dlfcn.h ieeefp.h \
                 thread.h pthread.h poll.h sys/stropts.h \
                 sys/ioctl.h sys/time.h sys/uio.h sys/sockio.h sys/socketio.h \
                 net/errno.h malloc.h mach-o/dyld.h arpa/nameser.h)

dnl Some Linuxes have <pthread/mit/pthread.h> instead of <pthread.h>
AC_CHECK_HEADER(pthread/mit/pthread.h, AC_DEFINE(HAVE_MIT_PTHREAD_H))

dnl Check if we have kernel poll support
AC_CHECK_HEADER(sys/devpoll.h, AC_DEFINE(HAVE_SYS_DEVPOLL_H))
AC_CHECK_HEADER(linux/kpoll.h, AC_DEFINE(HAVE_LINUX_KPOLL_H))
AC_CHECK_HEADER(sys/event.h, AC_DEFINE(HAVE_SYS_EVENT_H)) 

LM_DECL_SO_BSDCOMPAT
LM_DECL_INADDR_LOOPBACK
LM_DECL_SYS_ERRLIST


dnl ----------------------------------------------------------------------
dnl Checks for typedefs, structures, and compiler characteristics.
dnl ----------------------------------------------------------------------

AC_C_CONST
AC_TYPE_SIGNAL
AC_TYPE_OFF_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T

AC_STRUCT_TM
LM_STRUCT_SOCKADDR_SA_LEN
LM_STRUCT_EXCEPTION

AC_CHECK_SIZEOF(short, 2)dnl Assumes all cross compiling is to 32bit uP
AC_CHECK_SIZEOF(int, 4)dnl Assumes all cross compiling is to 32bit uP
AC_CHECK_SIZEOF(long, 4)dnl Assumes all cross compiling is to 32bit uP
AC_CHECK_SIZEOF(void *, 4)dnl Assumes all cross compiling is to 32bit uP
AC_CHECK_SIZEOF(long long, 0)

BITS64=

if test $ac_cv_sizeof_void_p = 8; then
  BITS64=yes
fi
AC_SUBST(BITS64)


dnl AC_CHECK_SIZEOF(size_t, 4)dnl Assumes all cross compiling is to 32bit uP
dnl
dnl The disabled one above does not include stddef.h, alas!
dnl
AC_CACHE_CHECK([size of size_t], ac_cv_sizeof_size_t, 
AC_TRY_RUN([
#include <sys/types.h>
#include <stdio.h>
#include <stdlib.h>
#include <stddef.h>
int main(int argc, char **argv) {
    FILE *f = fopen("conftestval", "w");
    if (! f)
	exit(1); /* Failed */
    fprintf(f, "%d\n", (int) sizeof(size_t));
    exit(0); /* OK */
}
], ac_cv_sizeof_size_t=`cat conftestval`
,  ac_cv_sizeof_size_t=0
,  ac_cv_sizeof_size_t=4))
AC_DEFINE_UNQUOTED(SIZEOF_SIZE_T, $ac_cv_sizeof_size_t)

dnl A standard size check does not include sys/types.h
dnl
AC_CACHE_CHECK([size of off_t], ac_cv_sizeof_off_t, 
AC_TRY_RUN([
#include <sys/types.h>
#include <stdio.h>
#include <stdlib.h>
#include <stddef.h>
int main(int argc, char **argv) {
    FILE *f = fopen("conftestval", "w");
    if (! f)
	exit(1); /* Failed */
    fprintf(f, "%d\n", (int) sizeof(off_t));
    exit(0); /* OK */
}
], ac_cv_sizeof_off_t=`cat conftestval`
,  ac_cv_sizeof_off_t=0
,  ac_cv_sizeof_off_t=4))
AC_DEFINE_UNQUOTED(SIZEOF_OFF_T, $ac_cv_sizeof_off_t)

AC_MSG_CHECKING([int/long/void*/size_t sizes])
AC_TRY_RUN([
#include <stdlib.h>
#include <stddef.h>
int main(int argc, char **argv) {
    if (sizeof(void *) >= 4 &&
	sizeof(void *) == sizeof(size_t) &&
	(sizeof(void *) == sizeof(int) || sizeof(void *) == sizeof(long))) {
	exit(0); /* OK */
    }
    exit(1); /* Failed */
}
],AC_MSG_RESULT(ok)
,AC_MSG_RESULT(failed)
AC_MSG_ERROR([Cannot handle this combination of int/long/void*/size_t sizes])
,AC_MSG_RESULT(ok))

AC_C_BIGENDIAN

dnl ----------------------------------------------------------------------
dnl Checks for library functions.
dnl ----------------------------------------------------------------------

AC_CHECK_FUNCS([ieee_handler fpsetmask finite isnan isinf res_gethostbyname dlopen \
		poll pread pwrite writev memmove strerror strerror_r strncasecmp \
		gethrtime localtime_r gmtime_r mremap memcpy mallopt])
AC_FUNC_SETVBUF_REVERSED
AC_FUNC_VFORK
AC_FUNC_VPRINTF
AC_FUNC_MMAP

dnl The AC_DEFINEs are necessary for autoheader to work. :-(
dnl for gzio
LM_CHECK_FUNC_DECL(fread, [extern int fread();],,
                   AC_DEFINE(HAVE_CONFLICTING_FREAD_DECLARATION))

dnl ----------------------------------------------------------------------
dnl Checks for features/quirks in the system that affects Erlang.
dnl ----------------------------------------------------------------------

LM_SYS_IPV6
LM_SYS_MULTICAST
ERL_TIME_CORRECTION

AC_MSG_CHECKING([for unreliable floating point execptions])
AC_TRY_RUN([
/* fpe-test.c */
#include <stdio.h>
#include <signal.h>
#include <stdlib.h>

volatile int erl_fp_exception;

#if defined(__i386__) && defined(__GNUC__) && !defined(__CYGWIN__)

static void unmask_fpe(void)
{
    unsigned short cw;
    __asm__ __volatile__("fstcw %0" : "=m"(cw));
    cw &= ~(0x01|0x04|0x08);   /* unmask IM, ZM, OM */
    __asm__ __volatile__("fldcw %0" : : "m"(cw));
}

static __inline__ int check_fpe(double f)
{
    __asm__ __volatile__("fwait" : "=m"(erl_fp_exception) : "m"(f));
    if (!erl_fp_exception)
       return 0;
    __asm__ __volatile__("fninit");
    unmask_fpe();
    return 1;
}

#else

#include <ieeefp.h>
#define unmask_fpe()   fpsetmask(FP_X_INV | FP_X_OFL | FP_X_DZ)
static __inline__ int check_fpe(double f)
{
    __asm__ __volatile__("" : "=m"(erl_fp_exception) : "g"(f));
    return erl_fp_exception;
}

#endif

#if defined(__linux__) && defined(__i386__) 

#include <ucontext.h>

static void fpe_sig_action(int sig, siginfo_t *si, void *puc)
{
    ucontext_t *uc = puc;
    mcontext_t *mc = &uc->uc_mcontext;
    fpregset_t fpstate = mc->fpregs;
    fpstate->sw &= ~0xFF;
    erl_fp_exception = 1;
}

static void do_init(void)
{
    struct sigaction act;
    memset(&act, 0, sizeof act);
    act.sa_sigaction = fpe_sig_action;
    act.sa_flags = SA_SIGINFO;
    sigaction(SIGFPE, &act, NULL);
    unmask_fpe();
}

#else

static void fpe_sig_handler(int sig)
{
    erl_fp_exception = 1;
}

static void do_init(void)
{
    signal(SIGFPE, fpe_sig_handler);
    unmask_fpe();
}

#endif

double a = 3.23e133;
double b = 3.57e257;
double res;

void do_fmul(void)
{
    res = a * b;
}

int do_check(void)
{
    if (check_fpe(res)) {
       fprintf(stderr, "res = %g, FPE worked\n", res);
       return 0;
    } else {
       fprintf(stderr, "res = %g, FPE failed\n", res);
       return 1;
    }
}

int main(int argc, const char **argv)
{
    if (argc == 3) {
       a = atof(argv[1]);
       b = atof(argv[2]);
    }
    do_init();
    do_fmul();
    return do_check();
}
], erl_ok=reliable, erl_ok=unreliable, erl_ok=unreliable)
if test $erl_ok = unreliable; then
    AC_DEFINE(NO_FPE_SIGNALS)
    AC_MSG_RESULT([unreliable; testing in software instead])
else
    AC_MSG_RESULT(reliable)
fi

dnl
dnl Check if gethrvtime is working, and if to use procfs ioctl
dnl or (yet to be written) write to the procfs ctl file.
dnl

AC_MSG_CHECKING([if gethrvtime works and how to use it])
AC_TRY_RUN([
/* gethrvtime procfs ioctl test */
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <stdio.h>
#include <sys/time.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/signal.h>
#include <sys/fault.h>
#include <sys/syscall.h>
#include <sys/procfs.h>
#include <fcntl.h>

int main() {
    long msacct = PR_MSACCT;
    int fd;
    long long start, stop;
    int i;
    pid_t pid = getpid();
    char proc_self[30] = "/proc/";

    sprintf(proc_self+strlen(proc_self), "%lu", (unsigned long) pid);
    if ( (fd = open(proc_self, O_WRONLY)) == -1)
	exit(1);
    if (ioctl(fd, PIOCSET, &msacct) < 0)
	exit(2);
    if (close(fd) < 0)
	exit(3);
    start = gethrvtime();
    for (i = 0; i < 100; i++)
	stop = gethrvtime();
    if (start == 0)
	exit(4);
    if (start == stop)
	exit(5);
    exit(0); return 0;
}
], erl_gethrvtime=procfs_ioctl, erl_gethrvtime=false, erl_gethrvtime=false)
case $erl_gethrvtime in
  procfs_ioctl)
	AC_DEFINE(HAVE_GETHRVTIME_PROCFS_IOCTL)
	AC_MSG_RESULT(uses ioctl to procfs)
	;;
  *)
	AC_MSG_RESULT(not working)
	;;
esac

dnl
dnl Some operating systems allow you to redefine FD_SETSIZE to be able
dnl to select on more than the default number of file descriptors.
dnl We first discovered this in BSD/OS where the default is ridiculously
dnl low (256). But since we use a lot of file descriptors we found the
dnl need to go over the limit in other os's as well. Since FD_SETSIZE 
dnl must be defined before pulling in sys/types.h the actual number
dnl of file descriptors is set in acconfig.h and will thus be in config.h
dnl which *always* should be included first.
dnl

AC_MSG_CHECKING([whether to redefine FD_SETSIZE])
case $host_os in
  bsdi*)
	AC_DEFINE(REDEFINE_FD_SETSIZE)
	AC_MSG_RESULT(yes)
	;;
  *)
	AC_MSG_RESULT(no)
	;;
esac



dnl ----------------------------------------------------------------------
dnl Tests related to configurable options given on command line
dnl (using the --disable, --enable and --with switches).
dnl ----------------------------------------------------------------------

#
# Check if we should compile TSP app
#

TSP_APP=
if test X${enable_tsp} = Xyes; then
  TSP_APP=tsp
fi
AC_SUBST(TSP_APP)

#
# Check if we should enable HiPE.
#

HIPE_ENABLED=
HIPE_APP=

# if not disabled, autoenable HiPE on known supported platforms
if test X${enable_hipe} != Xno; then
  case "$ARCH-$OPSYS" in
    ultrasparc-sol2|x86-sol2|x86-linux)
      enable_hipe=yes
      ;;
  esac
fi

if test X${enable_hipe} = Xyes; then
  if test X$ac_cv_sizeof_void_p != X4; then
	AC_MSG_WARN([HiPE is not supported in 64-bit builds])
  else
     HIPE_ENABLED=yes
     AC_DEFINE(HIPE)
     HIPE_APP=hipe
     ENABLE_ALLOC_TYPE_VARS="$ENABLE_ALLOC_TYPE_VARS hipe"
  fi
fi
AC_SUBST(HIPE_APP)
AC_SUBST(HIPE_ENABLED)

#
# Check if we should enable the shared heap model.
#
if test X${enable_shared_heap} = Xyes; then
  AC_DEFINE(SHARED_HEAP)
  ENABLE_ALLOC_TYPE_VARS="$ENABLE_ALLOC_TYPE_VARS shared_heap"
fi

#
# Check if we should use elib_malloc.
#

if test X${enable_elib_malloc} = Xyes; then
 AC_DEFINE(ENABLE_ELIB_MALLOC)
 AC_DEFINE(ELIB_HEAP_SBRK)
 AC_DEFINE(ELIB_ALLOC_IS_CLIB)
 AC_DEFINE(ELIB_SORTED_BLOCKS)
fi

#
# Figure out if we should use threads. The default is set above in the
# enable_threads variable. It can have the following values:
#
#   nothreads      don't look for threads
#   threads-ok     look for threads but it is ok if you can't find them
#   threads-error  look for threads and if you can't find them it is an error
#
THR_LIBS=
THR_DEFS=
AC_SUBST(THR_LIBS)
AC_SUBST(THR_DEFS)
# As a matter of fact, the windows erlang emulator can never run without 
# threads. It has to be enable or the emulator will crash. Until that is fixed
# we force threads on win32.
AC_MSG_CHECKING([if native win32 threads should be used])
if test "X$host_os" = "Xwin32"; then
    THR_LIBS=
    THR_DEFS="-DUSE_THREADS"
    # If someoune wants to check this later, it might as well be consistent 
    # with variable values on other platforms with threads enabled...
    enable_threads="threads-error"
    found_threads=1
    ENABLE_ALLOC_TYPE_VARS="$ENABLE_ALLOC_TYPE_VARS threads"
    AC_MSG_RESULT([yes, required and therefore forced])
else
    AC_MSG_RESULT(no)
    case "$enable_threads" in
	threads-*)
	    THR_LIBS=
	    THR_DEFS="-DUSE_THREADS -D_REENTRANT"
	    found_threads=0

	    # Check for POSIX threads
	    pthread_lib=""
	    if test "$found_threads" = "0"; then
		AC_CHECK_LIB(pthread, pthread_create, [found_threads=1
		    THR_LIBS="-lpthread"
		    THR_DEFS="$THR_DEFS -DPOSIX_THREADS -D_THREAD_SAFE"
		    pthread_lib=pthread],
		    found_threads=0)
	    fi

	    # FreeBSD has pthreads in special c library, c_r
	    if test "$found_threads" = "0"; then
		AC_CHECK_LIB(c_r, pthread_create, [found_threads=1
		    THR_LIBS="-lc_r"
		    THR_DEFS="$THR_DEFS -DPOSIX_THREADS -D_THREAD_SAFE"
		    pthread_lib=c_r],
		    found_threads=0)
	    fi

	    case "$found_threads"-"$enable_threads" in
		0-threads-ok)
		    # We couldn't find any threads, but that is ok
		    THR_LIBS=
		    THR_DEFS=
		    ;;
		0-threads-error)
		    # If user specifically asked for threads give an error msg.
		    AC_MSG_ERROR([don't know how to enable threads])
		    ;;
		*)
		    # Threads found
		    if test "x$pthread_lib" != "x"; then
			AC_CHECK_LIB($pthread_lib, pthread_atfork,
				AC_DEFINE(HAVE_PTHREAD_ATFORK))
		    fi
		    case $host_os in
			solaris*)
			    if test "x$pthread_lib" != "x"; then
				THR_DEFS="$THR_DEFS -D_POSIX_PTHREAD_SEMANTICS"
			    fi
			    AC_DEFINE(ENABLE_CHILD_WAITER_THREAD) ;;
			linux*)
			    case `uname -r` in
				0.*)	AC_DEFINE(UNUSABLE_SIGUSRX)	;;
				1.*)	AC_DEFINE(UNUSABLE_SIGUSRX)	;;
				2.0)	AC_DEFINE(UNUSABLE_SIGUSRX)	;;
				2.0.*)	AC_DEFINE(UNUSABLE_SIGUSRX)	;;
				2.1)	AC_DEFINE(UNUSABLE_SIGUSRX)	;;
				2.1.*)	AC_DEFINE(UNUSABLE_SIGUSRX)	;;
				*)					;;
			    esac
			    if test "x$pthread_lib" != "x"; then
				AC_CHECK_LIB($pthread_lib,
				  pthread_mutexattr_settype,
				  AC_DEFINE(HAVE_PTHREAD_MUTEXATTR_SETTYPE))
				AC_CHECK_LIB($pthread_lib,
				  pthread_mutexattr_setkind_np,
				  AC_DEFINE(HAVE_PTHREAD_MUTEXATTR_SETKIND_NP))
			    fi
			    AC_DEFINE(USE_RECURSIVE_MALLOC_MUTEX)
			    AC_DEFINE(INIT_MUTEX_IN_CHILD_AT_FORK) ;;
		    esac
		    ENABLE_ALLOC_TYPE_VARS="$ENABLE_ALLOC_TYPE_VARS threads"
		    ;;
	    esac
	    ;;
	*)
	    # Threads disabled
	    ;;
    esac
fi

#
# Check if we should try to use kernel poll
#
if test X${enable_kernel_poll} = Xyes; then
  AC_DEFINE(ENABLE_KERNEL_POLL)
fi

dnl ----------------------------------------------------------------------
dnl Stuff that should be moved into their respective application
dnl ----------------------------------------------------------------------

dnl crypto
#--------------------------------------------------------------------
# Dynamic Erlang Drivers
#
# Linking to produce dynamic Erlang drivers to be loaded by Erlang's
# Dynamic Driver Loader and Linker (DDLL). Below the prefix DED is an
# abbreviation for `Dynamic Erlang Driver'.
#
# For DED we need something quite sloppy, which allows undefined references 
# (notably driver functions) in the resulting shared library. 
# Example of Makefile rule (and settings of macros):
#
# LIBS = @LIBS@
# LD = @DED_LD@
# LDFLAGS = @DED_LDFLAGS@
# soname = @ldsoname@
#
# my_drv.so:   my_drv.o my_utils.o
#              $(LD) $(LDFLAGS) $(soname) $@ -o $@ $^ -lc $(LIBS)
#
# XXX By now only the Solaris 2 linker and the GNU linker are supported.
# -- Peter
# XXX (And AIX)
#--------------------------------------------------------------------
if test "x$GCC" = xyes; then
	DED_CFLAGS="$CFLAGS -fPIC"
else
	DED_CFLAGS="$CFLAGS"
fi
# For windows we certainly need another way of making shared libraries
if test "X$host" = "Xwin32"; then
	AC_MSG_CHECKING(for linker flags for loadable drivers)
	DED_LD=ld.sh	
	DED_LDFLAGS="-dll"
	ded_soname=""
else
	DED_LD=ld
	# I don't think anything really needs the soname stuff
	# - nullify it here and we'll find out  /Per
	ded_soname=""
	AC_MSG_CHECKING(for linker flags for loadable drivers)
	case $host_os in
		solaris2*|sysv4*)
			DED_LDFLAGS="-G"
		;;
		aix4*)
			DED_LDFLAGS="-G -bnoentry -bexpall"
		;;
		freebsd2*)
			# Non-ELF GNU linker
			DED_LDFLAGS="-Bshareable"
		;;
		darwin*)
			# Mach-O linker: a shared lib and a loadable
			# object file is not the same thing.
			DED_LDFLAGS="-bundle -flat_namespace -undefined suppress -lbundle1.o"
			DED_CFLAGS="$DED_CFLAGS -fno-common"
		;;
		*)
			# assume GNU linker and ELF
			DED_LDFLAGS="-shared"
		;;
	esac
fi
AC_MSG_RESULT([$DED_LDFLAGS])

AC_SUBST(DED_CFLAGS)
AC_SUBST(DED_LD)
AC_SUBST(DED_LDFLAGS)
AC_SUBST(ded_soname)

dnl
dnl We should look for a compiler that handles jump tables, for beam_emu 
dnl to be optimizes
dnl

LM_FIND_EMU_CC

dnl
dnl SSL and CRYPTO need the OpenSSL libraries
dnl
dnl Check flags --with-ssl, --without-ssl --with-ssl=PATH.
dnl If no option is given or --with-ssl is set without a path then we
dnl search for OpenSSL libraries and header files in the standard locations. 
dnl If set to --without-ssl we disable the use of SSL and CRYPTO.
dnl If set to --with-ssl=PATH we use that path as the prefix, i.e. we
dnl use "PATH/include" and "PATH/lib".

AC_SUBST(SSL_APP)
AC_SUBST(CRYPTO_APP)
AC_SUBST(SSL_INCLUDE)
AC_SUBST(SSL_ROOT)
AC_SUBST(SSL_LIBDIR)
AC_SUBST(OPENSSL_CMD)
AC_ARG_WITH(ssl,
[  --with-ssl=PATH         specify location of OpenSSL include and lib
  --with-ssl              use SSL (default)
  --without-ssl           don't use SSL])


# Remove all SKIP files from previous runs
for a in ssl crypto ; do
  /bin/rm -f $ERL_TOP/lib/$a/SKIP
done

if test "x$with_ssl" = "xno"; then
    SSL_APP=
    CRYPTO_APP=
elif test "x$with_ssl" = "xyes" -o "x$with_ssl" = "x" ;then
    # On windows, we could try to find tha installation
    # of Shining Light OpenSSL, which can be found by poking in
    # the uninstall section in the registry, it's worth a try...
    extra_dir=""
    if  test "x$MIXED_CYGWIN_VC" = "xyes"; then
    	AC_CHECK_PROG(REGTOOL, regtool, regtool, false)
	if test "$ac_cv_prog_REGTOOL" != false; then
		wrp="/machine/software/microsoft/windows/currentversion/"
		urp="uninstall/openssl_is1/inno setup: app path"
		rp="$wrp$urp"
		if regtool -q get "$rp" > /dev/null; then
			ssl_install_dir=`regtool -q get "$rp"`
			# Try hard to get rid of spaces...
			if cygpath -d "$ssl_install_dir" > /dev/null 2>&1; then
				ssl_install_dir=`cygpath -d "$ssl_install_dir"`
			fi
			extra_dir=`cygpath $ssl_install_dir`
		fi
	fi
    fi
    # We search for OpenSSL in the common OS standard locations.
    SSL_APP=ssl
    CRYPTO_APP=crypto

    AC_MSG_CHECKING(for OpenSSL >= 0.9.7 in standard locations) 
    for dir in $extra_dir /cygdrive/c/OpenSSL /usr/local /usr /usr/pkg \
		/usr/local/openssl /usr/lib/openssl /usr/openssl \
		/usr/local/ssl /usr/lib/ssl /usr/ssl
	do
       if test -f $dir/include/openssl/opensslv.h; then
		is_real_ssl=yes
		SSL_ROOT="$dir"
		if test "x$MIXED_CYGWIN_VC" = "xyes"; then
			if test -f "$dir/lib/VC/ssleay32.lib" -o \
				-f "$dir/lib/VC/openssl.lib"; then 
				SSL_LIBDIR="$dir/lib/VC"
			elif test -f "$dir/lib/ssleay32.lib" -o \
				-f "$dir/lib/openssl.lib"; then
				SSL_LIBDIR="$dir/lib"
			else
				is_real_ssl=no
			fi
		else
			SSL_LIBDIR="$dir/lib"
		fi
		SSL_BINDIR="$dir/bin"
dnl 		Should one use EXEEXT or ac_exeext?
		if test -f "$SSL_BINDIR/openssl$EXEEXT"; then
			if "$SSL_BINDIR/openssl" version > /dev/null 2>&1; then
				OPENSSL_CMD="$SSL_BINDIR/openssl"
			else
				is_real_ssl=no
			fi
		else
			is_real_ssl=no
		fi
		if test "x$is_real_ssl" = "xyes" ; then
			SSL_INCLUDE="-I$dir/include"
			old_CPPFLAGS=$CPPFLAGS
			CPPFLAGS=$SSL_INCLUDE
			AC_EGREP_CPP(yes,[
#include <openssl/opensslv.h>
#if OPENSSL_VERSION_NUMBER >= 0x0090700fL
  yes
#endif
			],[
			AC_MSG_RESULT([$dir])
			ssl_found=yes
			],[
			SSL_APP=
			CRYPTO_APP=
			ssl_found=no
         		])
         		CPPFLAGS=$old_CPPFLAGS
	 		if test "x$ssl_found" = "xyes" ; then
	   			break;
         		fi
		fi	
       fi
    done

    if test "x$ssl_found" != "xyes" ; then
       AC_MSG_RESULT([no])
       SSL_APP=
       CRYPTO_APP=
       AC_MSG_WARN([No (usable) OpenSSL found, skipping ssl and crypto applications])

       for a in ssl crypto ; do
           echo "No usable OpenSSL found" > $ERL_TOP/lib/$a/SKIP
       done
    fi
else
    # Option given with PATH to package
    if test ! -d "$with_ssl" ; then
       AC_MSG_ERROR(Invalid path to option --with-ssl=PATH)
    fi
    SSL_ROOT="$with_ssl"
    if test "x$MIXED_CYGWIN_VC" = "xyes" -a -d "$with_ssl/lib/VC"; then
	SSL_LIBDIR="$with_ssl/lib/VC"
    else
	SSL_LIBDIR="$with_ssl/lib"
    fi
    SSL_INCLUDE="-I$with_ssl/include"
    OPENSSL_CMD="$with_ssl/bin/openssl"
    SSL_APP=ssl
    CRYPTO_APP=crypto
fi

if test "x$SSL_APP" != "x" ; then
    dnl We found openssl, now check if we use kerberos 5 support
    AC_MSG_CHECKING(for OpenSSL kerberos 5 support)
    old_CPPFLAGS=$CPPFLAGS
    CPPFLAGS=$SSL_INCLUDE
    AC_EGREP_CPP(yes,[
#include <openssl/opensslconf.h>
#ifndef OPENSSL_NO_KRB5
  yes
#endif
      ],[
      AC_MSG_RESULT([yes])
      ssl_krb5_enabled=yes
      ],[
      AC_MSG_RESULT([no])
      ssl_krb5_enabled=no
      ])
    CPPFLAGS=$old_CPPFLAGS
    SSL_KRB5_INCLUDE=
    if test "x$ssl_krb5_enabled" = "xyes" ; then
        AC_MSG_CHECKING(for krb5.h in standard locations)
	for dir in $extra_dir $SSL_ROOT/include $SSL_ROOT/include/openssl \
		$SSL_ROOT/include/kerberos /cygdrive/c/kerberos/include \
		/usr/local/kerberos/include /usr/kerberos/include
	do
            if test -f "$dir/krb5.h" ; then
                SSL_KRB5_INCLUDE="$dir"
		break
            fi
        done
        if test "x$SSL_KRB5_INCLUDE" = "x" ; then
	    AC_MSG_RESULT([not found])
	    SSL_APP=
	    CRYPTO_APP=
	    AC_MSG_WARN([OpenSSL is configured for kerberos but no krb5.h found])
	    for a in ssl crypto ; do
	 	echo "OpenSSL is configured for kerberos but no krb5.h found" > $ERL_TOP/lib/$a/SKIP
	    done
        else
            AC_MSG_RESULT([found in $SSL_KRB5_INCLUDE])
            SSL_INCLUDE="$SSL_INCLUDE -I$SSL_KRB5_INCLUDE"
        fi
    fi
fi

#--------------------------------------------------------------------
# Os mon stuff.
#--------------------------------------------------------------------
AC_SUBST(os_mon_programs)
AC_CHECK_LIB(kstat, kstat_open, [os_mon_programs="$os_mon_programs cpu_sup"])
case $host_os in
	solaris2*)
		os_mon_programs="$os_mon_programs ferrule mod_syslog" ;;
esac


dnl
dnl Then there are a number of apps which needs a java compiler...
dnl
need_java="jinterface ic/java_src orber/java_src
	   mnesia_session/examples/person/java_session"

# Remove all SKIP files from previous runs
for a in $need_java ; do
  /bin/rm -f $ERL_TOP/lib/$a/SKIP
done

AC_CHECK_PROGS(JAVAC, javac.sh javac guavac gcj jikes bock)
if test -n "$JAVAC"; then
  dnl Make sure it's at least JDK 1.2
  AC_CACHE_CHECK(for JDK version 1.2, 
     ac_cv_prog_javac_ver_1_2,
     [ERL_TRY_LINK_JAVA([], [java.util.Iterator iter;],
        ac_cv_prog_javac_ver_1_2=yes, ac_cv_prog_javac_ver_1_2=no)])
  if test $ac_cv_prog_javac_ver_1_2 = no; then
    unset -v JAVAC
  fi
fi
if test -z "$JAVAC"; then
  AC_MSG_WARN([Could not find any usable java compiler, will skip: jinterface])

  for a in $need_java ; do
	echo "No Java compiler found" > $ERL_TOP/lib/$a/SKIP
  done
fi

dnl
dnl Orber has a c++ example, this isn't the right way to check for
dnl it, but....
dnl
CXXFLAGS=
AC_SUBST(CXXFLAGS)
dnl this deliberately does not believe that 'gcc' is a C++ compiler
AC_CHECK_PROGS(CXX, $CCC c++ g++ CC cxx cc++ cl, false)

# Remove SKIP file from previous run
/bin/rm -f $ERL_TOP/lib/orber/SKIP

if test "$CXX" = false; then
  echo "No C++ compiler found" > $ERL_TOP/lib/orber/SKIP
fi

#
# Currently if we compile for 64 bits we want to compile
# some external port programs using 32 bits
#

# If not defined we trust the C compiler in $CC to do 32 bits
if test -z "$CC32"; then
  CC32="$CC"
fi

if test -z "$CFLAGS32"; then
  if test $ac_cv_sizeof_void_p != 4; then
    # We are compiling default 64 bits and use -m32 for 32 bit compilations
    CFLAGS32="$CFLAGS -m32"
  else
    CFLAGS32="$CFLAGS"
  fi
fi

AC_SUBST(CC32)
AC_SUBST(CFLAGS32)


dnl ----------------------------------------------------------------------
dnl Directories needed for the build
dnl ----------------------------------------------------------------------

erts=${erl_top}/erts

erts_dirs="								
  $erts/obj $erts/obj.beam $erts/obj.debug $erts/obj.debug.beam
									
  $erts/obj/$host
  $erts/obj.debug/$host

  $erts/obj.beam
  $erts/obj.beam/$host

  $erts/obj.debug.beam
  $erts/obj.debug.beam/$host						

  $erts/obj.shared.beam
  $erts/obj.shared.beam/$host

  $erts/obj.purify.beam
  $erts/obj.purify.beam/$host
      									
  $erts/obj.quantify.beam
  $erts/obj.quantify.beam/$host
      									
  $erts/obj.purecov.beam
  $erts/obj.purecov.beam/$host
    									
  $erts/emulator/$host/opt
  $erts/emulator/$host/debug
  $erts/emulator/$host/shared
  $erts/emulator/$host/purify
  $erts/emulator/$host/quantify
  $erts/emulator/$host/purecov

"
for d in ${erl_top}/bin ${erl_top}/bin/$host $erts_dirs ;
do
  if test ! -d $d; then
    mkdir -p 1>/dev/null 2>&1 $d
  fi
done


dnl ----------------------------------------------------------------------
dnl Output the result.
dnl ----------------------------------------------------------------------

dnl  Note that the output files are relative to $srcdir

AC_OUTPUT(
  emulator/$host/Makefile:emulator/Makefile.in
  emulator/zlib/$host/Makefile:emulator/zlib/Makefile.in
  epmd/src/$host/Makefile:epmd/src/Makefile.in
  etc/common/$host/Makefile:etc/common/Makefile.in
  ../make/$host/otp.mk:../make/otp.mk.in
dnl
dnl The ones below should be moved to their respective lib
dnl
  ../lib/ic/c_src/$host/Makefile:../lib/ic/c_src/Makefile.in
  ../lib/os_mon/c_src/$host/Makefile:../lib/os_mon/c_src/Makefile.in
  ../lib/ssl/c_src/$host/Makefile:../lib/ssl/c_src/Makefile.in
  ../lib/ssl/examples/certs/$host/Makefile:../lib/ssl/examples/certs/Makefile.in
  ../lib/crypto/c_src/$host/Makefile:../lib/crypto/c_src/Makefile.in
  ../lib/orber/c_src/$host/Makefile:../lib/orber/c_src/Makefile.in
  ../lib/odbc/c_src/$host/Makefile:../lib/odbc/c_src/Makefile.in
  ../lib/runtime_tools/c_src/$host/Makefile:../lib/runtime_tools/c_src/Makefile.in
  ../lib/asn1/c_src/$host/Makefile:../lib/asn1/c_src/Makefile.in
  )
    
