
/* --- Contributions ---
*  bsp.mk
*  dbgprintf.mk
*  debug.mk
*  efs.mk
*  heap.mk
*  inet.mk
*  kernel.mk
*  pthread.mk
*  rtc.mk
*  shell.mk
*  tosv.mk
*/

/*
******************************************************************************
*          /////////////                          ///////////////            *
*      /////////////////////                  ///////////////////////        *
*    ///////////////////////////           ////////////////////////////      *
*  ///////////////////////////////        ///////////////////////////////    *
* //////////////      /////////////      /////////////         ///////////   *
* ///////////             //////////     /////////               //////////  *
* /////////                 ////////    //////////               //////////  *
* ///////                    ////////   ////////////                         *
* //////                      ///////    /////////////                       *
* /////                       ////////    ////////////////////////           *
* /////                       ////////      /////////////////////////        *
* /////                       ////////       ////////////////////////////    *
* /////                       ////////          ///////////////////////////  *
* /////                       //#############                /////////////// *
* //////                     ///#############                  ///////////// *
* ///////                   ////####/                             ////////// *
* /////////               //////############///////                ///////// *
* //////////            ////////############////////              ////////// *
* /////////////     ////////////####     /////////////           /////////// *
*  //////////////////////////// #############//////////////////////////////  *
*   //////////////////////////  #############////////////////////////////    *
*      ///////////////////                  /////////////////////////        *
*          /////////////                        /////////////////            *
*									     *
*									     *
*		  MULTITASKING REALTIME OPERATING SYSTEM.		     *
*									     *
*		    COPYRIGHT (C), 1991, ENEA DATA AB.			     *
*									     *
***									   ***
******************************************************************************
* @(#) File: osemain.con	Id: 03/1946370276339378			     *
* @(#) Revision: 3.4		Revision date: 96/09/25			     *
*
* This file contains the configuration data needed by the interface library.
* Do not remove any declarations (except obvious examples) or change the
* order of declarations.
* Some data must be entered for each application whereas suitable
* default values for selectable data are already entered.
*
* The selectable data entered will suit a typical application, but you
* are advised to check each selection carefully to see if it fits your
* particular application.
*
*
* History of changes
*
*	Date	Name		Vers	Change
*	------	----		----	-------------------------------
*
*	910901	Bengt Eliasson	3.0	Initial release.
*	930806	Bengt Eliasson	3.1	Added some comments.
*	940220	Bengt Eliasson	3.2	Replaced "NULL" with "zero" in
*                                       required places.
*	951030	Bengt Eliasson	3.3	Modified some comments.
*	960925	Bengt Eliasson	3.4	Modified some comments.
*
*
* CONTENTS
*
* 1  OSE personality
*
*    1.1  Separate linkage option
*    1.2  User start option
*
* 2  Process declarations
*
*    2.1  Redirection tables
*    2.2  Blocks
*    2.3  Interrupt processes
*    2.4  Timer processes
*    2.5  Prioritized processes
*    2.6  Background processes
*    2.7  Phantom processes
*    2.8  Required external processes
*
* 3  Environment variables
*
*    3.1  Block varables
*    3.2  Process varables
*
* 4 Error handler declarations
*
*    4.1  Block error handlers
*    4.2  Process error handlers
*
* 5  Hook declarations
*
*    5.1  Early system start hooks
*    5.2  Late system start hooks
*
******************************************************************************
*/

/*
* 1 OSE PERSONALITY.
*/

/*
* 1.1 Separate linkage option (must not be left empty)
*
* Set this option to YES if you are creating a separately linked program unit.
* That is, if you are linking an application to the interface library only.
* If in doubt, set it to NO.
*
*	SEPARATELY_LINKED	( [YES | NO] )
*/

SEPARATELY_LINKED(NO)

/*
* 1.2 User start option (must not be left empty)
*
* Set this option to YES if you want to start OSE by calling the start_OSE
* entrypoint. Set it to NO if you want OSE to automatically create all
* processes.
* This option is normally set to NO.
*
*	USER_START	( [YES | NO] )
*/

USER_START(NO)

/*
* 2 PROCESS DECLARATIONS.
*/

/*
* 2.1 Redirection tables (optional)
*
* A redirection table may be attached to a process. This causes some or all
* signals sent to the process to be redirected to some other process.
*
* Redirection tables are normally used only for phantom processes created
* by linkhandler processes.
* Leave this section blank if in doubt.
*
* Setting REDIR_TAB_END to DEFAULT means that signals not mentioned in
* the table are sent to the process to which the table is attached.
*
*	REDIR_TAB_START	( <redirection_table_name> )
*	REDIR_ENTRY	( <signal_no>, <process_name> )
*	REDIR_TAB_END	( [<default_process_name> | DEFAULT] )
*
* Ex:	REDIR_TAB_START	( redir_all )
*	REDIR_TAB_END	(example3)
*
* Ex:	REDIR_TAB_START	( redir_just_one )
*	REDIR_ENTRY	( 17,example3 )
*	REDIR_TAB_END	(DEFAULT)
*/

/*
* 2.2 Blocks (optional)
*
* Enter the blocks that should automatically be created.
*
* Local pools are generated only if local_pool_size != zero.
* Sigsizes and stacksizes must be sorted in ascending order and are ignored
* if local_pool_size is set to zero. Less than 4 sizes of each type may be
* specified by padding with trailing zero's. Four zero's in a list means that
* the system pool should be used for that list.
* If more than 4 sizes are required, then the pool can not be automatically
* created in this way.
*
* Rem_call_server is set to the process name of a remote call server.
* Set it to DEFAULT if no server is  required, which is the normal case.
*
* User_number and local_pool_size are normally set to zero.
*
*	DEF_BLOCK	( <blockname>,<user_number>,
*			[<rem_call_server> | DEFAULT],
*			[SUPERVISOR_MODE | USER_MODE],
*			<local_pool_size>,
*			<sigsize1>,<sigsize2>,<sigsize3>,<sigsize4>,
*			<stacksize1>,<stacksize2>,<stacksize3>,<stacksize4> )
*
* Ex:	DEF_BLOCK(example7,0,DEFAULT,SUPERVISOR_MODE,0,31,63,511,2047,511,1023,2047,4095)
*/

/* DEF_BLOCK(erl_block, 0, DEFAULT, SUPERVISOR_MODE, 8192000, 
          255, 1023, 4095, 65535, 1023, 2047, 8191, 65535)
*/

DEF_BLOCK(erl_block, 0, DEFAULT, SUPERVISOR_MODE, 0,
	  0,0,0,0, 0,0,0,0)

/*
* 2.3 Interrupt processes (optional)
*
* Enter the names and parameters for all static interrupt processes.
* (0=highest priority, 31=lowest.)
*
*	INT_PROC	( <processname>,<entrypoint>,<stacksize>,<priority>,
*			[<blockname> | DEFAULT],<vector> )
*
* Ex:	INT_PROC	( example1,example1,100,3,DEFAULT,12 )
*	INT_PROC	( sys_timer, sys_timer, 100, 15, DEFAULT, 7 )
*/

/*
* 2.4 Timer processes (optional)
*
* Enter the names and parameters for all static timer processes.
* (0=highest priority, 31=lowest.)
*
*	TI_PROC		( <processname>,<entrypoint>,<stacksize>,<priority>,
*			[<blockname> | DEFAULT], <timeslice> )
*
* Ex:	TI_PROC		( example2,example2,100,0,DEFAULT,1 )
*/

/*
* 2.5 Prioritized processes (optional)
*
* Enter the names and parameters for all static prioritized processes.
* (0=highest priority, 31=lowest.)
*
*	PRI_PROC	( <processname>,<entrypoint>,<stacksize>,<priority>,
*			[<blockname> | DEFAULT], <timeslice>,
*			[<redirection_table_name> | NULL] )
*
* Ex:	PRI_PROC	( example3,example3,200,16,DEFAULT,0,NULL )
*/

/*
 *===========================================================================
 *                	OSE processes
 *===========================================================================
 * 
 */
PRI_PROC(ose_heapd, ose_heapd, 2000, 10, DEFAULT, 0, NULL)
PRI_PROC(ose_ethlink, ose_ethlink, 1024, 10, DEFAULT, 0, NULL)
PRI_PROC(ose_inet, ose_inet,  1024, 10, DEFAULT, 0, NULL)
PRI_PROC(init_inet, init_inet,  256,  9, DEFAULT, 0, NULL)
PRI_PROC(ose_extfm, ose_extfm, 2000, 9, DEFAULT, 0, NULL)
/* PRI_PROC(ose_ramdisk,  ose_ramdisk,  1000, 9, DEFAULT, 0, NULL) */
PRI_PROC(ose_dbgserver, ose_dbgserver, 4096,  0, DEFAULT, 0, NULL)
PRI_PROC(ose_tosv, ose_tosv, 1024, 10, DEFAULT, 0, NULL)
PRI_PROC(ose_rtc, ose_rtc, 1024, 10, DEFAULT, 0, NULL)
PRI_PROC(ose_pthread,  ose_pthread,   4096, 13, DEFAULT, 0, NULL)
PRI_PROC(ose_udppdr, ose_udppdr, 2000,  4, DEFAULT, 0, NULL )
PRI_PROC(ose_lnhudp, ose_lnhudp, 1000, 16, DEFAULT, 0, NULL)
PRI_PROC(ose_fss,  ose_fss,  2000, 9, DEFAULT, 0, NULL)
PRI_PROC(ose_confm, ose_confm, 2000, 9, DEFAULT, 0, NULL)
PRI_PROC(ose_serdd, ose_serdd, 2000, 9, DEFAULT, 0, NULL)
PRI_PROC(ose_shelld, ose_shelld, 8000, 20, DEFAULT, 0, NULL)
PRI_PROC(ose_telnetd, ose_telnetd, 1000, 25, DEFAULT, 0, NULL)
PRI_PROC(start_efs, start_efs, 2000, 9, DEFAULT, 0, NULL )
PRI_PROC(ose_tftpd, ose_tftpd, 1000, 15, DEFAULT, 0, NULL)
PRI_PROC(ose_resolve, ose_resolve, 1000, 20, DEFAULT, 0, NULL)

PRI_PROC(erl_tmp, erl_tmp, 64, 31, erl_block, 0, NULL) 


/*
 *===========================================================================
 *                	User processes
 *===========================================================================
 * 
 */


/*
* 2.6 Background processes (optional)
*
* Enter the names and parameters for all static background processes.
*
*	BG_PROC		( <processname>,<entrypoint>,<stacksize>,
*			[<blockname> | DEFAULT], <timeslice>,
*			[<redirection_table> | NULL] )
*
* Ex:	BG_PROC		( example4,example4,200,DEFAULT,32,NULL )
*/

/*
* 2.7 Phantom processes (optional)
*
* Enter the names and parameters for all static phantom processes.
* Static phantom processes are not normally used.
*
*	PHT_PROC	( <processname>,
*			[<blockname> | DEFAULT],
*			[<redirection_table> | NULL] )
*
* Ex:	PHT_PROC	( example5,DEFAULT,NULL )
*/

/*
* 2.8 Required external processes (optional)
*
* This section is used only for separately linked program units.
* The section is normally left blank.
*
* Enter the names of processes in other separately linked programs that
* you want immediately accessible.
*
* These processes are hunted for by the zzmain process during the startup
* procedure. If they are found, they will appear as static processes, i.e.
* the process id's of these processes will appear in global variables
* created by the system.
* If some external process is not found within the specified timeout, then
* the program will abort and terminate itself.
*
* The <processname> parameter causes osemain.c to create a public variable
* named processname_, which contains the process id of the found process.
*
* The <huntname> parameter is converted to an ascii string, which is
* passed as a parameter to the hunt system call.
*
* The <timeout> parameter causes osemain to wait the specified number of
* milliseconds for the process to appear.
* If <timeout> is zero, osemain will wait indefinitely.
*
*	EXT_PROC	( <processname>, <huntname>, <timeout> )
*
* Ex:	EXT_PROC	( example6, example6, 5000)
*/

/*
* 3 ENVIRONMENT VARIABLES.
*/

/*
* 3.1 Block variables (optional)
*
* Enter the names and values of environment variables that should be
* assigned to static blocks during the system start procedure.
*
* The BLOCK_VARIABLE entry simply assigns a value to an environment
* variable for the specified block.
*
* The BLOCK_VAR_SYM entry takes the address of a public symbol, converts it
* to text by applying the specified format string, and assigns
* the result as the value of an environment variable.
*
* Warning! The BLOCK_VAR_SYM() option uses the sprintf() function
* defined in the stdio.h ANSI header.
*
*	BLOCK_VARIABLE	( <blockname>, <variable_name>,
*			<value_string> )
*
*	BLOCK_VAR_SYM	( <blockname>, <variable_name>,
*			<format_string>, <extern_symbol> )
*
* Ex:	BLOCK_VARIABLE	( example4, term, "vt100")
*	BLOCK_VAR_SYM	( example4, start_address, "%X", startup)
*
*/

BLOCK_VARIABLE  ( erl_block, HOME, "/ldisk/erl_user" )
BLOCK_VARIABLE  ( erl_block, ROOTDIR, "/ldisk/erl_release" )
BLOCK_VARIABLE  ( erl_block, EMU, "beam" )
BLOCK_VARIABLE  ( erl_block, PROGNAME, "erl" )
BLOCK_VARIABLE  ( erl_block, ERL_CRASH_DUMP, "/ram/erl_crash.dump" )

BLOCK_VARIABLE  ( erl_block, HOSTSFILE, "/etc/hosts" ) 
BLOCK_VARIABLE  ( erl_block, RESOLVFILE, "/etc/resolv.conf" )
BLOCK_VARIABLE  ( erl_block, ERL_CTRL_MON_PORT, "9999" )

/* This will extend the OSE heap with 16Mb (2EDFFFD..3E7FFFD)
/* BLOCK_VARIABLE  ( erl_block, OSE_EXT_HEAP_SIZE, "16384000" ) */
/* BLOCK_VARIABLE  ( erl_block, OSE_EXT_HEAP_ADDR, "49151997" ) */
BLOCK_VARIABLE  ( erl_block, OSE_EXT_HEAP_SIZE, "16384000" ) 
BLOCK_VARIABLE  ( erl_block, OSE_EXT_HEAP_ADDR, "65535998" ) 

/* This will reserve a 64 Mb heap area for Erlang (3E7FFFE..7CFFFFE) */
/* BLOCK_VARIABLE  ( erl_block, ERL_HEAP_SIZE, "65536000" ) */
/* BLOCK_VARIABLE  ( erl_block, ERL_HEAP_ADDR, "65535998" ) */
BLOCK_VARIABLE  ( erl_block, ERL_HEAP_SIZE, "49152000" )
BLOCK_VARIABLE  ( erl_block, ERL_HEAP_ADDR, "81919999" )

/* BLOCK_VARIABLE  ( DEFAULT, HOSTNAME, "maeglin.du.uab.ericsson.se" ) */
/* BLOCK_VARIABLE  ( DEFAULT, NAMESERVER, "134.138.176.16" ) */
/* BLOCK_VARIABLE  ( DEFAULT, DOMAIN, "du.uab.ericsson.se" ) */

BLOCK_VARIABLE  ( erl_block, ERL_MAX_PORTS, "1024" )

/*
* 3.2 Process variables (optional)
*
* Enter the names and values of environment variables that should be
* assigned to static processes during the system start procedure.
*
* The PROC_VARIABLE entry simply assigns a value to an environment
* variable for the specified process.
*
* The PROC_VAR_SYM entry takes the address of a public symbol, converts it
* to text by applying the specified format string, and assigns
* the result as the value of an environment variable.
*
* Warning! The PROC_VAR_SYM() option uses the sprintf() function
* defined in the stdio.h ANSI header.
*
*	PROC_VARIABLE	( <processname>, <variable_name>,
*			<value_string> )
*
*	PROC_VAR_SYM	( <processname>, <variable_name>,
*			<format_string>, <extern_symbol> )
*
* Ex:	PROC_VARIABLE	( example4, term, "vt100")
*	PROC_VAR_SYM	( example4, start_address, "%X", startup)
*/

/* if using ethernet for debug 
PROC_VARIABLE(ose_dbgserver, OSEDBG_INTERFACE,'eth0')
PROC_VARIABLE(ose_dbgserver, OSEDBG_CONNECTION_PORT,'1024')
*/

PROC_VARIABLE(ose_inet, MAX_SOCKETS, "1024")

/*
* 4 ERROR HANDLER DECLARATIONS.
*/

/*
* 4.1 Block error handlers (optional)
*
* Enter the names of static error handlers on the block level.
*
* The function with the specified entrypoint is assigned as a block level
* error handler for processes in the specified block.
*
*	BLOCK_ERROR_HANDLER	( <blockname>, <entrypoint>, <stacksize> )
*/

/*
* 4.2 Process error handlers (optional)
*
* Enter the names of static error handlers on the process level.
*
* The function with the specified entrypoint is assigned as an
* error handler for the specified process.
*
*	PROC_ERROR_HANDLER	( <processname>, <entrypoint>, <stacksize> )
*/

/*
* 5 HOOK DECLARATIONS.
*/

/*
* 5.1 Early system start hooks (optional)
*
* This section is used only for separately linked program units.
* The section is normally left blank.
*
* Early system start hooks are called before any process has been created,
* and before any C variables have been referenced.
*
* System start hooks are run by a prioritized process (zzmain), and may
* use all system calls allowed for prioritized processes.
*
* The early system start hooks declared here are called only for separately
* linked programs. (Declarations are ignored otherwise.)
* When the kernel is present, early start handlers configured into the kernel
* are instead executed.
*
* You may have any number of system start hooks and they are called in order
* of declaration.
*
*	START_OSE_HOOK1	( <name> )
*/

/*
* 5.2 Late system start hooks (optional)
*
* Late system start hooks are called when all processes have been created,
* but before they are started.
*
* System start hooks are run by a prioritized process (zzmain), and may
* use all system calls allowed for prioritized processes.
*
* You may have any number of system start hooks and they are called in order
* of declaration.
*
*	START_OSE_HOOK2	( <name> )
*/

START_OSE_HOOK2 (bspStartOseHook2)
START_OSE_HOOK2 (heap_init_flib)
START_OSE_HOOK2 (initPthreads)
START_OSE_HOOK2 (initInet)
START_OSE_HOOK2 (initInetFlib)
START_OSE_HOOK2 (initRtc)
START_OSE_HOOK2 (initRtcFlib)
START_OSE_HOOK2 (initEfsCmds)
START_OSE_HOOK2 (init_dbgprintf)
START_OSE_HOOK2 (initConCmds)
START_OSE_HOOK2 (initRtcCmds)
START_OSE_HOOK2 (initKillCmds)
START_OSE_HOOK2 (initHeapCmds)
START_OSE_HOOK2 (initShellCmds)
START_OSE_HOOK2 (initTftp)
START_OSE_HOOK2 (initFtpCmds)

START_OSE_HOOK2 (erlHooks)
