/*
*****************************************************************************
**                            MEMORY MANAGEMENT CONFIGURATION
**
**     File:   mmh.con
**                                                                         
**       Copyright (C) 1998 by ENEA OSE SYSTEMS AB. All rights reserved.       
**                                                                         
*****************************************************************************

	CONTENTS
	--------

	1  Description
	2  History of development
	3  Definitions

*****************************************************************************
*/


#ifdef USE_OSEDEF_H
#include "osedef.h"
#endif

/*
*****************************************************************************
** 1  DESCRIPTION.
*****************************************************************************
* 
* This file contains the memory management configuration in a system
* which uses the MMS - OSE Memory Management System. The MMS
* supports several architectures, and the attributes in this file will
* be interpreted differently among those. For more information regarding
* how the attributes affects the system behavior for a specific architecture,
* the alignment requirements and the level of implementation, see the release
* note and the readme-file for the appropriate product. 
*/

/*
 *****************************************************************************
 * 2  HISTORY OF DEVELOPMENT.
 *
 *	2001-05-08 Added PMD awareness.
 *      Rev 1.0   09/11/98 19:51:12   malj Initial revision.
 *
*/                 


/*
 *****************************************************************************
 ** 3  DESCRIPTION.
 *****************************************************************************
 */

/*
* 3.1 Early error handling hook  
*
* This hook is called when MMH encounters an error during the
* pre-kernel initialization.
*
* Since the kernel is not initialized in this stage, the System Call
* error() can not be used. Instead this hook is called.
*
* The early error handler must NOT call any System Call since the kernel is
* not yet initialized.
*
* If the failure handler returns, MMS continues to initialize. Note that
* it only makes sense to return from the failure handler in a few cases.
*
* N.B. This hook is mandatory. If this hook is not defined, MMH will detect 
*      its absence, write an error message through the MMH_PRINT facility and
*      return.
*
* The early error handler specified should be consistent with the following
* C prototype:
*
*  void     myEarlyErrorHandler(unsigned long int error_code,
*                           unsigned long int extra);
*
*
*       error_code = error code from MMS. See mms_err.h. 
*       extra      = pointer to register dump IFF extra != NULL
*
* example: 
*
* EARLY_ERROR_HANDLER(myEarlyErrorHandler)
*
*/

EARLY_ERROR_HANDLER(earlyError)

/*
* 3.2 MMH WORK MEMORY CONFIGURATION.
*
* There MUST always be MMH work memory defined, otherwise the system
* will not start. The usage is dependent on the number of regions
* and the sizes of the dynamically allocated regions.
* If static usage of MMH is intended, the memory need is only the 
* control information of domains and regions. In this case, only one MMH
* memory area can be defined. Creating more gives runtime error.
* This configuration allocates one or several memory areas to be used 
* as physical memory heap in the MMH. This memory areas MUST also fit 
* entirely within the CODE_DATA memory, otherwise it is an error.
*
* NOTE: MMH work memory areas are not allowed to overlap each other or 
* any global or local region specified in this configuration.
*
*	MMH_MEMORY	( <base_addr>, <size> )
*
*/

#define ALIGN(adr, alignand)  (((adr) + (alignand) - 1) & ~((alignand) - 1))
#define PAGE_SIZE 4096

extern const char __RAM_END[];
extern const char __MEMORY_END[];
#ifdef USE_PMD                  
extern const char __PMD_AREA_START[];   
#define MMH_MEMORY_END ALIGN( (U32)__PMD_AREA_START - PAGE_SIZE, PAGE_SIZE)
#else                           
#define MMH_MEMORY_END ((U32)__MEMORY_END)
#endif                          


MMH_MEMORY(    ALIGN((U32) __RAM_END , PAGE_SIZE),\
	       MMH_MEMORY_END - ALIGN((U32)__RAM_END , PAGE_SIZE))


