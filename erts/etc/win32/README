This is Erlang version 4.4.1-alpha3 for Windows NT/Window 95.

Limitations on port programs
----------------------------

If you close a port from Erlang (using "Port ! {self(), close}"),
Erlang will kill the port program.  If you want to avoid getting your
port program killed, include a "quit" command in the port program,
and use it to close the port.  Example:

    Port ! {self(), {command, quit}}.

Issues for Windows 95
---------------------

In the current version port of Erlang, 4.4.1-alpha3, the following
issues are known:

* The distribution is not tested.

* Avoid using 16-bit port programs.  They might crash the system.
  Note that using unix:cmd/1 will execute a 16-bit program,
  since it uses the 16-bit command interpreter.

* The file:rename/2 function doesn't work, because it depends on the
  MoveFileEx() function that is implemented on Windows NT only.


Overview of the files/directories in the system
-----------------------------------------------

README    - this file.

bin       - the directory where all code that is to be executed
            directly is placed during the installation.

lib       - a number of "bundles" included in the release - each
            bundle lives in a subdirectory.  Most of them are written
            entirely in Erlang, but in some cases C programs are also
            used (these are copied to the bin directory during
            installation). The code server will automatically add the
            appropriate directory for each bundle to the search path.
            Some of the more noteworthy bundles:
            std - this is the standard library, with modules such as
            file, io, lists, etc.
            compiler - the Erlang compiler (of course)
            debugger - the Erlang debugger (ditto)
            For further information on these and the other bundles,
            please refer to the man pages.

doc       - The printed documentation in compressed PostScript format,
            and some code examples.

emulator  - The object code for the emulator itself is in the 'obj'
            subdirectory, along with a simple Makefile and a couple
            of source files that advanced users *may* be interested in
            changing - care should be taken, of course, since any
            changes may make the system non-functional. Refer to the
            "System Adminstrator's Guide" and "Additional Features"
            documents for some more information on this.

misc      - Some pieces that don't belong to any particular part of the
            system - e.g. the new erl_interface package, and an Erlang
            mode for emacs.

