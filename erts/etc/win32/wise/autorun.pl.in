#Win32-Perl-Only file. Associate .pl files with Perl or run with 'Perl filename.pl'

#
# Perl Script to automatically remove an Erlang installation and install a new one.
#
# Mattias Nilsson <mattias@erix.ericsson.se>
#

require 5.0;
require 'NT.ph';

my $debug = 1;
my $thisversion = "%ERTS_VSN%%SERIAL_NO%";          # Substituted at build time..
my $installation = "%EXE_FILE_NAME%";
my $realthisversion=$thisversion;
my $testdir = "C:\\temp\\test_suite";
my $erl = "erl";
my $erlopts = "-setcookie ntbuild -sname ntbuild_%SYSTEM_VSN% -pa . -noshell";
my $nthost = "beamish";

# Remove serial number 
$thisversion =~ s/_[0-9]*$//;

#&tests();
#exit 0;

&uninstall();

# Install the new version.
print STDOUT "Installing new Erlang package: ";
print STDOUT "$installation ...";
if (-f $installation) {
    system( "$installation /S" );
    print STDOUT "Done.\n";
} else {
    print STDOUT "Error! Could not find $installation\n";
    exit 2;
}

&sanity_checks();

#&tests();

exit 0;

sub reboot {
    local($rebootstr);
    $rebootstr = "$erl $erlopts -s ntbuild restart buildserver\@$nthost";
#    print "rebootstr: $rebootstr\n";
    system($rebootstr) ||
	die "Restart of NT system failed.";
}


sub tests {
    local($rootdir);

    print STDOUT "Going to test mode... \n";
    $rootdir=find_installed_version($realthisversion);
    $bindir=find_bindir($realthisversion);

    &debug("Root Dir: $rootdir\n");
    $epmd_str = "$bindir\\epmd.exe -daemon";
    $runstr = "$rootdir\\bin\\erl.exe -env central_log_dir N:\\ -s ts install -s ts run";

    # Run tests
    system("$bindir\\epmd.exe -deamon");
    open OUT, ">C:\\run_tests.bat";
    print OUT "cd $testdir\\test_server\n";
    print OUT "C:\n";
    print OUT "echo Testing\n";
    print OUT "$runstr -s erlang halt\n";
    close OUT;
    system("C:\\run_tests.bat");

    # Run Estone & Save results.
    open OUT, ">C:\\run_tests.bat";
    print OUT "cd $testdir\\test_server\n";
    print OUT "C:\n";
    print OUT "echo Testing\n";
    print OUT "$rootdir\\bin\\erl.exe -env central_log_dir N:\\ -s ts estone -s ts save\n";
    close OUT;
    system("C:\\run_tests.bat");

    # Stop epmd.
    system("$bindir\\epmd.exe -kill");
}


#
# Uninstall any previously installed Erlang matching the current version.
#
sub uninstall {
    local($rootdir);
    
    $rootdir=find_installed_version($thisversion);   # Match any serial ..

    if($rootdir) {
	print STDOUT "Found Erlang $corrver in $rootdir. Uninstalling...";
	system("\"$rootdir\\unwise.exe\" /S /A $rootdir\\INSTALL.LOG");
	print STDOUT "Done.\n";
	if(-d $testdir) {
	    print STDOUT "Found Test Suites in $testdir. Uninstalling...";
	    system("rm -rf $testdir");
	    print STDOUT "Done.\n";
	}
    }
    return( 1 );
}

sub sanity_checks() {
    local($rootdir);

    $rootdir=find_installed_version($realthisversion);   # Match exact serial ..

    print STDOUT "Performing sanity check on installed system... ($rootdir)";

    # Basic directory structure.
    die "Failed! (Root dir ($rootdir) not found) \n"
	unless -d $rootdir;
    die "Failed! (Lib dir not found) \n"
	unless -d "$rootdir\\lib";
    die "Failed! (Bin dir not found) \n"
	unless -d "$rootdir\\bin";
    die "Failed! (Misc dir not found) \n"
	unless -d "$rootdir\\misc";
    die "Failed! (Usr dir not found) \n"
	unless -d "$rootdir\\usr";
    die "Failed! (Usr\\Include dir not found) \n"
	unless -d "$rootdir\\usr\\include";
    die "Failed! (Usr\\lib dir not found) \n"
	unless -d "$rootdir\\usr\\lib";
    die "Failed! (Releases dir not found) \n"
	unless -d "$rootdir\\releases";

    # Executable files.
    die "Failed! (erl.exe binary not found) \n"
	unless -f "$rootdir\\bin\\erl.exe";
    die "Failed! (werl.exe binary not found) \n"
	unless -f "$rootdir\\bin\\werl.exe";
    die "Failed! (erlc.exe binary not found) \n"
	unless -f "$rootdir\\bin\\erlc.exe";

    # Boot scripts.
    die "Failed! (Default boot script not found) \n"
	unless -f "$rootdir\\bin\\start.boot";
    die "Failed! (SASL boot script not found) \n"
	unless -f "$rootdir\\bin\\start_sasl.boot";
    die "Failed! (Clean boot script not found) \n"
	unless -f "$rootdir\\bin\\start_clean.boot";

    print STDOUT "Ok.\n";
}


#
# Finds the rootdir of an installed version of Erlang matching
# the string given as argument.
#
sub find_installed_version() {
    local($i, $keyname, $Result, $vertomatch);

  Win32::RegOpenKeyEx(&HKEY_LOCAL_MACHINE, "SOFTWARE\\Ericsson\\Erlang",
		      &NULL, &KEY_READ, $ErlKey) ||
			  return;

    # Traverse all installed versions, searching for a matching version.
    # TODO: What to do if two matching versions exists ?
    $vertomatch=$_[0];
    &debug("vertomatch: $vertomatch\n");
    $i=0;
    $Result=1;
    while( $Result ) {
	$Result = Win32::RegEnumKey($ErlKey, $i++, $keyname);
	if( $Result ) {
	    &debug("Result: $keyname -> ");
	    if( $keyname =~ /^$vertomatch/ ) {
		$corrver=$keyname;
		$Result=0;
		&debug("Accepted.\n");
	    } else {
		&debug("Not accepted.\n");
	    }
	} else {
	    print STDOUT "Could not find any version matching $vertomatch in",
	    "  registry. Assuming no installation exists..\n";
 	  Win32::RegCloseKey($ErlKey);
	    return;
	}
    }

  Win32::RegCloseKey($ErlKey);

    # Found a version. Get RootDir.

    $corrkey="SOFTWARE\\Ericsson\\Erlang\\$corrver";
  Win32::RegOpenKeyEx(&HKEY_LOCAL_MACHINE, $corrkey,
		      &NULL, &KEY_READ, $VerKey) ||
			  die "Damaged registry, Could not open version key: ", $!;
    
  Win32::RegQueryValueEx($VerKey, 'Rootdir', &NULL, &NULL, $rootdir) ||
      die "Damaged registry (Could not get value for $corrver):$!.\n";
    
  Win32::RegCloseKey($VerKey);

    return $rootdir;
}




#
# Finds the rootdir of an installed version of Erlang matching
# the string given as argument.
#
sub find_bindir() {
    local($i, $keyname, $Result, $vertomatch);

  Win32::RegOpenKeyEx(&HKEY_LOCAL_MACHINE, "SOFTWARE\\Ericsson\\Erlang",
		      &NULL, &KEY_READ, $ErlKey) ||
			  return;

    # Traverse all installed versions, searching for a matching version.
    # TODO: What to do if two matching versions exists ?
    $vertomatch=$_[0];
    &debug("vertomatch: $vertomatch\n");
    $i=0;
    $Result=1;
    while( $Result ) {
	$Result = Win32::RegEnumKey($ErlKey, $i++, $keyname);
	if( $Result ) {
	    &debug("Result: $keyname -> ");
	    if( $keyname =~ /^$vertomatch/ ) {
		$corrver=$keyname;
		$Result=0;
		&debug("Accepted.\n");
	    } else {
		&debug("Not accepted.\n");
	    }
	} else {
	    print STDOUT "Could not find any version matching $vertomatch in",
		  "  registry. Assuming no installation exists..\n";
 	  Win32::RegCloseKey($ErlKey);
	    return;
	}
    }

  Win32::RegCloseKey($ErlKey);

    # Found a version. Get RootDir.

    $corrkey="SOFTWARE\\Ericsson\\Erlang\\$corrver";
  Win32::RegOpenKeyEx(&HKEY_LOCAL_MACHINE, $corrkey,
		      &NULL, &KEY_READ, $VerKey) ||
			  die "Damaged registry, Could not open version key: ", $!;
    
  Win32::RegQueryValueEx($VerKey, 'Bindir', &NULL, &NULL, $bindir) ||
      die "Damaged registry (Could not get value for $corrver):$!.\n";
    
  Win32::RegCloseKey($VerKey);

    return $bindir;
}

sub debug {
    print $_
	if defined $debug;
}
