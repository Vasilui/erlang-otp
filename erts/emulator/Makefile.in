# ``The contents of this file are subject to the Erlang Public License,
# Version 1.1, (the "License"); you may not use this file except in
# compliance with the License. You should have received a copy of the
# Erlang Public License along with this software. If not, it can be
# retrieved via the world wide web at http://www.erlang.org/.
# 
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
# the License for the specific language governing rights and limitations
# under the License.
# 
# The Initial Developer of the Original Code is Ericsson Utvecklings AB.
# Portions created by Ericsson are Copyright 1999, Ericsson Utvecklings
# AB. All Rights Reserved.''
# 
#     $Id$
#
include $(ERL_TOP)/make/target.mk
include ../vsn.mk

ENABLE_ALLOC_TYPE_VARS = @ENABLE_ALLOC_TYPE_VARS@
HIPE_ENABLED=@HIPE_ENABLED@

#
# Run this make file with TYPE set to the type of emulator you want.
# Different versions of the emulator for different uses. The default
# is "debug". For a normal version use "opt".
#
THR_LIB_SFX=
ifeq ($(TYPE),debug)
PURIFY =
TYPEMARKER = .debug
THR_LIB_SFX = .debug
TYPE_FLAGS = @DEBUG_CFLAGS@ -DDEBUG
ENABLE_ALLOC_TYPE_VARS += debug
ifeq ($(TARGET),win32)
TYPE_FLAGS += -DNO_JUMP_TABLE
LDFLAGS += -g
endif
else
ifeq ($(TYPE),shared)
PURIFY =
TYPEMARKER = .shared
TYPE_FLAGS = @CFLAGS@ -DSHARED_HEAP
ENABLE_ALLOC_TYPE_VARS += shared_heap
else
ifeq ($(TYPE),hybrid)
PURIFY =
TYPEMARKER = .hybrid
TYPE_FLAGS = @CFLAGS@ -DHYBRID
ENABLE_ALLOC_TYPE_VARS += hybrid
else
ifeq ($(TYPE),purify)
PURIFY = purify $(PURIFY_BUILD_OPTIONS)
TYPEMARKER = .purify
THR_LIB_SFX = .purify
TYPE_FLAGS = @CFLAGS@ -DPURIFY -DNO_JUMP_TABLE -DERTS_MSEG_FAKE_SEGMENTS
ENABLE_ALLOC_TYPE_VARS += purify
else
ifeq ($(TYPE),quantify)
PURIFY = quantify $(QUANTIFY_BUILD_OPTIONS)
TYPEMARKER = .quantify
THR_LIB_SFX = .quantify
ENABLE_ALLOC_TYPE_VARS += quantify
ifeq ($(findstring ose,$(TARGET)),ose)
  TYPE_FLAGS = @CFLAGS@ -DQUANTIFY
else
  TYPE_FLAGS = @CFLAGS@ -g -O2 -DQUANTIFY -DNO_JUMP_TABLE
endif
else
ifeq ($(TYPE),purecov)
PURIFY = purecov --follow-child-processes=yes $(PURECOV_BUILD_OPTIONS)
TYPEMARKER = .purecov
THR_LIB_SFX = .purecov
TYPE_FLAGS = @DEBUG_CFLAGS@ -DPURECOV -DNO_JUMP_TABLE
ENABLE_ALLOC_TYPE_VARS += purecov
else
TYPE=opt
PURIFY =
TYPEMARKER =
TYPE_FLAGS = @CFLAGS@
endif
endif
endif
endif
endif
endif

OPSYS=@OPSYS@
sol2CFLAGS=
linuxCFLAGS=
darwinCFLAGS=-DDARWIN
noopsysCFLAGS=
OPSYSCFLAGS=$($(OPSYS)CFLAGS)
ARCH=@ARCH@
ultrasparcCFLAGS=-Wa,-xarch=v8plusa
ARCHCFLAGS=$($(ARCH)CFLAGS)

ifdef HIPE_ENABLED
ifeq ($(OPSYS),linux)
ppcBEAMLDFLAGS=-Wl,-m,elf32ppc
ppc64BEAMLDFLAGS=-Wl,-m,elf64ppc,-T,hipe/elf64ppc.x
endif
HIPEBEAMLDFLAGS=$($(ARCH)BEAMLDFLAGS)
endif

#
#
#
SHELL   = /bin/sh
CC      = @CC@
ifeq ($(TARGET),win32)
ifeq ($(TYPE),debug)
EMU_CC  = @CC@
else
EMU_CC  = @EMU_CC@
endif
TYPE_FLAGS += -DSTATIC_ERLANG_DRIVER
else
EMU_CC  = @EMU_CC@
endif
WFLAGS  = @WFLAGS@
CFLAGS  = @STATIC_CFLAGS@ $(TYPE_FLAGS) @DEFS@ $(WFLAGS) @EMU_THR_DEFS@ $(ARCHCFLAGS)
HCC     = @HCC@
LD      = @LD@
DEXPORT = @DEXPORT@
RANLIB  = @RANLIB@
STRIP   = strip
PERL    = @PERL@

ifeq ($(CC), gcc)
GEN_OPT_FLGS = -O3 -fomit-frame-pointer
UNROLL_FLG = -funroll-loops
else
ifeq ($(TARGET), win32)
GEN_OPT_FLGS = -O3 
UNROLL_FLG = 
RC=rc.sh
else
GEN_OPT_FLGS = 
UNROLL_FLG = 
RC=false
endif
endif


ifdef PURIFY_CHILD_SETUP
CS_PURIFY = $(PURIFY)
CS_TYPE_FLAGS = $(TYPE_FLAGS)
else
CS_PURIFY = 
CS_TYPE_FLAGS = $(subst QUANTIFY,FAKE_QUANTIFY, \
		$(subst PURIFY,FAKE_PURIFY, $(TYPE_FLAGS)))
endif
CS_CFLAGS_ = $(CS_TYPE_FLAGS) @DEFS@ $(WFLAGS) 
ifeq ($(CC), gcc)
CS_CFLAGS = $(subst -O2, $(GEN_OPT_FLGS) $(UNROLL_FLG), $(CS_CFLAGS_))
else
CS_CFLAGS = $(CS_CFLAGS_)
endif

LIBS	= @LIBS@ @TERMCAP_LIB@ -L../lib/internal/$(TARGET)
ifeq ($(TARGET),win32)
LIBS    += -L$(ERL_TOP)/erts/obj$(TYPEMARKER)/$(TARGET) -lz
else
# Build on darwin fails if -lz is used
LIBS    += $(ERL_TOP)/erts/obj/$(TARGET)/libz.a
endif

ELIB_FLAGS = -DENABLE_ELIB_MALLOC -DELIB_ALLOC_IS_CLIB -DELIB_HEAP_SBRK

PERFCTR_PATH=@PERFCTR_PATH@
USE_PERFCTR=@USE_PERFCTR@
ifdef PERFCTR_PATH
LIBS += $(PERFCTR_PATH)/usr.lib/libperfctr.a
else
ifdef USE_PERFCTR
LIBS += -lperfctr
endif
endif

ORG_THR_LIBS=@EMU_THR_LIBS@
THR_LIB_NAME=@EMU_THR_LIB_NAME@

THR_LIBS=$(subst -l$(THR_LIB_NAME),-l$(THR_LIB_NAME)$(THR_LIB_SFX),$(ORG_THR_LIBS))

LIBS += $(THR_LIBS)

LIBS += @LIBRT@

TARGET_TYPE_DIR=$(TARGET)/$(TYPE)

OBJDIR = $(ERL_TOP)/erts/obj$(TYPEMARKER).beam/$(TARGET)
BINDIR = $(ERL_TOP)/bin/$(TARGET)

ERLANG_OSTYPE = @ERLANG_OSTYPE@

ENABLE_ALLOC_TYPE_VARS += @ERLANG_OSTYPE@

EMULATOR_EXECUTABLE_SAE = beam_evm$(TYPEMARKER)
EMULATOR_EXECUTABLE_ELIB = beam.elib$(TYPEMARKER)
ifeq ($(TARGET), win32)
EMULATOR_EXECUTABLE = beam$(TYPEMARKER).dll
else
EMULATOR_EXECUTABLE = beam$(TYPEMARKER)
endif
CS_EXECUTABLE = child_setup$(TYPEMARKER)

# ----------------------------------------------------------------------
include $(ERL_TOP)/make/$(TARGET)/otp.mk

ifeq ($(ERLANG_OSTYPE), unix)
UNIX_ONLY_BUILDS =	$(BINDIR)/$(CS_EXECUTABLE)
else
UNIX_ONLY_BUILDS =
endif

all: generate erts_lib zlib $(BINDIR)/$(EMULATOR_EXECUTABLE) $(UNIX_ONLY_BUILDS)

zlib:
	@set -e ; cd zlib && $(MAKE) $(TYPE)

erts_lib:
	cd $(ERL_TOP)/erts/lib_src && $(MAKE) $(TYPE)

clean:
	rm -f $(TARGET)/*/*.c $(TARGET)/*/*.h
	rm -f $(TARGET)/*.c $(TARGET)/*.h $(TARGET)/depend.mk
	rm -f $(ERL_TOP)/erts/obj.*beam/$(TARGET)/*.o

.PHONY: all sae zlib clean

docs:

# ----------------------------------------------------------------------
include $(ERL_TOP)/make/otp_release_targets.mk

RELSYSDIR = $(RELEASE_PATH)/erts-$(VSN)

RELEASE_INCLUDES = beam/erl_driver.h sys/$(ERLANG_OSTYPE)/driver_int.h 
ifeq ($(TARGET),win32)
RELEASE_INCLUDES += sys/$(ERLANG_OSTYPE)/erl_win_dyn_driver.h
endif
ifeq ($(findstring ose,$(TARGET)),ose)
RELEASE_INCLUDES += sys/$(ERLANG_OSTYPE)/erl_port_signals.sig \
		    sys/$(ERLANG_OSTYPE)/ose_erl_port_prog.h  \
		    drivers/$(ERLANG_OSTYPE)/ose_erl_driver.h

endif

release_spec: all
	$(INSTALL_DIR) $(RELSYSDIR)
	$(INSTALL_DIR) $(RELSYSDIR)/src
	$(INSTALL_DIR) $(RELSYSDIR)/include
	$(INSTALL_DIR) $(RELSYSDIR)/man
	$(INSTALL_DIR) $(RELSYSDIR)/doc
	$(INSTALL_DIR) $(RELSYSDIR)/bin
	$(INSTALL_DIR) $(RELEASE_PATH)/usr/include
	$(INSTALL_DATA) $(RELEASE_INCLUDES) $(RELEASE_PATH)/usr/include
	$(INSTALL_DATA) $(RELEASE_INCLUDES) $(RELSYSDIR)/include
	$(INSTALL_PROGRAM) $(BINDIR)/$(EMULATOR_EXECUTABLE) $(RELSYSDIR)/bin
ifeq ($(ERLANG_OSTYPE), unix)
	$(INSTALL_PROGRAM) $(BINDIR)/$(CS_EXECUTABLE) $(RELSYSDIR)/bin
endif
	$(INSTALL_DIR) $(RELEASE_PATH)/usr/include/obsolete
	$(INSTALL_DATA) obsolete/driver.h $(RELEASE_PATH)/usr/include/obsolete

release_docs_spec:

# ----------------------------------------------------------------------
# Generated source code. Put in $(TARGET) directory
#

.PHONY : generate

ifeq ($(TARGET),win32)
generate: $(TARGET)/beam_opcodes.h $(TARGET)/erl_bif_table.c \
		$(TARGET)/erl_version.h \
		$(TARGET)/driver_tab.c $(TARGET)/beams.rc \
		$(TARGET_TYPE_DIR)/erl_alloc_types.h \
		$(HIPE_GENERATE)
else
generate: $(TARGET)/beam_opcodes.h $(TARGET)/erl_bif_table.c \
		$(TARGET)/erl_version.h \
		$(TARGET)/driver_tab.c $(TARGET)/preload.c \
		$(TARGET_TYPE_DIR)/erl_alloc_types.h \
		$(HIPE_GENERATE)
endif

ifeq ($(findstring vxworks,$(TARGET)),vxworks)
HIPE_GENERATE =
else
ifeq ($(findstring ose,$(TARGET)),ose)
HIPE_GENERATE =
else

HIPE_GENERATE = $(BINDIR)/hipe_mkliterals$(TYPEMARKER)

generate: $(TARGET)/hipe_x86_asm.h
generate: $(TARGET)/hipe_amd64_asm.h
generate: $(TARGET)/hipe_ppc_asm.h
generate: $(TARGET)/hipe_arm_asm.h
generate: $(TARGET_TYPE_DIR)/hipe_literals.h

endif
endif

# opcode table

OPCODE_TABLES = $(ERL_TOP)/lib/compiler/src/genop.tab beam/ops.tab
ifdef HIPE_ENABLED
OPCODE_TABLES += hipe/hipe_ops.tab
endif

$(TARGET)/beam_opcodes.h $(TARGET)/beam_opcodes.c: $(OPCODE_TABLES)
	LANG=C $(PERL) utils/beam_makeops -outdir $(TARGET) \
		-emulator $(OPCODE_TABLES)

# bif and atom table
ATOMS=	beam/atom.names
BIFS =	beam/bif.tab
ifdef HIPE_ENABLED
HIPE_ultrasparc_TAB=hipe/hipe_sparc.tab
HIPE_x86_TAB=hipe/hipe_x86.tab
HIPE_amd64_TAB=hipe/hipe_amd64.tab
HIPE_ppc_TAB=hipe/hipe_ppc.tab
HIPE_ppc64_TAB=hipe/hipe_ppc64.tab
HIPE_arm_TAB=hipe/hipe_arm.tab
HIPE_ARCH_TAB=$(HIPE_$(ARCH)_TAB)
BIFS += hipe/hipe_bif0.tab hipe/hipe_bif1.tab hipe/hipe_bif2.tab $(HIPE_ARCH_TAB)
ifdef USE_PERFCTR
BIFS += hipe/hipe_perfctr.tab
endif
endif

TABLES=	$(TARGET)/erl_bif_table.c $(TARGET)/erl_bif_table.h	\
	$(TARGET)/erl_bif_wrap.c $(TARGET)/erl_bif_list.h	\
	$(TARGET)/erl_atom_table.c $(TARGET)/erl_atom_table.h   \
	$(TARGET)/erl_pbifs.c

$(TABLES):	$(ATOMS) $(BIFS)
	LANG=C $(PERL) utils/make_tables -src $(TARGET) -include $(TARGET) $^

$(TARGET_TYPE_DIR)/erl_alloc_types.h: beam/erl_alloc.types utils/make_alloc_types
	LANG=C $(PERL) utils/make_alloc_types -src $< -dst $@ $(ENABLE_ALLOC_TYPE_VARS)

# version include file
$(TARGET)/erl_version.h: ../vsn.mk
	LANG=C $(PERL) utils/make_version -o $@ $(SYSTEM_VSN) $(VSN)$(SERIALNO) $(TARGET)

# driver table
$(TARGET)/driver_tab.c:	Makefile.in
	LANG=C $(PERL) utils/make_driver_tab -o $@ $(DRV_OBJS)

# preloaded code
# Note: if you change this list, also change RELSRC_PRELOAD in
#       /clearcase/otp/system/build/Makefile
ifeq ($(TARGET),win32)
$(TARGET)/beams.rc: $(ERL_TOP)/lib/kernel/ebin/otp_ring0.beam \
			$(ERL_TOP)/lib/kernel/ebin/init.beam \
			$(ERL_TOP)/lib/kernel/ebin/prim_inet.beam \
			$(ERL_TOP)/lib/kernel/ebin/prim_file.beam \
			$(ERL_TOP)/lib/kernel/ebin/erl_prim_loader.beam \
			$(ERL_TOP)/lib/kernel/ebin/erlang.beam
	LANG=C $(PERL) utils/make_preload -rc $^ > $@
else
$(TARGET)/preload.c: $(ERL_TOP)/lib/kernel/ebin/otp_ring0.beam \
			$(ERL_TOP)/lib/kernel/ebin/init.beam \
			$(ERL_TOP)/lib/kernel/ebin/prim_inet.beam \
			$(ERL_TOP)/lib/kernel/ebin/prim_file.beam \
			$(ERL_TOP)/lib/kernel/ebin/erl_prim_loader.beam \
			$(ERL_TOP)/lib/kernel/ebin/erlang.beam
	LANG=C $(PERL) utils/make_preload -old $^ > $@
endif

# ----------------------------------------------------------------------
# Pattern rules
#
INCLUDES  = -Ibeam -Isys/$(ERLANG_OSTYPE) -Isys/common -I$(TARGET) -I$(TARGET_TYPE_DIR) -Izlib -Ihipe -I../include/internal -I../include/internal/$(TARGET)

ifdef PERFCTR_PATH
INCLUDES += -I$(PERFCTR_PATH)/usr.lib -I$(PERFCTR_PATH)/linux/include
endif

# Need to include etc dir on VxWorks
ifeq ($(findstring vxworks,$(TARGET)),vxworks)
INCLUDES += -I$(ERL_TOP)/erts/etc/vxworks
endif

ifneq ($(findstring ose,$(TARGET)),ose)
ifeq ($(TARGET),win32)
# Usually the same as the default rule, but certain platforms (i.e. win32) mix
# different compilers
$(OBJDIR)/beam_emu.o: beam/beam_emu.c
	$(EMU_CC) $(subst -O2, $(GEN_OPT_FLGS), $(CFLAGS)) $(INCLUDES) -c $< -o $@

$(OBJDIR)/dll_sys.o: sys/$(ERLANG_OSTYPE)/sys.c
	$(CC) $(CFLAGS) -DERL_RUN_SHARED_LIB=1 $(INCLUDES) -c $< -o $@

$(OBJDIR)/beams.res: $(TARGET)/beams.rc
	$(RC) -o$@  -I$(ERL_TOP)/erts/etc/win32 $(TARGET)/beams.rc 

endif

$(OBJDIR)/%.o: beam/%.c
	$(CC) $(subst -O2, $(GEN_OPT_FLGS), $(CFLAGS)) $(INCLUDES) -c $< -o $@

else

INCLUDES += -Idrivers/ose

ifeq ($(TYPE),debug)
$(OBJDIR)/%.o: beam/%.c
	  $(CC) $(CFLAGS) -DNO_JUMP_TABLE $(INCLUDES) -c $< -o $@
else

VXCC=@VXCC@
VXCFLAGS=@VXCFLAGS@
CFLAGS_NOOPT=@CFLAGS_NOOPT@ @DEFS@ $(WFLAGS) @EMU_THR_DEFS@ $(ARCHCFLAGS)

# we want to use jump table
$(OBJDIR)/beam_emu.o: beam/beam_emu.c
	$(VXCC) $(VXCFLAGS) $(INCLUDES) -c $< -o $@

# ggc and erl_process do not work properly with DIAB's -XO option,
# we'll compile them with gcc instead
$(OBJDIR)/ggc.o: beam/ggc.c
	$(VXCC) $(VXCFLAGS) $(INCLUDES) -c $< -o $@
$(OBJDIR)/erl_process.o: beam/erl_process.c
	$(VXCC) $(VXCFLAGS) $(INCLUDES) -c $< -o $@

$(OBJDIR)/%.o: beam/%.c
	$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $@
endif
endif

$(OBJDIR)/%.o: $(TARGET)/%.c
	$(CC) $(CFLAGS) $(INCLUDES) -Idrivers/common -c $< -o $@

$(OBJDIR)/%.o: sys/$(ERLANG_OSTYPE)/%.c
	$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $@

$(OBJDIR)/%.o: sys/common/%.c
	$(CC) $(subst -O2, $(GEN_OPT_FLGS), $(CFLAGS)) $(INCLUDES) -c $< -o $@

$(OBJDIR)/%.o: drivers/common/%.c
	$(CC) $(CFLAGS) $(INCLUDES) -Idrivers/common -Idrivers/$(ERLANG_OSTYPE) -c $< -o $@

$(OBJDIR)/%.o: drivers/$(ERLANG_OSTYPE)/%.c
	$(CC) $(CFLAGS) $(INCLUDES) -Idrivers/common -Idrivers/$(ERLANG_OSTYPE) -I../etc/$(ERLANG_OSTYPE) -c $< -o $@

# VxWorks and OSE uses unix drivers too...
ifeq ($(findstring vxworks,$(TARGET)),vxworks)
$(OBJDIR)/%.o: drivers/unix/%.c
	$(CC) $(CFLAGS) $(INCLUDES) -Idrivers/common -c $< -o $@
endif
ifeq ($(findstring ose,$(TARGET)),ose)
$(OBJDIR)/%.o: drivers/unix/%.c
	$(CC) $(CFLAGS) $(INCLUDES) -Idrivers/common -c $< -o $@
endif

# ----------------------------------------------------------------------
# Specials
#
CS_SRC = sys/$(ERLANG_OSTYPE)/erl_child_setup.c

$(BINDIR)/$(CS_EXECUTABLE): $(CS_SRC)
	$(CS_PURIFY) $(CC) -o $(BINDIR)/$(CS_EXECUTABLE) \
	$(CS_CFLAGS) $(INCLUDES) $(CS_SRC)

$(OBJDIR)/%.elib.o: beam/%.c
	$(CC) $(ELIB_FLAGS) $(subst -O2, $(GEN_OPT_FLGS), $(CFLAGS)) $(INCLUDES) -c $< -o $@

# Disable vfork() for sae (then we don't need the child_setup program)
$(OBJDIR)/sys_sae.o: sys/$(ERLANG_OSTYPE)/sys.c
	$(CC) -DDISABLE_VFORK=1 $(CFLAGS) $(INCLUDES) -c $< -o $@

ifeq ($(CC), gcc)

$(OBJDIR)/erl_obsolete.o: beam/erl_obsolete.c
	$(CC) $(subst -Wstrict-prototypes, , $(subst -O2, $(GEN_OPT_FLGS), $(CFLAGS))) $(INCLUDES) -c $< -o $@

$(OBJDIR)/erl_goodfit_alloc.o: beam/erl_goodfit_alloc.c
	$(CC) $(subst -O2, $(GEN_OPT_FLGS) $(UNROLL_FLG), $(CFLAGS)) $(INCLUDES) -c $< -o $@
endif

# ----------------------------------------------------------------------
# Build necessary beam files if they are not already in place. To force
# rebuilding (is this a good idea?) add a dummy dependency to this target.
#

$(ERL_TOP)/lib/%.beam:
	cd $(@D)/../src && $(MAKE) ../ebin/$(@F)


# ----------------------------------------------------------------------
# Object files
#

# On windows the preloaded objects are in a resource object.

ifeq ($(TARGET),win32)
PRELOAD =	$(OBJDIR)/beams.res
else
PRELOAD = 	$(OBJDIR)/preload.o
endif


INIT_OBJS = $(OBJDIR)/erl_main.o		$(PRELOAD)

INIT_OBJS_SAE = $(OBJDIR)/erl9_start.o

EMU_OBJS = \
	$(OBJDIR)/beam_emu.o		$(OBJDIR)/beam_opcodes.o \
	$(OBJDIR)/beam_load.o		$(OBJDIR)/beam_bif_load.o \
	$(OBJDIR)/beam_debug.o		$(OBJDIR)/beam_bp.o \
	$(OBJDIR)/beam_catches.o

RUN_OBJS = \
	$(OBJDIR)/erl_pbifs.o		$(OBJDIR)/benchmark.o \
	$(OBJDIR)/erl_alloc.o		$(OBJDIR)/erl_mtrace.o \
	$(OBJDIR)/erl_alloc_util.o	$(OBJDIR)/erl_goodfit_alloc.o \
	$(OBJDIR)/erl_bestfit_alloc.o	$(OBJDIR)/erl_afit_alloc.o \
	$(OBJDIR)/erl_instrument.o	$(OBJDIR)/erl_init.o \
	$(OBJDIR)/erl_atom_table.o	$(OBJDIR)/erl_bif_table.o \
	$(OBJDIR)/erl_bif_info.o	$(OBJDIR)/erl_bif_op.o \
	$(OBJDIR)/erl_bif_os.o		$(OBJDIR)/erl_bif_lists.o \
	$(OBJDIR)/erl_bif_trace.o	$(OBJDIR)/erl_bif_wrap.o \
	$(OBJDIR)/erl_trace.o		$(OBJDIR)/copy.o \
	$(OBJDIR)/utils.o		$(OBJDIR)/bif.o \
	$(OBJDIR)/io.o			$(OBJDIR)/erl_bif_timer.o \
	$(OBJDIR)/erl_debug.o		$(OBJDIR)/erl_md5.o \
	$(OBJDIR)/erl_message.o		$(OBJDIR)/erl_process.o \
	$(OBJDIR)/erl_process_dict.o	$(OBJDIR)/erl_arith.o \
	$(OBJDIR)/time.o		$(OBJDIR)/erl_time_sup.o  \
	$(OBJDIR)/external.o		$(OBJDIR)/dist.o \
	$(OBJDIR)/binary.o		$(OBJDIR)/erl_db.o \
	$(OBJDIR)/erl_db_util.o		$(OBJDIR)/erl_db_hash.o \
	$(OBJDIR)/erl_db_tree.o		$(OBJDIR)/fix_alloc.o \
	$(OBJDIR)/big.o			$(OBJDIR)/hash.o \
	$(OBJDIR)/index.o		$(OBJDIR)/atom.o \
	$(OBJDIR)/module.o		$(OBJDIR)/export.o \
	$(OBJDIR)/register.o		$(OBJDIR)/break.o \
	$(OBJDIR)/erl_async.o \
	$(OBJDIR)/ggc.o 		$(OBJDIR)/erl_gc.o \
	$(OBJDIR)/erl_nmgc.o		$(OBJDIR)/erl_posix_str.o \
	$(OBJDIR)/erl_bits.o 		$(OBJDIR)/erl_math.o \
	$(OBJDIR)/erl_fun.o             $(OBJDIR)/erl_bif_port.o \
	$(OBJDIR)/erl_term.o 		$(OBJDIR)/erl_node_tables.o \
	$(OBJDIR)/erl_monitors.o	$(OBJDIR)/erl_process_dump.o \
	$(OBJDIR)/erl_obsolete.o 

ifeq ($(TARGET),win32)
DRV_OBJS = \
	$(OBJDIR)/registry_drv.o \
	$(OBJDIR)/ddll_drv.o \
	$(OBJDIR)/efile_drv.o \
	$(OBJDIR)/inet_drv.o \
	$(OBJDIR)/zlib_drv.o \
	$(OBJDIR)/ram_file_drv.o
OS_OBJS = \
	$(OBJDIR)/win_ddll_drv.o \
	$(OBJDIR)/win_efile.o \
	$(OBJDIR)/win_con.o \
	$(OBJDIR)/dll_sys.o \
	$(OBJDIR)/driver_tab.o \
	$(OBJDIR)/gzio.o \
	$(OBJDIR)/sys_float.o \
	$(OBJDIR)/sys_time.o \
	$(OBJDIR)/sys_select.o \
	$(OBJDIR)/sys_env.o \
	$(OBJDIR)/dosmap.o \
	$(OBJDIR)/elib_malloc.o

else
OS_OBJS = \
	$(OBJDIR)/sys.o \
	$(OBJDIR)/driver_tab.o \
	$(OBJDIR)/unix_efile.o \
	$(OBJDIR)/gzio.o \
	$(OBJDIR)/elib_malloc.o \
	$(OBJDIR)/elib_memmove.o

ifeq ($(findstring ose,$(TARGET)),ose)
	OS_OBJS += $(OBJDIR)/ose_ddll_drv.o \
		   $(OBJDIR)/erl_port_init.o \
		   $(OBJDIR)/ose_inet_sock_select.o \
		   $(OBJDIR)/ose_sfp.o
else
ifeq ($(findstring vxworks,$(TARGET)),vxworks)
	OS_OBJS += $(OBJDIR)/vxworks_ddll_drv.o \
                    $(OBJDIR)/int64.o 
else
	OS_OBJS += $(OBJDIR)/unix_ddll_drv.o \
                   $(OBJDIR)/sys_float.o \
                   $(OBJDIR)/sys_time.o
endif
endif
DRV_OBJS = \
	$(OBJDIR)/efile_drv.o \
	$(OBJDIR)/ddll_drv.o \
	$(OBJDIR)/inet_drv.o \
	$(OBJDIR)/zlib_drv.o \
	$(OBJDIR)/ram_file_drv.o
endif

ifneq ($(findstring vxworks,$(TARGET)),vxworks)
  ifeq ($(findstring ose,$(TARGET)),ose)
	DRV_OBJS += $(OBJDIR)/ose_inet_drv.o
  else
	DRV_OBJS += $(OBJDIR)/ttsl_drv.o
  endif
endif

OS_OBJS += $(OBJDIR)/erl_mseg.o

HIPE_ultrasparc_OBJS=$(OBJDIR)/hipe_sparc.o $(OBJDIR)/hipe_sparc_glue.o $(OBJDIR)/hipe_sparc_bifs.o $(OBJDIR)/hipe_sparc_stack.o
HIPE_x86_OBJS=$(OBJDIR)/hipe_x86.o $(OBJDIR)/hipe_x86_glue.o $(OBJDIR)/hipe_x86_bifs.o $(OBJDIR)/hipe_x86_signal.o $(OBJDIR)/hipe_x86_stack.o
HIPE_amd64_OBJS=$(OBJDIR)/hipe_amd64.o $(OBJDIR)/hipe_amd64_glue.o $(OBJDIR)/hipe_amd64_bifs.o $(OBJDIR)/hipe_x86_signal.o $(OBJDIR)/hipe_x86_stack.o
HIPE_ppc_OBJS=$(OBJDIR)/hipe_ppc.o $(OBJDIR)/hipe_ppc_glue.o $(OBJDIR)/hipe_ppc_bifs.o $(OBJDIR)/hipe_ppc_stack.o
HIPE_ppc64_OBJS=$(HIPE_ppc_OBJS)
HIPE_arm_OBJS=$(OBJDIR)/hipe_arm.o $(OBJDIR)/hipe_arm_glue.o $(OBJDIR)/hipe_arm_bifs.o $(OBJDIR)/hipe_arm_stack.o
HIPE_noarch_OBJS=
HIPE_ARCH_OBJS=$(HIPE_$(ARCH)_OBJS)

HIPE_OBJS= \
	$(OBJDIR)/hipe_bif0.o \
	$(OBJDIR)/hipe_bif1.o \
	$(OBJDIR)/hipe_bif2.o \
	$(OBJDIR)/hipe_debug.o \
	$(OBJDIR)/hipe_gc.o \
	$(OBJDIR)/hipe_mode_switch.o \
	$(OBJDIR)/hipe_native_bif.o \
	$(OBJDIR)/hipe_stack.o $(HIPE_ARCH_OBJS)
ifdef USE_PERFCTR
HIPE_OBJS += $(OBJDIR)/hipe_perfctr.o
endif
ifdef HIPE_ENABLED
EXTRA_BASE_OBJS += $(HIPE_OBJS)
endif

BASE_OBJS = $(RUN_OBJS) $(EMU_OBJS) $(OS_OBJS) $(EXTRA_BASE_OBJS)

OBJS =	$(BASE_OBJS) $(DRV_OBJS)
OBJS_SAE =  $(subst sys.o,sys_sae.o,$(OBJS))

ELIB_C_FILES =	beam/elib_malloc.c \
		beam/elib_memmove.c \
		beam/erl_bif_info.c \
		beam/utils.c \
		beam/erl_alloc.c

MOD_OBJS_ELIB =	$(patsubst %.c,$(OBJDIR)/%.o,$(notdir $(ELIB_C_FILES)))
OBJS_ELIB = 	$(patsubst %.o,%.elib.o,$(MOD_OBJS_ELIB)) \
		$(filter-out $(MOD_OBJS_ELIB),$(OBJS))

########################################
# HiPE section

M4FLAGS=-DTARGET=$(TARGET) -DOPSYS=$(OPSYS) -DARCH=$(ARCH)

$(TARGET)/%.S: hipe/%.m4
	m4 $(M4FLAGS) $< > $@

$(TARGET)/%.h: hipe/%.m4
	m4 $(M4FLAGS) $< > $@

$(OBJDIR)/%.o: $(TARGET)/%.S
	$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $@

$(OBJDIR)/%.o: hipe/%.S
	$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $@

$(OBJDIR)/%.o: hipe/%.c
	$(CC) $(subst O2,O3, $(CFLAGS)) $(INCLUDES) -c $< -o $@

$(BINDIR)/hipe_mkliterals$(TYPEMARKER):	$(OBJDIR)/hipe_mkliterals.o
	$(CC) $(CFLAGS) $(INCLUDES) -o $@ $<

$(OBJDIR)/hipe_mkliterals.o:	$(TARGET)/hipe_x86_asm.h $(TARGET)/hipe_ppc_asm.h

$(TARGET_TYPE_DIR)/hipe_literals.h:	$(BINDIR)/hipe_mkliterals$(TYPEMARKER)
	$(BINDIR)/hipe_mkliterals$(TYPEMARKER) -c > $@

$(OBJDIR)/hipe_sparc_glue.o:	hipe/hipe_sparc_glue.S hipe/hipe_sparc_asm.h hipe/hipe_mode_switch.h $(TARGET_TYPE_DIR)/hipe_literals.h
$(TARGET)/hipe_sparc_bifs.S:	hipe/hipe_sparc_bifs.m4 hipe/hipe_bif_list.m4 $(TARGET)/erl_bif_list.h hipe/hipe_gbif_list.h
$(OBJDIR)/hipe_sparc_bifs.o:	$(TARGET)/hipe_sparc_bifs.S hipe/hipe_sparc_asm.h hipe/hipe_mode_switch.h $(TARGET_TYPE_DIR)/hipe_literals.h

$(OBJDIR)/hipe_x86_glue.o:	hipe/hipe_x86_glue.S $(TARGET)/hipe_x86_asm.h $(TARGET_TYPE_DIR)/hipe_literals.h hipe/hipe_mode_switch.h
$(TARGET)/hipe_x86_bifs.S:	hipe/hipe_x86_bifs.m4 hipe/hipe_x86_asm.m4 hipe/hipe_bif_list.m4 $(TARGET)/erl_bif_list.h hipe/hipe_gbif_list.h
$(OBJDIR)/hipe_x86_bifs.o:	$(TARGET)/hipe_x86_bifs.S $(TARGET_TYPE_DIR)/hipe_literals.h

$(OBJDIR)/hipe_amd64_glue.o:	hipe/hipe_amd64_glue.S $(TARGET)/hipe_amd64_asm.h $(TARGET_TYPE_DIR)/hipe_literals.h hipe/hipe_mode_switch.h
$(TARGET)/hipe_amd64_bifs.S:	hipe/hipe_amd64_bifs.m4 hipe/hipe_amd64_asm.m4 hipe/hipe_bif_list.m4 $(TARGET)/erl_bif_list.h hipe/hipe_gbif_list.h
$(OBJDIR)/hipe_amd64_bifs.o:	$(TARGET)/hipe_amd64_bifs.S $(TARGET_TYPE_DIR)/hipe_literals.h

$(OBJDIR)/hipe_ppc_glue.o:	hipe/hipe_ppc_glue.S $(TARGET)/hipe_ppc_asm.h hipe/hipe_mode_switch.h $(TARGET_TYPE_DIR)/hipe_literals.h
$(TARGET)/hipe_ppc_bifs.S:	hipe/hipe_ppc_bifs.m4 hipe/hipe_ppc_asm.m4 hipe/hipe_bif_list.m4 $(TARGET)/erl_bif_list.h hipe/hipe_gbif_list.h
$(OBJDIR)/hipe_ppc_bifs.o:	$(TARGET)/hipe_ppc_bifs.S $(TARGET_TYPE_DIR)/hipe_literals.h

$(OBJDIR)/hipe_arm_glue.o:	hipe/hipe_arm_glue.S $(TARGET)/hipe_arm_asm.h hipe/hipe_mode_switch.h $(TARGET_TYPE_DIR)/hipe_literals.h
$(TARGET)/hipe_arm_bifs.S:	hipe/hipe_arm_bifs.m4 hipe/hipe_arm_asm.m4 hipe/hipe_bif_list.m4 $(TARGET)/erl_bif_list.h hipe/hipe_gbif_list.h
$(OBJDIR)/hipe_arm_bifs.o:	$(TARGET)/hipe_arm_bifs.S $(TARGET_TYPE_DIR)/hipe_literals.h

# end of HiPE section
########################################

ifeq ($(findstring vxworks,$(TARGET)),vxworks)
########################################
# Extract what we need from libgcc.a
########################################
GCCLIBFLAGS=@GCCLIBFLAGS@
STRIP=@STRIP@
SYMPREFIX=@SYMPREFIX@

NEEDFUNCTIONS=__divdi3 __moddi3
KEEPSYMS=$(NEEDFUNCTIONS:%=-K $(SYMPREFIX)%)

$(OBJDIR)/int64.o: $(TARGET)/int64.c
	$(CC) -o $(OBJDIR)/int64tmp.o -c $(TARGET)/int64.c
	$(LD) -o $(OBJDIR)/int64.o $(OBJDIR)/int64tmp.o $(LDFLAGS) $(GCCLIBFLAGS)
	$(STRIP) $(KEEPSYMS) $(OBJDIR)/int64.o

$(TARGET)/int64.c:
	echo 'void dummy(void); void dummy(void) {' > $(TARGET)/int64.c
	for x in $(NEEDFUNCTIONS); do echo 'extern void '$$x'();' \
		>> $(TARGET)/int64.c; done 
	for x in $(NEEDFUNCTIONS); do echo $$x'();' >> $(TARGET)/int64.c; done
	echo '}'  >> $(TARGET)/int64.c 

endif

ifeq ($(findstring ose,$(TARGET)),ose)
# Extract soft float functions from libgcc.a (for beam_emu)
VXCC=@VXCC@
VXCFLAGS=@VXCFLAGS@
VXLD=@VXLD@
VXLDFLAGS=@VXLDFLAGS@
VXCCLIBFLAGS=@VXCCLIBFLAGS@
STRIP=@STRIP@
SYMPREFIX=@SYMPREFIX@

NEEDFUNCTIONS=__floatsidf __adddf3 __negdf2 __muldf3 __divdf3 __subdf3
KEEPSYMS=$(NEEDFUNCTIONS:%=-K $(SYMPREFIX)%)

$(OBJDIR)/ose_sfp.o: $(TARGET)/ose_sfp.c
	$(VXCC) $(VXCFLAGS) -o $(OBJDIR)/ose_sfp_tmp.o -c $(TARGET)/ose_sfp.c
	$(VXLD) -o $(OBJDIR)/ose_sfp.o $(OBJDIR)/ose_sfp_tmp.o $(VXLDFLAGS) $(VXCCLIBFLAGS)
	$(STRIP) $(KEEPSYMS) $(OBJDIR)/ose_sfp.o

$(TARGET)/ose_sfp.c:
	echo 'void dummy(void); void dummy(void) {' > $(TARGET)/ose_sfp.c
	for x in $(NEEDFUNCTIONS); do echo 'extern void '$$x'();' \
		>> $(TARGET)/ose_sfp.c; done 
	for x in $(NEEDFUNCTIONS); do echo $$x'();' >> $(TARGET)/ose_sfp.c; done
	echo '}'  >> $(TARGET)/ose_sfp.c 

endif

# ----------------------------------------------------------------------
# The emulator itself

ifeq ($(TARGET), win32)
# Only the basic erlang to begin with eh?
$(BINDIR)/$(EMULATOR_EXECUTABLE): $(INIT_OBJS) $(OBJS)
	$(PURIFY) $(LD) -dll -def:sys/$(ERLANG_OSTYPE)/erl.def -implib:$(BINDIR)/erl_dll.lib -o $(BINDIR)/$(EMULATOR_EXECUTABLE) \
	$(LDFLAGS) $(DEXPORT) $(INIT_OBJS) $(OBJS) $(LIBS)
else


$(BINDIR)/$(EMULATOR_EXECUTABLE): $(INIT_OBJS) $(OBJS)
	$(PURIFY) $(LD) -o $(BINDIR)/$(EMULATOR_EXECUTABLE) \
	$(HIPEBEAMLDFLAGS) $(LDFLAGS) $(DEXPORT) $(INIT_OBJS) $(OBJS) $(LIBS)

$(BINDIR)/$(EMULATOR_EXECUTABLE_ELIB): $(INIT_OBJS) $(OBJS_ELIB)
	$(PURIFY) $(LD) -o $(BINDIR)/$(EMULATOR_EXECUTABLE_ELIB) \
	$(LDFLAGS) $(DEXPORT) $(INIT_OBJS) $(OBJS_ELIB) $(LIBS)

$(BINDIR)/$(EMULATOR_EXECUTABLE_SAE): $(INIT_OBJS_SAE) $(OBJS_SAE)
	$(PURIFY) $(LD) -o $(BINDIR)/$(EMULATOR_EXECUTABLE_SAE) \
	$(LDFLAGS) $(DEXPORT) $(INIT_OBJS_SAE) $(OBJS_SAE) $(LIBS)

endif
# ----------------------------------------------------------------------
# Dependencies
#
$(TARGET)/Makefile: Makefile.in
	@echo
	@echo "Makefile.in has been updated, please re-run configure!"
	@echo
	@exit 1

SED_REPL_O=s|^\([^:]*:\)|$$(OBJDIR)/\1|g
SED_REPL_ELIB_O=s|^\([^:]*\).o[ 	]*:|$$(OBJDIR)/\1.elib.o:|g
SED_REPL_TT_DIR=s|$(TARGET_TYPE_DIR)/|$$(TARGET_TYPE_DIR)/|g

SED_DEPEND=sed '$(SED_REPL_O);$(SED_REPL_TT_DIR)'
SED_ELIB_DEPEND=sed '$(SED_REPL_ELIB_O);$(SED_REPL_TT_DIR)'

ifdef HIPE_ENABLED
HIPE_SRC=hipe/*.c
else
HIPE_SRC=
endif

# I do not want the -MG flag on windows, it does not work properly for a 
# windows build.
ifeq ($(TARGET),win32)
DEP_CFLAGS = $(subst -O2,,$(CFLAGS))
depend:
	$(EMU_CC) -MM $(DEP_CFLAGS) $(INCLUDES) -I../etc/win32 -Idrivers/common \
		  beam/*.c drivers/common/*.c drivers/$(ERLANG_OSTYPE)/*.c \
		  sys/$(ERLANG_OSTYPE)/*.c sys/common/*.c $(HIPE_SRC) | \
		  $(SED_DEPEND) > $(TARGET)/depend.mk
else
depend:
	$(CC) -MM -MG $(CFLAGS) $(INCLUDES) -Idrivers/common \
		  beam/*.c drivers/common/*.c drivers/$(ERLANG_OSTYPE)/*.c \
		  sys/$(ERLANG_OSTYPE)/*.c sys/common/*.c $(HIPE_SRC) | \
		  $(SED_DEPEND) > $(TARGET)/depend.mk
	$(CC) -MM -MG $(ELIB_FLAGS) $(CFLAGS) $(INCLUDES) -Idrivers/common \
		  $(ELIB_C_FILES) | $(SED_ELIB_DEPEND) >> $(TARGET)/depend.mk
endif
-include $(TARGET)/depend.mk



