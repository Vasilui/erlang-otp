# ``The contents of this file are subject to the Erlang Public License,
# Version 1.1, (the "License"); you may not use this file except in
# compliance with the License. You should have received a copy of the
# Erlang Public License along with this software. If not, it can be
# retrieved via the world wide web at http://www.erlang.org/.
# 
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
# the License for the specific language governing rights and limitations
# under the License.
# 
# The Initial Developer of the Original Code is Ericsson Utvecklings AB.
# Portions created by Ericsson are Copyright 1999, Ericsson Utvecklings
# AB. All Rights Reserved.''
# 
#     $Id$
#
include $(ERL_TOP)/make/target.mk
include ../vsn.mk

HIPE_ENABLED=@HIPE_ENABLED@

#
# Run this make file with TYPE set to the type of emulator you want.
# Different versions of the emulator for different uses. The default
# is "debug". For a normal version use "opt".
#
ifeq ($(TYPE),debug)
PURIFY =
TYPEMARKER = .debug
TYPE_FLAGS = @DEBUG_CFLAGS@ -DDEBUG -DINSTRUMENT
else
ifeq ($(TYPE),instr)
PURIFY =
TYPEMARKER = .instr
TYPE_FLAGS = @CFLAGS@ -DINSTRUMENT
else
ifeq ($(TYPE),shared)
PURIFY =
TYPEMARKER = .shared
TYPE_FLAGS = @CFLAGS@ -DSHARED_HEAP
else
ifeq ($(TYPE),purify)
PURIFY = purify
TYPEMARKER = .purify
TYPE_FLAGS = @CFLAGS@ -DPURIFY -DNO_JUMP_TABLE
else
ifeq ($(TYPE),quantify)
PURIFY = quantify
TYPEMARKER = .quantify
ifeq ($(findstring ose,$(TARGET)),ose)
  TYPE_FLAGS = @CFLAGS@ -DQUANTIFY
else
  TYPE_FLAGS = @CFLAGS@ -g -O2 -DQUANTIFY -DNO_JUMP_TABLE
endif
else
PURIFY =
TYPEMARKER =
TYPE_FLAGS = @CFLAGS@
endif
endif
endif
endif
endif

ARCH=@ARCH@
ultrasparcCFLAGS=-Wa,-xarch=v8plusa
x86CFLAGS=
noarchCFLAGS=
ARCHCFLAGS=$($(ARCH)CFLAGS)

#
#
#
SHELL   = /bin/sh
CC      = @CC@
WFLAGS  = @WFLAGS@
CFLAGS  = $(TYPE_FLAGS) @DEFS@ $(WFLAGS) @THR_DEFS@ \
 -DHIPE_ARCHITECTURE=$(ARCH) $(ARCHCFLAGS)
HCC     = @HCC@
LD      = @LD@
DEXPORT = @DEXPORT@
RANLIB  = @RANLIB@
STRIP   = strip
PERL    = @PERL@

ifeq ($(CC), gcc)
GEN_OPT_FLGS = -O3 -fomit-frame-pointer
UNROLL_FLG = -funroll-loops
else
GEN_OPT_FLGS = 
UNROLL_FLG = 
endif


ifdef PURIFY_CHILD_SETUP
CS_PURIFY = $(PURIFY)
CS_TYPE_FLAGS = $(TYPE_FLAGS)
else
CS_PURIFY = 
CS_TYPE_FLAGS = $(subst QUANTIFY,FAKE_QUANTIFY, \
		$(subst PURIFY,FAKE_PURIFY, $(TYPE_FLAGS)))
endif
CS_CFLAGS_ = $(CS_TYPE_FLAGS) @DEFS@ $(WFLAGS) 
ifeq ($(CC), gcc)
CS_CFLAGS = $(subst -O2, $(GEN_OPT_FLGS) $(UNROLL_FLG), $(CS_CFLAGS_))
else
CS_CFLAGS = $(CS_CFLAGS_)
endif

LIBS    = @LIBS@ @THR_LIBS@ -L$(ERL_TOP)/erts/obj/$(TARGET) -lz

ELIB_FLAGS = -DENABLE_ELIB_MALLOC -DELIB_ALLOC_IS_CLIB -DELIB_HEAP_SBRK

PERFCTR_PATH=@PERFCTR_PATH@
ifdef PERFCTR_PATH
LIBS += $(PERFCTR_PATH)/usr.lib/libperfctr.a
endif

OBJDIR = $(ERL_TOP)/erts/obj$(TYPEMARKER).beam/$(TARGET)
BINDIR = $(ERL_TOP)/bin/$(TARGET)

ERLANG_OSTYPE = @ERLANG_OSTYPE@

EMULATOR_EXECUTABLE_SAE = beam_evm$(TYPEMARKER)
EMULATOR_EXECUTABLE_ELIB = beam.elib$(TYPEMARKER)
EMULATOR_EXECUTABLE = beam$(TYPEMARKER)
CS_EXECUTABLE = child_setup$(TYPEMARKER)

# ----------------------------------------------------------------------
include $(ERL_TOP)/make/$(TARGET)/otp.mk

ifeq ($(ERLANG_OSTYPE), unix)
UNIX_ONLY_BUILDS =	$(BINDIR)/$(CS_EXECUTABLE) \
			$(BINDIR)/$(EMULATOR_EXECUTABLE_ELIB) \
			$(BINDIR)/$(EMULATOR_EXECUTABLE_SAE)
else
UNIX_ONLY_BUILDS =
endif

all: generate zlib $(BINDIR)/$(EMULATOR_EXECUTABLE) $(UNIX_ONLY_BUILDS)

zlib:
	@set -e ; cd zlib && $(MAKE) $(TYPE)

clean:
	rm -f $(TARGET)/*.c $(TARGET)/*.h $(TARGET)/depend.mk
	rm -f $(ERL_TOP)/erts/obj.*beam/$(TARGET)/*.o

.PHONY: all sae zlib clean

docs:

# ----------------------------------------------------------------------
include $(ERL_TOP)/make/otp_release_targets.mk

RELSYSDIR = $(RELEASE_PATH)/erts-$(VSN)

RELEASE_INCLUDES = beam/erl_driver.h sys/$(ERLANG_OSTYPE)/driver_int.h 

release_spec: all
	$(INSTALL_DIR) $(RELSYSDIR)
	$(INSTALL_DIR) $(RELSYSDIR)/src
	$(INSTALL_DIR) $(RELSYSDIR)/man
	$(INSTALL_DIR) $(RELSYSDIR)/doc
	$(INSTALL_DIR) $(RELSYSDIR)/bin
	$(INSTALL_DIR) $(RELEASE_PATH)/usr/include
	$(INSTALL_DATA) $(RELEASE_INCLUDES) $(RELEASE_PATH)/usr/include
	$(INSTALL_DATA) $(RELEASE_INCLUDES) $(RELSYSDIR)/src
	$(INSTALL_PROGRAM) $(BINDIR)/$(EMULATOR_EXECUTABLE) $(RELSYSDIR)/bin
ifeq ($(ERLANG_OSTYPE), unix)
	$(INSTALL_PROGRAM) $(BINDIR)/$(EMULATOR_EXECUTABLE_ELIB) $(RELSYSDIR)/bin
	$(INSTALL_PROGRAM) $(BINDIR)/$(CS_EXECUTABLE) $(RELSYSDIR)/bin
	$(INSTALL_PROGRAM) $(BINDIR)/$(EMULATOR_EXECUTABLE_SAE) $(RELSYSDIR)/bin
endif
	$(INSTALL_DIR) $(RELEASE_PATH)/usr/include/obsolete
	$(INSTALL_DATA) obsolete/driver.h $(RELEASE_PATH)/usr/include/obsolete

release_docs_spec:

# ----------------------------------------------------------------------
# Generated source code. Put in $(TARGET) directory
#

.PHONY : generate

generate: $(TARGET)/beam_opcodes.h $(TARGET)/erl_bif_table.c \
		$(TARGET)/erl_version.h \
		$(TARGET)/driver_tab.c $(TARGET)/preload.c \
		$(HIPE_GENERATE)

ifdef HIPE_ENABLED
HIPE_GENERATE = $(BINDIR)/hipe_mkliterals
endif

ifdef HIPE_ENABLED
generate: $(TARGET)/hipe_x86_asm.h
generate: $(TARGET)/hipe_literals.h
endif

# opcode table

OPCODE_TABLES = $(ERL_TOP)/lib/compiler/src/genop.tab beam/ops.tab
ifdef HIPE_ENABLED
OPCODE_TABLES += hipe/hipe_ops.tab
endif

$(TARGET)/beam_opcodes.h $(TARGET)/beam_opcodes.c: $(OPCODE_TABLES)
	$(PERL) utils/beam_makeops -outdir $(TARGET) -emulator $(OPCODE_TABLES)

# bif and atom table
ATOMS=	beam/atom.names
BIFS =	beam/bif.tab
ifdef HIPE_ENABLED
BIFS += hipe/hipe_bif0.tab hipe/hipe_bif1.tab hipe/hipe_bif2.tab
endif

TABLES=	$(TARGET)/erl_bif_table.c $(TARGET)/erl_bif_table.h	\
	$(TARGET)/erl_bif_wrap.c $(TARGET)/erl_bif_list.h	\
	$(TARGET)/erl_atom_table.c $(TARGET)/erl_atom_table.h   \
	$(TARGET)/erl_pbifs.c

$(TABLES):	$(ATOMS) $(BIFS)
	$(PERL) utils/make_tables -src $(TARGET) -include $(TARGET) $^

# version include file
$(TARGET)/erl_version.h: ../vsn.mk
	$(PERL) utils/make_version -o $@ $(VSN)$(SERIALNO) $(TARGET)

# driver table
$(TARGET)/driver_tab.c:	Makefile.in
	$(PERL) utils/make_driver_tab -o $@ $(DRV_OBJS)

# preloaded code
# Note: if you change this list, also change RELSRC_PRELOAD in
#       /clearcase/otp/system/build/Makefile
$(TARGET)/preload.c: $(ERL_TOP)/lib/kernel/ebin/otp_ring0.beam \
			$(ERL_TOP)/lib/kernel/ebin/init.beam \
			$(ERL_TOP)/lib/kernel/ebin/prim_inet.beam \
			$(ERL_TOP)/lib/kernel/ebin/prim_file.beam \
			$(ERL_TOP)/lib/kernel/ebin/erl_prim_loader.beam \
			$(ERL_TOP)/lib/kernel/ebin/erlang.beam
	$(PERL) utils/make_preload -old $^ > $@

# ----------------------------------------------------------------------
# Pattern rules
#
INCLUDES  =  -Ibeam -Isys/$(ERLANG_OSTYPE) -I$(TARGET) -Izlib -Ihipe

ifdef PERFCTR_PATH
INCLUDES += -I$(PERFCTR_PATH)/usr.lib -I$(PERFCTR_PATH)/linux/include
endif

# Need to include etc dir on VxWorks
ifeq ($(findstring vxworks,$(TARGET)),vxworks)
INCLUDES += -I$(ERL_TOP)/erts/etc/vxworks
endif

ifneq ($(findstring ose,$(TARGET)),ose)
$(OBJDIR)/%.o: beam/%.c
	$(CC) $(subst -O2, $(GEN_OPT_FLGS), $(CFLAGS)) $(INCLUDES) -c $< -o $@
else

INCLUDES += -Idrivers/ose

ifeq ($(TYPE),debug)
$(OBJDIR)/%.o: beam/%.c
	  $(CC) $(CFLAGS) -DNO_JUMP_TABLE $(INCLUDES) -c $< -o $@
else

VXCC=@VXCC@
VXCFLAGS=@VXCFLAGS@
CFLAGS_NOOPT=@CFLAGS_NOOPT@ @DEFS@ $(WFLAGS) @THR_DEFS@ \
 -DHIPE_ARCHITECTURE=$(ARCH) $(ARCHCFLAGS)

# we want to use jump table
$(OBJDIR)/beam_emu.o: beam/beam_emu.c
	$(VXCC) $(VXCFLAGS) $(INCLUDES) -c $< -o $@

# ggc and erl_process do not work properly with DIAB's -XO option,
# we'll compile them with gcc instead
$(OBJDIR)/ggc.o: beam/ggc.c
	$(VXCC) $(VXCFLAGS) $(INCLUDES) -c $< -o $@
$(OBJDIR)/erl_process.o: beam/erl_process.c
	$(VXCC) $(VXCFLAGS) $(INCLUDES) -c $< -o $@

$(OBJDIR)/%.o: beam/%.c
	$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $@
endif
endif

$(OBJDIR)/%.o: $(TARGET)/%.c
	$(CC) $(CFLAGS) $(INCLUDES) -Idrivers/common -c $< -o $@

$(OBJDIR)/%.o: sys/$(ERLANG_OSTYPE)/%.c
	$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $@

$(OBJDIR)/%.o: drivers/common/%.c
	$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $@

$(OBJDIR)/%.o: drivers/$(ERLANG_OSTYPE)/%.c
	$(CC) $(CFLAGS) $(INCLUDES) -Idrivers/common -c $< -o $@

# VxWorks and OSE uses unix drivers too...
ifeq ($(findstring vxworks,$(TARGET)),vxworks)
$(OBJDIR)/%.o: drivers/unix/%.c
	$(CC) $(CFLAGS) $(INCLUDES) -Idrivers/common -c $< -o $@
endif
ifeq ($(findstring ose,$(TARGET)),ose)
$(OBJDIR)/%.o: drivers/unix/%.c
	$(CC) $(CFLAGS) $(INCLUDES) -Idrivers/common -c $< -o $@
endif

# ----------------------------------------------------------------------
# Specials
#
CS_SRC = sys/$(ERLANG_OSTYPE)/erl_child_setup.c

$(BINDIR)/$(CS_EXECUTABLE): $(CS_SRC)
	$(CS_PURIFY) $(CC) -o $(BINDIR)/$(CS_EXECUTABLE) \
	$(CS_CFLAGS) $(INCLUDES) $(CS_SRC)

$(OBJDIR)/%.elib.o: beam/%.c
	$(CC) $(ELIB_FLAGS) $(subst -O2, $(GEN_OPT_FLGS), $(CFLAGS)) $(INCLUDES) -c $< -o $@

# Disable vfork() for sae (then we don't need the child_setup program)
$(OBJDIR)/sys_sae.o: sys/$(ERLANG_OSTYPE)/sys.c
	$(CC) -DDISABLE_VFORK=1 $(CFLAGS) $(INCLUDES) -c $< -o $@

ifeq ($(CC), gcc)
$(OBJDIR)/erl_sl_alloc.o: beam/erl_sl_alloc.c
	$(CC) $(subst -O2, $(GEN_OPT_FLGS) $(UNROLL_FLG), $(CFLAGS)) $(INCLUDES) -c $< -o $@
endif

# ----------------------------------------------------------------------
# Build necessary beam files if they are not already in place. To force
# rebuilding (is this a good idea?) add a dummy dependency to this target.
#

$(ERL_TOP)/lib/%.beam $(ERL_TOP)/erts/sae/ebin/%.beam:
	cd $(@D)/../src && $(MAKE) ../ebin/$(@F)


# ----------------------------------------------------------------------
# Object files
#
INIT_OBJS = $(OBJDIR)/erl_main.o		$(OBJDIR)/preload.o

INIT_OBJS_SAE = $(OBJDIR)/erl9_start.o

EMU_OBJS = \
	$(OBJDIR)/beam_emu.o		$(OBJDIR)/beam_opcodes.o \
	$(OBJDIR)/beam_load.o		$(OBJDIR)/beam_bif_load.o \
	$(OBJDIR)/beam_debug.o		$(OBJDIR)/beam_bp.o \
	$(OBJDIR)/beam_catches.o

RUN_OBJS = \
	$(OBJDIR)/erl_pbifs.o \
	$(OBJDIR)/benchmark.o           $(OBJDIR)/erl_init.o \
	$(OBJDIR)/erl_atom_table.o	$(OBJDIR)/erl_bif_table.o \
	$(OBJDIR)/erl_bif_info.o	$(OBJDIR)/erl_bif_op.o \
	$(OBJDIR)/erl_bif_os.o		$(OBJDIR)/erl_bif_lists.o \
	$(OBJDIR)/erl_bif_trace.o	$(OBJDIR)/erl_bif_wrap.o \
	$(OBJDIR)/erl_trace.o		$(OBJDIR)/copy.o \
	$(OBJDIR)/utils.o		$(OBJDIR)/bif.o \
	$(OBJDIR)/io.o \
	$(OBJDIR)/erl_debug.o		$(OBJDIR)/erl_md5.o \
	$(OBJDIR)/erl_message.o		$(OBJDIR)/erl_process.o \
	$(OBJDIR)/erl_process_dict.o	$(OBJDIR)/erl_arith.o \
	$(OBJDIR)/time.o		$(OBJDIR)/erl_time_sup.o  \
	$(OBJDIR)/external.o		$(OBJDIR)/dist.o \
	$(OBJDIR)/binary.o		$(OBJDIR)/erl_db.o \
	$(OBJDIR)/erl_db_util.o		$(OBJDIR)/erl_db_hash.o \
	$(OBJDIR)/erl_db_tree.o		$(OBJDIR)/fix_alloc.o \
	$(OBJDIR)/big.o			$(OBJDIR)/hash.o \
	$(OBJDIR)/index.o		$(OBJDIR)/atom.o \
	$(OBJDIR)/module.o		$(OBJDIR)/export.o \
	$(OBJDIR)/register.o		$(OBJDIR)/break.o \
	$(OBJDIR)/erl_async.o		$(OBJDIR)/sys_threads.o \
	$(OBJDIR)/ggc.o 		$(OBJDIR)/erl_gc.o \
	$(OBJDIR)/erl_posix_str.o \
	$(OBJDIR)/erl_bits.o 		$(OBJDIR)/erl_math.o \
	$(OBJDIR)/erl_vector.o		$(OBJDIR)/erl_term.o \
	$(OBJDIR)/erl_fun.o             $(OBJDIR)/erl_bif_port.o \
	$(OBJDIR)/erl_node_tables.o


OS_OBJS = \
	$(OBJDIR)/sys.o \
	$(OBJDIR)/driver_tab.o \
	$(OBJDIR)/unix_efile.o \
	$(OBJDIR)/gzio.o \
	$(OBJDIR)/erl_old_sl_alloc.o \
	$(OBJDIR)/erl_sl_alloc.o \
	$(OBJDIR)/elib_malloc.o \
	$(OBJDIR)/elib_memmove.o

ifeq ($(findstring ose,$(TARGET)),ose)
	OS_OBJS += $(OBJDIR)/erl_port_init.o \
		   $(OBJDIR)/ose_inet_sock_select.o \
		   $(OBJDIR)/ose_sfp.o
else
ifeq ($(findstring vxworks,$(TARGET)),vxworks)
	OS_OBJS += $(OBJDIR)/vxworks_ddll_drv.o \
                    $(OBJDIR)/int64.o 
else
	OS_OBJS += $(OBJDIR)/unix_ddll_drv.o \
                   $(OBJDIR)/sys_float.o
endif
endif

DRV_OBJS = \
	$(OBJDIR)/efile_drv.o \
	$(OBJDIR)/ddll_drv.o \
	$(OBJDIR)/inet_drv.o \
	$(OBJDIR)/ram_file_drv.o

ifneq ($(findstring vxworks,$(TARGET)),vxworks)
  ifeq ($(findstring ose,$(TARGET)),ose)
	DRV_OBJS += 	$(OBJDIR)/ose_inet_drv.o
  else
	DRV_OBJS += $(OBJDIR)/ttsl_drv.o
  endif
endif

HIPE_ultrasparc_OBJS=$(OBJDIR)/hipe_sparc_glue.o $(OBJDIR)/hipe_sparc_bifs.o $(OBJDIR)/hipe_sparc_stack.o
HIPE_x86_OBJS=$(OBJDIR)/hipe_x86_glue.o $(OBJDIR)/hipe_x86_bifs.o $(OBJDIR)/hipe_x86_signal.o $(OBJDIR)/hipe_x86_stack.o
HIPE_noarch_OBJS=
HIPE_ARCH_OBJS=$(HIPE_$(ARCH)_OBJS)

HIPE_OBJS= \
	$(OBJDIR)/hipe_bif0.o \
	$(OBJDIR)/hipe_bif1.o \
	$(OBJDIR)/hipe_bif2.o $(OBJDIR)/hipe_debug.o \
	$(OBJDIR)/hipe_mode_switch.o \
	$(OBJDIR)/hipe_native_bif.o $(HIPE_ARCH_OBJS)
ifdef HIPE_ENABLED
EXTRA_BASE_OBJS += $(HIPE_OBJS)
endif

BASE_OBJS = $(RUN_OBJS) $(EMU_OBJS) $(OS_OBJS) $(EXTRA_BASE_OBJS)

OBJS =	$(BASE_OBJS) $(DRV_OBJS)
OBJS_SAE =  $(subst sys.o,sys_sae.o,$(OBJS))
OBJS_ELIB = 	$(subst elib_malloc.o,elib_malloc.elib.o, \
		$(subst elib_memmove.o,elib_memmove.elib.o, \
		$(subst erl_bif_info.o,erl_bif_info.elib.o, \
		$(subst utils.o,utils.elib.o, \
		$(OBJS)))))

########################################
# HiPE section

.PHONY: pre_hipe

ifdef HIPE_ENABLED
pre_hipe: generate $(BINDIR)/hipe_mkliterals
else
pre_hipe:
	@echo Nothing to be done for pre_hipe target.
endif

$(TARGET)/%.S: hipe/%.m4
	m4 -DTARGET=$(TARGET) $< > $@

$(TARGET)/%.h: hipe/%.m4
	m4 -DTARGET=$(TARGET) $< > $@

$(OBJDIR)/%.o: $(TARGET)/%.S
	$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $@

$(OBJDIR)/%.o: hipe/%.S
	$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $@

$(OBJDIR)/%.o: hipe/%.c
	$(CC) $(subst O2,O3, $(CFLAGS)) $(INCLUDES) -c $< -o $@

$(BINDIR)/hipe_mkliterals:	$(OBJDIR)/hipe_mkliterals.o
	$(CC) $(CFLAGS) $(INCLUDES) -o $@ $<

$(OBJDIR)/hipe_mkliterals.o:	$(TARGET)/hipe_x86_asm.h

$(TARGET)/hipe_literals.h:	$(BINDIR)/hipe_mkliterals
	$(BINDIR)/hipe_mkliterals -c > $@

$(OBJDIR)/hipe_sparc_glue.o:	hipe/hipe_sparc_glue.S hipe/hipe_sparc_asm.h hipe/hipe_mode_switch.h $(TARGET)/hipe_literals.h
$(TARGET)/hipe_sparc_bifs.S:	hipe/hipe_sparc_bifs.m4 $(TARGET)/erl_bif_list.h hipe/hipe_gbif_list.h
$(OBJDIR)/hipe_sparc_bifs.o:	$(TARGET)/hipe_sparc_bifs.S hipe/hipe_sparc_asm.h hipe/hipe_mode_switch.h $(TARGET)/hipe_literals.h

$(OBJDIR)/hipe_x86_glue.o:	hipe/hipe_x86_glue.S $(TARGET)/hipe_x86_asm.h $(TARGET)/hipe_literals.h hipe/hipe_mode_switch.h
$(TARGET)/hipe_x86_bifs.S:	hipe/hipe_x86_bifs.m4 hipe/hipe_x86_asm.m4 $(TARGET)/erl_bif_list.h hipe/hipe_gbif_list.h
$(OBJDIR)/hipe_x86_bifs.o:	$(TARGET)/hipe_x86_bifs.S $(TARGET)/hipe_literals.h

# end of HiPE section
########################################

ifeq ($(findstring vxworks,$(TARGET)),vxworks)
########################################
# Extract what we need from libgcc.a
########################################
GCCLIBFLAGS=@GCCLIBFLAGS@
STRIP=@STRIP@
SYMPREFIX=@SYMPREFIX@

NEEDFUNCTIONS=__divdi3 __moddi3
KEEPSYMS=$(NEEDFUNCTIONS:%=-K $(SYMPREFIX)%)

$(OBJDIR)/int64.o: $(TARGET)/int64.c
	$(CC) -o $(OBJDIR)/int64tmp.o -c $(TARGET)/int64.c
	$(LD) -o $(OBJDIR)/int64.o $(OBJDIR)/int64tmp.o $(LDFLAGS) $(GCCLIBFLAGS)
	$(STRIP) $(KEEPSYMS) $(OBJDIR)/int64.o

$(TARGET)/int64.c:
	echo 'void dummy(void); void dummy(void) {' > $(TARGET)/int64.c
	for x in $(NEEDFUNCTIONS); do echo 'extern void '$$x'();' \
		>> $(TARGET)/int64.c; done 
	for x in $(NEEDFUNCTIONS); do echo $$x'();' >> $(TARGET)/int64.c; done
	echo '}'  >> $(TARGET)/int64.c 

endif

ifeq ($(findstring ose,$(TARGET)),ose)
# Extract soft float functions from libgcc.a (for beam_emu)
VXCC=@VXCC@
VXCFLAGS=@VXCFLAGS@
VXLD=@VXLD@
VXLDFLAGS=@VXLDFLAGS@
VXCCLIBFLAGS=@VXCCLIBFLAGS@
STRIP=@STRIP@
SYMPREFIX=@SYMPREFIX@

NEEDFUNCTIONS=__floatsidf __adddf3 __negdf2 __muldf3 __divdf3 __subdf3
KEEPSYMS=$(NEEDFUNCTIONS:%=-K $(SYMPREFIX)%)

$(OBJDIR)/ose_sfp.o: $(TARGET)/ose_sfp.c
	$(VXCC) $(VXCFLAGS) -o $(OBJDIR)/ose_sfp_tmp.o -c $(TARGET)/ose_sfp.c
	$(VXLD) -o $(OBJDIR)/ose_sfp.o $(OBJDIR)/ose_sfp_tmp.o $(VXLDFLAGS) $(VXCCLIBFLAGS)
	$(STRIP) $(KEEPSYMS) $(OBJDIR)/ose_sfp.o

$(TARGET)/ose_sfp.c:
	echo 'void dummy(void); void dummy(void) {' > $(TARGET)/ose_sfp.c
	for x in $(NEEDFUNCTIONS); do echo 'extern void '$$x'();' \
		>> $(TARGET)/ose_sfp.c; done 
	for x in $(NEEDFUNCTIONS); do echo $$x'();' >> $(TARGET)/ose_sfp.c; done
	echo '}'  >> $(TARGET)/ose_sfp.c 

endif

# ----------------------------------------------------------------------
# The emulator itself

$(BINDIR)/$(EMULATOR_EXECUTABLE): $(INIT_OBJS) $(OBJS)
	$(PURIFY) $(LD) -o $(BINDIR)/$(EMULATOR_EXECUTABLE) \
	$(LDFLAGS) $(DEXPORT) $(INIT_OBJS) $(OBJS) $(LIBS)

$(BINDIR)/$(EMULATOR_EXECUTABLE_ELIB): $(INIT_OBJS) $(OBJS_ELIB)
	$(PURIFY) $(LD) -o $(BINDIR)/$(EMULATOR_EXECUTABLE_ELIB) \
	$(LDFLAGS) $(DEXPORT) $(INIT_OBJS) $(OBJS_ELIB) $(LIBS)

$(BINDIR)/$(EMULATOR_EXECUTABLE_SAE): $(INIT_OBJS_SAE) $(OBJS_SAE)
	$(PURIFY) $(LD) -o $(BINDIR)/$(EMULATOR_EXECUTABLE_SAE) \
	$(LDFLAGS) $(DEXPORT) $(INIT_OBJS_SAE) $(OBJS_SAE) $(LIBS)

# ----------------------------------------------------------------------
# Dependencies
#
$(TARGET)/Makefile: Makefile.in
	@echo
	@echo "Makefile.in has been updated, please re-run configure!"
	@echo
	@exit 1

depend:
	$(CC) -MM -MG $(CFLAGS) $(INCLUDES) -Idrivers/common \
		  beam/*.c drivers/common/*.c drivers/$(ERLANG_OSTYPE)/*.c \
		  sys/$(ERLANG_OSTYPE)/*.c hipe/*.c | \
		sed 's|^\([^:]*:\)|$$(OBJDIR)/\1|g' > $(TARGET)/depend.mk

-include $(TARGET)/depend.mk
