dnl Process this file with autoconf to produce a configure script. -*-m4-*-
dnl
dnl
dnl The string "FIXME convbreak" means that there is a break of
dnl autoconf convention that should be cleaned up.
dnl
dnl
AC_PREREQ(2.13)
AC_INIT(vsn.mk)

dnl How to set srcdir absolute is taken from the GNU Emacs distribution
#### Make srcdir absolute, if it isn't already.  It's important to
#### avoid running the path through pwd unnecessary, since pwd can
#### give you automounter prefixes, which can go away.
case "${srcdir}" in
  /* ) ;;
  . )
    ## We may be able to use the $PWD environment variable to make this
    ## absolute.  But sometimes PWD is inaccurate.
    ## Make sure CDPATH doesn't affect cd (in case PWD is relative).
    CDPATH=
    if test "${PWD}" != "" && test "`(cd ${PWD} ; sh -c pwd)`" = "`pwd`"  ;
    then
      srcdir="$PWD"
    else
      srcdir="`(cd ${srcdir}; pwd)`"
    fi
  ;;
  *  ) srcdir="`(cd ${srcdir}; pwd)`" ;;
esac

## Now, make sure that ERL_TOP is set and is the same as srcdir
##
## (what's wrong with simply setting ERL_TOP?  [sverkerw])
if test -z "$ERL_TOP" || test ! -d $ERL_TOP ; then
  AC_MSG_ERROR(You need to set the environment variable ERL_TOP!)
fi
if test x"${ERL_TOP}/erts" != x"$srcdir"; then
  AC_MSG_ERROR([You need to run configure with argument --srcdir=${ERL_TOP}/erts])
fi
erl_top=${ERL_TOP}

# echo XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
# echo X
# echo "X srcdir  = $srcdir"
# echo "X ERL_TOP = $ERL_TOP"
# echo X
# echo XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

AC_CONFIG_AUX_DIRS($srcdir/autoconf)

dnl ----------------------------------------------------------------------
dnl Figure out what system we are running on.
dnl ----------------------------------------------------------------------

#
# To configure for free source run ./configure --host=free_source
#
dnl
dnl AC_CANONICAL_HOST does not like free_source as a host specification,
dnl so we make a little special case.
dnl
if test "X$host" != "Xfree_source"; then
    AC_CANONICAL_HOST
fi
AC_ISC_POSIX

AC_CONFIG_HEADER($host/config.h:autoconf/config.h.in)

dnl ----------------------------------------------------------------------
dnl Optional features.
dnl ----------------------------------------------------------------------

AC_ARG_ENABLE(elib-malloc,
[  --enable-elib-malloc      use elib_malloc instead of normal malloc])

AC_ARG_ENABLE(fixalloc,
[  --disable-fixalloc        disable the use of fix_alloc])
if test x${enable_fixalloc} = xno ; then
  AC_DEFINE(NO_FIX_ALLOC)
fi

dnl Changed our minds, default is now threads disabled.
dnl AC_ARG_ENABLE(threads,
dnl [  --disable-threads         do not try to use threads],
dnl [ case "$enableval" in
dnl    no) enable_threads=nothreads ;;
dnl    *)  enable_threads=threads-error ;;
dnl  esac ], enable_threads=threads-ok)

AC_ARG_ENABLE(threads,
[  --enable-threads          do not try to use threads],
[ case "$enableval" in
    no) enable_threads=nothreads ;;
    *)  enable_threads=threads-error ;;
  esac ], enable_threads=nothreads)

dnl Magic test for clearcase.
if test -d ../../system; then
	OTP_EXTRA_FLAGS=-DOTP_RELEASE
else
	OTP_EXTRA_FLAGS=
fi

dnl ----------------------------------------------------------------------
dnl Checks for programs.
dnl ----------------------------------------------------------------------

AC_PROG_CC

dnl
dnl Flags to the C compiler
dnl
dnl make sure we find config.h
CFLAGS="$CFLAGS -I${ERL_TOP}/erts/autoconf/$host $OTP_EXTRA_FLAGS"
DEBUG_FLAGS=-g
if test "x$GCC" = xyes; then
  # until the emulator can handle this, I suggest we turn it off!
  #WFLAGS="-Wall -Wshadow -Wcast-qual -Wmissing-declarations"
  WFLAGS="-Wall"
  #WFLAGS=""
else
  WFLAGS=""
fi
AC_SUBST(DEBUG_FLAGS)
AC_SUBST(WFLAGS)

dnl some tests below will call this if we haven't already - and autoconf
dnl can't handle those tests being done conditionally at runtime
AC_PROG_CPP

AC_PROG_RANLIB
AC_PROG_LEX
AC_PROG_YACC
AC_PROG_AWK
LM_PROG_PERL5
if test "$ac_cv_path_PERL" = false; then
  AC_MSG_ERROR([Perl version 5 is required to build the emulator!])
fi
AC_PROG_LN_S

AC_CHECK_PROG(AR, ar, ar, false)
if test "$ac_cv_prog_AR" = false; then
  AC_MSG_ERROR([No 'ar' command found in PATH])
fi


dnl
dnl We can live with Solaris /usr/ucb/install
dnl
case $host in
  *-*-solaris*|free_source)
    if test -x /usr/ucb/install; then
      INSTALL="/usr/ucb/install -c"
    fi
    ;;
  *)
    ;;
esac
AC_PROG_INSTALL
LM_PROG_INSTALL_DIR


dnl ----------------------------------------------------------------------
dnl Misc. things (some of them should go away)
dnl ----------------------------------------------------------------------

dnl
dnl An attempt to allow cross compiling. This is not the right way,
dnl nor does it work currently. Some makefiles still needs these
dnl variables, so we leave them in for now.
dnl
HCC='$(CC)'         AC_SUBST(HCC)
HCFLAGS=""          AC_SUBST(HCFLAGS)
HCFLAGS="$HCFLAGS -I${ERL_TOP}/erts/autoconf/$host"
vxworks_reclaim=""  AC_SUBST(vxworks_reclaim)
LD='$(CC)'          AC_SUBST(LD)

dnl This is the os flavour, should be unix, vxworks or win32
OSTYPE=unix         AC_SUBST(OSTYPE)

dnl These are a list of ofiles that contains implementations of
dnl "missing" library functions.
AC_SUBST(LIBOBJS)

dnl Which sysv4 would this be, and what is it for???
dnl XXX: replace with feature tests.
case $host_os in
  sysv4*)
    AC_DEFINE(SOCKOPT_CONNECT_STAT)
    AC_DEFINE(NO_PRAGMA_WEAK)
    LIBS="$LIBS -lgen -lc -L /usr/ucblib -lucb"
    ;;
esac

# Check how to export functions from the emulator executable, needed
# when dynamically loaded drivers are loaded (so that they can find
# emulator functions).
# OS'es with ELF executables using the GNU linker (Linux and recent *BSD,
# in rare cases Solaris) typically need '-Wl,-export-dynamic' (i.e. pass
# -export-dynamic to the linker - also known as -rdynamic and some other
# variants); some sysVr4 system(s) instead need(s) '-Wl,-Bexport'.
# AIX 4.x (perhaps only for x>=2) wants -Wl,-bexpall,-brtl and doesn't
# reliably return an error for others, thus we separate it out.
# Otherwise we assume that if the linker accepts the flag, it is needed.
AC_MSG_CHECKING(for extra flags needed to export symbols)
DEXPORT=""
case $host_os in
	aix4*)
		DEXPORT=-Wl,-bexpall,-brtl
	;;
	*)
		save_ldflags="$LDFLAGS"
		LDFLAGS=-Wl,-export-dynamic
		AC_TRY_LINK(,,[DEXPORT=-Wl,-export-dynamic], [
			LDFLAGS=-Wl,-Bexport
			AC_TRY_LINK(,,[DEXPORT=-Wl,-Bexport],
				AC_MSG_RESULT(none))])
		LDFLAGS="$save_ldflags"
	;;
  bsdi*)
    DEXPORT="-rdynamic " 
    ;;
esac
AC_SUBST(DEXPORT)
test "x$DEXPORT" != x && AC_MSG_RESULT([$DEXPORT])

# Check for Solaris/ultrasparc /dev/perfmon interface
# (also needs gcc specific asm instructions)
case "${host}:${GCC}" in
  sparc-*-solaris*:yes)
    AC_DEFINE(HAVE_SOLARIS_SPARC_PERFMON)
    ;;
  *)
    ;;
esac


dnl ----------------------------------------------------------------------
dnl Checks for libraries.
dnl ----------------------------------------------------------------------

AC_CHECK_LIB(m, sin)
AC_CHECK_LIB(dl, dlopen)
AC_CHECK_LIB(inet, main)
AC_CHECK_LIB(resolv, main)

dnl Try to figure out where to get the termcap functions from.
dnl This could probably be improved...
AC_CHECK_LIB(termlib, tgetent)
if test $ac_cv_lib_termlib_tgetent = no ; then
  AC_CHECK_LIB(curses, tgetent)
  if test $ac_cv_lib_curses_tgetent = no ; then
    AC_CHECK_LIB(ncurses, tgetent)
    if test $ac_cv_lib_ncurses_tgetent = no ; then
      AC_CHECK_LIB(termcap, tgetent)
    fi
  fi
fi

dnl
dnl This test kindly borrowed from Tcl
dnl
#--------------------------------------------------------------------
#	Check for the existence of the -lsocket and -lnsl libraries.
#	The order here is important, so that they end up in the right
#	order in the command line generated by make.  Here are some
#	special considerations:
#	1. Use "connect" and "accept" to check for -lsocket, and
#	   "gethostbyname" to check for -lnsl.
#	2. Use each function name only once:  can't redo a check because
#	   autoconf caches the results of the last check and won't redo it.
#	3. Use -lnsl and -lsocket only if they supply procedures that
#	   aren't already present in the normal libraries.  This is because
#	   IRIX 5.2 has libraries, but they aren't needed and they're
#	   bogus:  they goof up name resolution if used.
#	4. On some SVR4 systems, can't use -lsocket without -lnsl too.
#	   To get around this problem, check for both libraries together
#	   if -lsocket doesn't work by itself.
#--------------------------------------------------------------------

erl_checkBoth=0
AC_CHECK_FUNC(connect, erl_checkSocket=0, erl_checkSocket=1)
if test "$erl_checkSocket" = 1; then
    AC_CHECK_LIB(socket, main, LIBS="$LIBS -lsocket", erl_checkBoth=1)
fi
if test "$erl_checkBoth" = 1; then
    tk_oldLibs=$LIBS
    LIBS="$LIBS -lsocket -lnsl"
    AC_CHECK_FUNC(accept, erl_checkNsl=0, [LIBS=$tk_oldLibs])
fi
AC_CHECK_FUNC(gethostbyname, , AC_CHECK_LIB(nsl, main, [LIBS="$LIBS -lnsl"]))
AC_CHECK_FUNC(gethostbyname_r,have_gethostbyname_r=yes)
if test "$have_gethostbyname_r" = yes; then
	# OK, so we have gethostbyname_r() - but do we know how to call it...?
	# (if not, HAVE_GETHOSTBYNAME_R will not be defined at all)
	case $host_os in
		solaris2*)
			AC_DEFINE(HAVE_GETHOSTBYNAME_R, GHBN_R_SOLARIS)
		;;
		aix4*)
			# AIX version also needs "struct hostent_data" defn
			AC_TRY_COMPILE([#include <netdb.h>],
				[struct hostent_data hd;],
				AC_DEFINE(HAVE_GETHOSTBYNAME_R, GHBN_R_AIX))
		;;
		*)
			AC_EGREP_CPP(yes,[#include <stdio.h>
			  #ifdef __GLIBC__
			  yes
			  #endif
			  ], AC_DEFINE(HAVE_GETHOSTBYNAME_R, GHBN_R_GLIBC))
		;;
	esac
fi
dnl h_errno isn't always declared in netdb.h, and with some definitions
dnl (e.g. function call for thread-safe) a simple 'extern int' may conflict
dnl (we do assume that h_errno exists at all...)
AC_CACHE_CHECK([for h_errno declaration in netdb.h],
  ac_cv_decl_h_errno,
[AC_TRY_COMPILE([#include <netdb.h>], [int err = h_errno;],
  ac_cv_decl_h_errno=yes, ac_cv_decl_h_errno=no)])
if test $ac_cv_decl_h_errno = yes; then
  AC_DEFINE(H_ERRNO_DECLARED)
fi


dnl ----------------------------------------------------------------------
dnl Checks for header files.
dnl ----------------------------------------------------------------------

AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_HEADER_TIME

dnl Interactive UX needs <net/errno.h> for socket related error codes.
dnl Some Linuxes needs <sys/socketio.h> instead of <sys/sockio.h>
dnl
AC_CHECK_HEADERS(fcntl.h limits.h unistd.h syslog.h dlfcn.h ieeefp.h \
                 thread.h pthread.h poll.h sys/stropts.h \
                 sys/ioctl.h sys/time.h sys/uio.h sys/sockio.h sys/socketio.h \
                 net/errno.h)

dnl Some Linuxes have <pthread/mit/pthread.h> instead of <pthread.h>
AC_CHECK_HEADER(pthread/mit/pthread.h, AC_DEFINE(HAVE_MIT_PTHREAD_H))

LM_DECL_SO_BSDCOMPAT
LM_DECL_INADDR_LOOPBACK
LM_DECL_SYS_ERRLIST


dnl ----------------------------------------------------------------------
dnl Checks for typedefs, structures, and compiler characteristics.
dnl ----------------------------------------------------------------------

AC_C_CONST
AC_TYPE_SIGNAL
AC_TYPE_OFF_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T

AC_STRUCT_TM
LM_STRUCT_SOCKADDR_SA_LEN
LM_STRUCT_EXCEPTION

AC_CHECK_SIZEOF(long, 4)dnl Assumes all cross compiling is to 32bit uP

AC_C_BIGENDIAN

dnl ----------------------------------------------------------------------
dnl Checks for library functions.
dnl ----------------------------------------------------------------------

AC_CHECK_FUNCS([ieee_handler fpsetmask finite res_gethostbyname dlopen \
		poll pread pwrite writev memmove strerror \
		gethrtime localtime_r gmtime_r])
AC_FUNC_SETVBUF_REVERSED
AC_FUNC_VFORK
AC_FUNC_VPRINTF

dnl The AC_DEFINEs are necessary for autoheader to work. :-(
dnl for gzio
LM_CHECK_FUNC_DECL(fread, [extern int fread();],,
                   AC_DEFINE(HAVE_CONFLICTING_FREAD_DECLARATION))


dnl ----------------------------------------------------------------------
dnl Checks for features/quirks in the system that affects Erlang.
dnl ----------------------------------------------------------------------

LM_SYS_IPV6
LM_SYS_MULTICAST
ERL_TIME_CORRECTION

dnl
dnl Some operating systems allow you to redefine FD_SETSIZE to be able
dnl to select on more than the default number of file descriptors.
dnl We first discovered this in BSD/OS where the default is ridiculously
dnl low (256). But since we use a lot of file descriptors we found the
dnl need to go over the limit in other os's as well. Since FD_SETSIZE 
dnl must be defined before pulling in sys/types.h the actual number
dnl of file descriptors is set in acconfig.h and will thus be in config.h
dnl which *always* should be included first.
dnl

AC_MSG_CHECKING([whether to redefine FD_SETSIZE])
case $host_os in
  bsdi*)
	AC_DEFINE(REDEFINE_FD_SETSIZE)
	AC_MSG_RESULT(yes)
	;;
  *)
	AC_MSG_RESULT(no)
	;;
esac



dnl ----------------------------------------------------------------------
dnl Tests related to configurable options given on command line
dnl (using the --disable, --enable and --with switches).
dnl ----------------------------------------------------------------------

#
# Check if we should use elib_malloc.
#

if test X${enable_elib_malloc} = Xyes; then
 AC_DEFINE(ENABLE_ELIB_MALLOC)
 AC_DEFINE(ELIB_HEAP_SBRK)
 AC_DEFINE(ELIB_ALLOC_IS_CLIB)
 AC_DEFINE(ELIB_SORTED_BLOCKS)
fi

#
# Figure out if we should use threads. The default is set above in the
# enable_threads variable. It can have the following values:
#
#   nothreads      don't look for threads
#   threads-ok     look for threads but it is ok if you can't find them
#   threads-error  look for threads and if you can't find them it is an error
#
THR_LIBS=
THR_DEFS=
AC_SUBST(THR_LIBS)
AC_SUBST(THR_DEFS)
case "$enable_threads" in
  threads-*)
    THR_LIBS=
    THR_DEFS="-DUSE_THREADS -D_REENTRANT"
    found_threads=0

#    We prefer pthreads even if Solaris threads are available.
#    # Check for Solaris threads
#    if test "$found_threads" = "0"; then
#      AC_CHECK_LIB(thread, thr_create, [found_threads=1
#	  THR_LIBS="-lthread"
#	  THR_DEFS="$THR_DEFS -DSOLARIS_THREADS"],
#        found_threads=0)
#    fi

    # Check for POSIX threads
    if test "$found_threads" = "0"; then
      AC_CHECK_LIB(pthread, pthread_create, [found_threads=1
           THR_LIBS="-lpthread"
           THR_DEFS="$THR_DEFS -DPOSIX_THREADS -D_THREAD_SAFE"],
        found_threads=0)
    fi

    # FreeBSD has pthreads in special c library, c_r
    if test "$found_threads" = "0"; then
      AC_CHECK_LIB(c_r, pthread_create, [found_threads=1
           THR_LIBS="-lc_r"
           THR_DEFS="$THR_DEFS -DPOSIX_THREADS -D_THREAD_SAFE"],
        found_threads=0)
    fi

    case "$found_threads"-"$enable_threads" in
      0-threads-ok)
        # We couldn't find any threads, but that is ok
        THR_LIBS=
        THR_DEFS=
        ;;
      0-threads-error)
        # If user specifically asked for threads give an error msg.
        AC_MSG_ERROR([don't know how to enable threads])
        ;;
      *)
        # Threads found
	;;
    esac
	;;
  *)
    # Threads disabled
    ;;
esac


dnl ----------------------------------------------------------------------
dnl Stuff that should be moved into their respective application
dnl ----------------------------------------------------------------------

dnl XXX this looks really broken...
AC_SUBST(DLDFLAGS)
AC_SUBST(DCFLAGS)
DLDFLAGS=""
DCFLAGS=""
if test x$ac_cv_func_dlopen = xyes; then
	DLDFLAGS="-shared -fPIC"
	DCFLAGS="-fPIC"
fi

dnl XXX broken too...
if test "$GCC" = yes; then
	DEBUG_FLAGS="-Wall -g"
fi


dnl for erl_interface
LM_CHECK_FUNC_DECL(fprintf, [extern int fprintf();],,
                   AC_DEFINE(HAVE_CONFLICTING_FPRINTF_DECLARATION))
LIB_CFLAGS="$CFLAGS" AC_SUBST(LIB_CFLAGS)

dnl crypto
#--------------------------------------------------------------------
# Dynamic Erlang Drivers
#
# Linking to produce dynamic Erlang drivers to be loaded by Erlang's
# Dynamic Driver Loader and Linker (DDLL). Below the prefix DED is an
# abbreviation for `Dynamic Erlang Driver'.
#
# For DED we need something quite sloppy, which allows undefined references 
# (notably driver functions) in the resulting shared library. 
# Example of Makefile rule (and settings of macros):
#
# LIBS = @LIBS@
# LD = @DED_LD@
# LDFLAGS = @DED_LDFLAGS@
# soname = @ldsoname@
#
# my_drv.so:   my_drv.o my_utils.o
#              $(LD) $(LDFLAGS) $(soname) $@ -o $@ $^ -lc $(LIBS)
#
# XXX By now only the Solaris 2 linker and the GNU linker are supported.
# -- Peter
# XXX (And AIX)
#--------------------------------------------------------------------
if test "x$GCC" = xyes; then
	DED_CFLAGS="$CFLAGS -fPIC"
else
	DED_CFLAGS="$CFLAGS"
fi
DED_LD=ld
# I don't think anything really needs the soname stuff
# - nullify it here and we'll find out  /Per
ded_soname=""
AC_MSG_CHECKING(for linker flags for loadable drivers)
case $host_os in
	solaris2*|sysv4*)
		DED_LDFLAGS="-G"
	;;
	aix4*)
		DED_LDFLAGS="-G -bnoentry -bexpall"
	;;
	freebsd2*)
		# Non-ELF GNU linker
		DED_LDFLAGS="-Bshareable"
	;;
	*)
		# assume GNU linker and ELF
		DED_LDFLAGS="-shared"
	;;
esac
AC_MSG_RESULT([$DED_LDFLAGS])

AC_SUBST(DED_CFLAGS)
AC_SUBST(DED_LD)
AC_SUBST(DED_LDFLAGS)
AC_SUBST(ded_soname)

dnl
dnl SSL and CRYPTO needs the library openSSL/ssleay
dnl
dnl Check flags --with-ssl, --without-ssl --with-ssl=PATH.
dnl If no option is given or --with-ssl is set without a path then we
dnl search for SSL libraries and header files in the standard locations. 
dnl If set to --without-ssl we disable the use of SSL
dnl If set to --with-ssl=PATH we use that path as the prefix, i.e. we
dnl use "PATH/include" and "PATH/lib".

# Remove all SKIP files from previous runs
/bin/rm -f $ERL_TOP/lib/*/SKIP

AC_SUBST(SSL_INCLUDE)
AC_SUBST(SSLEAY_ROOT)
AC_ARG_WITH(ssl,
[  --with-ssl=PATH           specify location of openSSL/ssleay include and lib
  --with-ssl                use SSL (default)
  --without-ssl             don't use SSL])

if test "x$with_ssl" = "xno"; then
    echo "configure --without-ssl disabled use of SSL" > $ERL_TOP/lib/ssl/SKIP
    echo "configure --without-ssl disabled use of SSL" > $ERL_TOP/lib/crypto/SKIP
elif test "x$with_ssl" = "xyes" -o "x$with_ssl" = "x" ;then
    # We search for SSL. First in the OTP team ClearCase standard location,
    # then in the common OS standard locations
    if test -d $ERL_TOP/lib/ssl/usr/ssleay; then
        SSLEAY_ROOT='$(ERL_TOP)/lib/ssl/usr/ssleay/$(TARGET)'
        SSL_INCLUDE='-I$(ERL_TOP)/lib/ssl/usr/ssleay/$(TARGET)/include'
    else
        for dir in /usr /usr/pkg /usr/local /usr/local/ssl /usr/lib/ssl /usr/ssl; do
            AC_CHECK_HEADER($dir/include/openssl/opensslv.h,
		ac_cv_openssl=yes, ac_cv_openssl=no)
            if test $ac_cv_openssl = yes ; then
                SSLEAY_ROOT="$dir"
                SSL_INCLUDE="-I$dir/include/openssl -I$dir/include"
		ssl_found=yes
		break
	    fi
        done
        if test "x$ssl_found" != "xyes" ; then
	    echo "I could not find OpenSSL or SSLeay" > $ERL_TOP/lib/ssl/SKIP
            echo "I could not find OpenSSL or SSLeay" > $ERL_TOP/lib/crypto/SKIP
            AC_MSG_ERROR(No OpenSSL or SSLeay found, use --with-ssl=PATH or --without-ssl)
	fi
    fi
else
        # Option given with PATH to package
        if test ! -d "$with_ssl" ; then
            AC_MSG_ERROR(Invalid path to option --with-ssl=PATH)
        fi
        SSLEAY_ROOT="$with_ssl"
        SSL_INCLUDE="-I$with_ssl/include/openssl -I$with_ssl/include"
fi

#--------------------------------------------------------------------
# Os mon stuff.
#--------------------------------------------------------------------
AC_SUBST(os_mon_programs)
AC_CHECK_LIB(kstat, kstat_open, [os_mon_programs="$os_mon_programs cpu_sup"])
case $host_os in
	solaris2*)
		os_mon_programs="$os_mon_programs ferrule mod_syslog" ;;
esac


dnl
dnl Then there are a number of apps which needs a java compiler...
dnl
AC_CHECK_PROGS(JAVAC, javac guavac gcj jikes bock)
if test -n "$JAVAC"; then
  dnl Make sure it's at least JDK 1.2
  AC_CACHE_CHECK(for JDK version 1.2, 
     ac_cv_prog_javac_ver_1_2,
     [ERL_TRY_LINK_JAVA([], [java.util.Iterator iter;],
        ac_cv_prog_javac_ver_1_2=yes, ac_cv_prog_javac_ver_1_2=no)])
  if test $ac_cv_prog_javac_ver_1_2 = no; then
    unset -v JAVAC
  fi
fi
if test -z "$JAVAC"; then
  AC_MSG_WARN([Could not find any usable java compiler, will skip: jinterface])

  need_java="jinterface ic/java_src orber/java_src
		 mnesia_session/examples/person/java_session"

  for a in $need_java ; do
	echo "No Java compiler found" > $ERL_TOP/lib/$a/SKIP
  done
fi

dnl
dnl Orber has a c++ example, this isn't the right way to check for
dnl it, but....
dnl
dnl ...why not use AC_PROG_CXX? [sverkerw]
dnl
CXXFLAGS=
AC_SUBST(CXXFLAGS)
AC_CHECK_PROG(CXX, g++, g++, false)
if test "$ac_cv_prog_CXX" = false; then
  echo "No C++ compiler found" > $ERL_TOP/lib/orber/SKIP
fi



dnl ----------------------------------------------------------------------
dnl Directories needed for the build
dnl ----------------------------------------------------------------------

erts=${erl_top}/erts

erts_dirs="								
  $erts/obj $erts/obj.beam $erts/obj.debug $erts/obj.debug.beam
									
  $erts/obj/$host
  $erts/obj.beam/$host $erts/obj.debug/$host
  $erts/obj.debug.beam/$host						
									
  $erts/obj.instr.beam
  $erts/obj.instr.beam/$host						
      									
  $erts/obj.purify.beam				
  $erts/obj.purify.beam/$host		
      									
  $erts/obj.quantify.beam			
  $erts/obj.quantify.beam/$host		
      									
  $erts/obj.purecov.beam				
  $erts/obj.purecov.beam/$host		
"
for d in ${erl_top}/bin ${erl_top}/bin/$host $erts_dirs ;
do
  if test ! -d $d; then
    mkdir -p 1>/dev/null 2>&1 $d
  fi
done


dnl ----------------------------------------------------------------------
dnl Output the result.
dnl ----------------------------------------------------------------------

dnl  Note that the output files are relative to $srcdir

lib=../lib

AC_OUTPUT(
  $srcdir/emulator/$host/Makefile:emulator/Makefile.in
  $srcdir/emulator/zlib/$host/Makefile:emulator/zlib/Makefile.in
  $srcdir/epmd/src/$host/Makefile:epmd/src/Makefile.in
  $srcdir/etc/common/$host/Makefile:etc/common/Makefile.in
  $srcdir/../make/$host/otp.mk:../make/otp.mk.in
dnl
dnl The ones below should be moved to their respective lib
dnl
  $srcdir/$lib/erl_interface/src/$host/Makefile:$lib/erl_interface/src/Makefile.in
  $srcdir/$lib/ic/c_src/$host/Makefile:$lib/ic/c_src/Makefile.in
  $srcdir/$lib/os_mon/c_src/$host/Makefile:$lib/os_mon/c_src/Makefile.in
  $srcdir/$lib/ssl/c_src/$host/Makefile:$lib/ssl/c_src/Makefile.in
  $srcdir/$lib/crypto/c_src/$host/Makefile:$lib/crypto/c_src/Makefile.in
  $srcdir/$lib/orber/c_src/$host/Makefile:$lib/orber/c_src/Makefile.in
  $srcdir/$lib/odbc/src/$host/Makefile:$lib/odbc/src/Makefile.in
  $srcdir/$lib/comet/c_src/$host/Makefile:$lib/comet/c_src/Makefile.in
  $srcdir/$lib/runtime_tools/c_src/$host/Makefile:$lib/runtime_tools/c_src/Makefile.in
  )
    
