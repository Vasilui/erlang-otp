# ``The contents of this file are subject to the Erlang Public License,
# Version 1.1, (the "License"); you may not use this file except in
# compliance with the License. You should have received a copy of the
# Erlang Public License along with this software. If not, it can be
# retrieved via the world wide web at http://www.erlang.org/.
# 
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
# the License for the specific language governing rights and limitations
# under the License.
# 
# The Initial Developer of the Original Code is Ericsson Utvecklings AB.
# Portions created by Ericsson are Copyright 1999, Ericsson Utvecklings
# AB. All Rights Reserved.''
# 
#     $Id$
#
# Toplevel makefile for building the Erlang system
#

# ----------------------------------------------------------------------

# And you'd think that this would be obvious... :-)
SHELL = /bin/sh

# The top directory in which Erlang is unpacked
ERL_TOP = @ERL_TOP@

# erts (Erlang RunTime System) version
ERTS = @ERTS@

# ----------------------------------------------------------------------

#
# The variables below control where Erlang is installed. They are
# configurable (unless otherwise stated). Some of them are best
# changed by giving special arguments to configure instead of changing
# them in this file. Note: If you change them in Makefile, instead of
# Makefile.in your changes will be lost the next time you run
# configure.
#

# prefix from autoconf, default is /usr/local (must be an absolute path)
prefix      = @prefix@
exec_prefix = @exec_prefix@

# The following can be set in case you install Erlang in a different
# location from where you have configured it to run. This can be
# useful e.g. when installing on a server that stores the files with a
# different path from where the clients access them. Or when building
# rpms.
#INSTALL_PREFIX =
# Naah...override `prefix' instead.

# The directory in which user executables (erl, erlc and erl_call) are put
BINDIR      = $(INSTALL_PREFIX)@bindir@

# The directory which will contain installed Erlang version.
# (ILIBDIR is supposed to be LIBDIR *without* the install prefix)
ERLANG_LIBDIR     = $(INSTALL_PREFIX)@libdir@/erlang
ERLANG_ILIBDIR    = @libdir@/erlang

# You can *not* change these two, they have to stay this way for now.
ERLANG_BINDIR     = $(ERLANG_LIBDIR)/bin
ERLANG_ERTSBINDIR = $(ERLANG_LIBDIR)/$(ERTS)/bin

# The directory in which man pages for above executables are put
ERL_MAN1DIR      = $(INSTALL_PREFIX)@mandir@/man1
ERL_MAN1EXT      = 1

# The directory in which Erlang private man pages are put. In order
# not to clutter up the man namespace these are by default put in the
# Erlang private directory $(ERLANG_ILIBDIR)/man. If you want to
# install the man pages together with the rest give the argument
# "--disable-erlang-mandir" when you run configure, which will set
# MAN_DIR to @mandir@.
#   If you want a special suffix on the manpages set ERL_MANEXT to
# this suffix, e.g. "erl"
ERL_MANDIR       = $(INSTALL_PREFIX)@erl_mandir@
ERL_MANEXT       =

# ----------------------------------------------------------------------

# Must be GNU make!
MAKE    = @MAKE_PROG@

# This should be set to the target "arch-vendor-os"
TARGET  = @TARGET@

# A BSD compatible install program
INSTALL         = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA    = @INSTALL_DATA@
MKSUBDIRS       = ${INSTALL} -d

# Program to create symbolic links
LN_S            = @LN_S@

# Ranlib program, if not needed set to e.g. ":"
RANLIB          = @RANLIB@

# ----------------------------------------------------------------------

# Directories which you need in the path if you wish to run the
# locally built system. (This can be put in front or back of the path
# depending on which system is preferred.)
LOCAL_PATH     = $(ERL_TOP)/erts/bin/$(TARGET):$(ERL_TOP)/erts/bin
BOOT_PREFIX=$(ERL_TOP)/bootstrap/bin:

# ----------------------------------------------------------------------

#
# The steps to build a working system are:
#   * build an emulator
#   * setup the erl and erlc program in bootstrap/bin
#   * build additional compilers and copy them into bootstrap/lib
#   * use the bootstrap erl and erlc to build all the libs
#
all: depend emulator emulator.instr \
     init_boot \
     bootstrap_setup \
     secondary_bootstrap_build secondary_bootstrap_copy \
     tertiary_bootstrap_build tertiary_bootstrap_copy \
     fourth_bootstrap_build fourth_bootstrap_copy \
     libs build_boot local_setup

#
# Use these targets when you want to use the erl and erlc
# binaries in your PATH instead of those created from the
# pre-compiled Erlang modules under bootstrap/.
#
noboot:
	$(MAKE) BOOT_PREFIX= emulator emulator.instr libs local_setup
noboot_install:
	$(MAKE) BOOT_PREFIX= install

# ----------------------------------------------------------------------
ERLANG_EARS=$(ERL_TOP)/bootstrap/erts
ELINK=$(ERL_TOP)/bootstrap/erts/bin/elink
BOOT_BINDIR=$(ERL_TOP)/bootstrap/erts/bin
BEAM_EVM=$(ERL_TOP)/bin/$(TARGET)/beam_evm

init_boot:
	cp $(BOOT_BINDIR)/ecc $(ERL_TOP)/bootstrap/bin
	chmod +w $(ERL_TOP)/bootstrap/bin/ecc
	ERLANG_EARS=$(ERLANG_EARS) $(BEAM_EVM) $(ELINK) -r $(BEAM_EVM) \
	   $(ERL_TOP)/bootstrap/bin/ecc

build_boot:
	cd erts/boot/src && ERL_TOP=$(ERL_TOP) PATH=$(BOOT_PREFIX)$${PATH} \
		$(MAKE) opt

emulator:
	cd erts && ERL_TOP=$(ERL_TOP) $(MAKE) NO_START_SCRIPTS=true opt

emulator.instr:
	cd erts/emulator && \
		ERL_TOP=$(ERL_TOP) $(MAKE) NO_START_SCRIPTS=true instr

libs:
	cd lib && \
	  ERL_TOP=$(ERL_TOP) PATH=$(BOOT_PREFIX)$${PATH} \
		$(MAKE) opt BUILD_ALL=true

kernel:
	cd lib/kernel && \
	  ERL_TOP=$(ERL_TOP) PATH=$(BOOT_PREFIX)$${PATH} \
		$(MAKE) opt BUILD_ALL=true

hlib:
	cd lib/hipe && \
	  ERL_TOP=$(ERL_TOP) PATH=$(BOOT_PREFIX)$${PATH} \
		$(MAKE) opt BUILD_ALL=true

dep depend:
	cd erts/emulator && ERL_TOP=$(ERL_TOP) $(MAKE) generate depend

# Creates "erl" and "erlc" in bootstrap/bin which uses the precompiled 
# libraries in the bootstrap directory
bootstrap_setup:
	@rm -f bootstrap/bin/erl bootstrap/bin/erlc
	@sed	-e "s;%FINAL_ROOTDIR%;$(ERL_TOP)/bootstrap;"   \
		-e "s;erts-.*/bin;../bin/$(TARGET);"    \
		-e "s;EMU=.*;EMU=beam$(TYPEMARKER);" \
	        $(ERL_TOP)/erts/etc/unix/erl.src.src > \
			$(ERL_TOP)/bootstrap/bin/erl
	@cp $(ERL_TOP)/bin/$(TARGET)/erlc $(ERL_TOP)/bootstrap/bin/erlc
	@chmod 755 $(ERL_TOP)/bootstrap/bin/erl $(ERL_TOP)/bootstrap/bin/erlc

secondary_bootstrap_build:
	cd lib && \
	  ERL_TOP=$(ERL_TOP) PATH=$(BOOT_PREFIX)$${PATH} \
		$(MAKE) opt SECONDARY_BOOTSTRAP=true

secondary_bootstrap_copy:
	if test ! -d bootstrap/lib/kernel ; then mkdir bootstrap/lib/kernel ; fi
	if test ! -d bootstrap/lib/kernel/ebin ; then mkdir bootstrap/lib/kernel/ebin ; fi
	if test ! -d bootstrap/lib/kernel/include ; then mkdir bootstrap/lib/kernel/include ; fi
	cp lib/kernel/ebin/*.beam bootstrap/lib/kernel/ebin
	cp lib/kernel/include/*.hrl bootstrap/lib/kernel/include
	if test ! -d bootstrap/lib/hipe ; then mkdir bootstrap/lib/hipe ; fi
	if test ! -d bootstrap/lib/hipe/ebin ; then mkdir bootstrap/lib/hipe/ebin ; fi
	if test -f lib/hipe/ebin/hipe.beam ; then cp lib/hipe/ebin/*.beam bootstrap/lib/hipe/ebin; fi
	if test ! -d bootstrap/lib/parsetools ; then mkdir bootstrap/lib/parsetools ; fi
	if test ! -d bootstrap/lib/parsetools/ebin ; then mkdir bootstrap/lib/parsetools/ebin ; fi
	if test ! -d bootstrap/lib/parsetools/include ; then mkdir bootstrap/lib/parsetools/include ; fi
	cp lib/parsetools/ebin/*.beam bootstrap/lib/parsetools/ebin
	cp lib/parsetools/include/*.hrl bootstrap/lib/parsetools/include
	if test ! -d bootstrap/lib/asn1 ; then mkdir bootstrap/lib/asn1 ; fi
	if test ! -d bootstrap/lib/asn1/ebin ; then mkdir bootstrap/lib/asn1/ebin ; fi
	cp lib/asn1/ebin/*.beam bootstrap/lib/asn1/ebin

tertiary_bootstrap_build:
	cd lib && \
	  ERL_TOP=$(ERL_TOP) PATH=$(BOOT_PREFIX)$${PATH} \
		$(MAKE) opt TERTIARY_BOOTSTRAP=true

tertiary_bootstrap_copy:
	if test ! -d bootstrap/lib/snmp ; then mkdir bootstrap/lib/snmp ; fi
	if test ! -d bootstrap/lib/snmp/ebin ; then mkdir bootstrap/lib/snmp/ebin ; fi
	if test ! -d bootstrap/lib/snmp/include ; then mkdir bootstrap/lib/snmp/include ; fi
	cp lib/snmp/ebin/*.beam bootstrap/lib/snmp/ebin

fourth_bootstrap_build:
	cd lib && \
	  ERL_TOP=$(ERL_TOP) PATH=$(BOOT_PREFIX)$${PATH} \
		$(MAKE) opt FOURTH_BOOTSTRAP=true

fourth_bootstrap_copy:
	if test ! -d bootstrap/lib/sasl ; then mkdir bootstrap/lib/sasl ; fi
	if test ! -d bootstrap/lib/sasl/ebin ; then mkdir bootstrap/lib/sasl/ebin ; fi
	if test ! -d bootstrap/lib/sasl/include ; then mkdir bootstrap/lib/sasl/include ; fi
	if test ! -d bootstrap/lib/ic ; then mkdir bootstrap/lib/ic ; fi
	if test ! -d bootstrap/lib/ic/ebin ; then mkdir bootstrap/lib/ic/ebin ; fi
	if test ! -d bootstrap/lib/ic/include ; then mkdir bootstrap/lib/ic/include ; fi
	cp lib/ic/ebin/*.beam bootstrap/lib/ic/ebin
	cp lib/ic/include/*.idl lib/ic/include/*.h bootstrap/lib/ic/include
	cp lib/sasl/ebin/*.beam bootstrap/lib/sasl/ebin
	cp lib/sasl/include/*.hrl bootstrap/lib/sasl/include

# Creates "erl" and "erlc" scripts in bin/erl which uses the libraries in lib
local_setup:
	@rm -f erts/bin/erl erts/bin/erlc
	@cd erts && \
		ERL_TOP=$(ERL_TOP) PATH=$(BOOT_PREFIX)$${PATH} \
		$(MAKE) local_setup


# ----------------------------------------------------------------------

#
# Install
#
# Order is important here, don't change it!
#
install: install.dirs install.emulator install.emulator.instr install.libs install.boot install.Install install.bin

install.emulator:
	cd erts && \
	  ERL_TOP=$(ERL_TOP) PATH=$(BOOT_PREFIX)$${PATH} \
	  $(MAKE) TESTROOT=$(ERLANG_LIBDIR) TYPE=opt release

install.emulator.instr:
	cd erts/emulator && \
	  ERL_TOP=$(ERL_TOP) PATH=$(BOOT_PREFIX)$${PATH} \
	  $(MAKE) TESTROOT=$(ERLANG_LIBDIR) TYPE=instr release

install.libs:
	cd lib && \
	  ERL_TOP=$(ERL_TOP) PATH=$(BOOT_PREFIX)$${PATH} \
	  $(MAKE) TESTROOT=$(ERLANG_LIBDIR) BUILD_ALL=true release 

install.boot:
	cd erts/boot/src && ERL_TOP=$(ERL_TOP) PATH=$(BOOT_PREFIX)$${PATH} \
		$(MAKE) release TESTROOT=$(ERLANG_LIBDIR)

install.Install:
	cd $(ERLANG_LIBDIR) && ./Install -minimal $(ERLANG_LIBDIR)

#
# Erlang base public files
#
install.bin:
	rm -f $(BINDIR)/erl $(BINDIR)/erlc
	${LN_S} $(ERLANG_BINDIR)/erl      $(BINDIR)/erl
	${LN_S} $(ERLANG_BINDIR)/erlc     $(BINDIR)/erlc
	${LN_S} $(ERLANG_BINDIR)/ecc      $(BINDIR)/ecc
	${LN_S} $(ERLANG_BINDIR)/elink    $(BINDIR)/elink
	${LN_S} $(ERLANG_BINDIR)/ear      $(BINDIR)/ear
	${LN_S} $(ERLANG_BINDIR)/escript  $(BINDIR)/escript

#
# Directories needed before we can install
#
install.dirs:
	if test ! -d $(BINDIR) ; then ${MKSUBDIRS} $(BINDIR); fi
	${MKSUBDIRS} $(ERLANG_LIBDIR)
	${MKSUBDIRS} $(ERLANG_LIBDIR)/usr/lib

# ----------------------------------------------------------------------

#
# Clean targets
#

clean:
	rm -f *~ *.bak config.log config.status
	find . -type f -name SKIP -print | xargs $(RM)
	cd erts && ERL_TOP=$(ERL_TOP) $(MAKE) clean
	cd lib  && ERL_TOP=$(ERL_TOP) $(MAKE) clean BUILD_ALL=true

# ----------------------------------------------------------------------
